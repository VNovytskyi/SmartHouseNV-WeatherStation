
WeatherStationSTM32IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000532c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005918  08005918  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005920  08005920  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  20000070  08005998  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab8  08005998  00020ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091a2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000164c  00000000  00000000  0002923b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d8  00000000  00000000  0002a888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  0002b260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001410d  00000000  00000000  0002bba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000726b  00000000  00000000  0003fcad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e2ee  00000000  00000000  00046f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea4  00000000  00000000  000b5284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005424 	.word	0x08005424

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005424 	.word	0x08005424

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2iz>:
 8000e58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30f      	bcc.n	8000e82 <__aeabi_f2iz+0x2a>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d90d      	bls.n	8000e88 <__aeabi_f2iz+0x30>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e78:	fa23 f002 	lsr.w	r0, r3, r2
 8000e7c:	bf18      	it	ne
 8000e7e:	4240      	negne	r0, r0
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr
 8000e88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_f2iz+0x3a>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d105      	bne.n	8000e9e <__aeabi_f2iz+0x46>
 8000e92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e96:	bf08      	it	eq
 8000e98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f04f 0000 	mov.w	r0, #0
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9a7 	b.w	8001214 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f835 	bl	8000f44 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f828 	bl	8000f44 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f817 	bl	8000f44 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f809 	bl	8000f44 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__udivmoddi4>:
 8000f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f48:	468c      	mov	ip, r1
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	9e08      	ldr	r6, [sp, #32]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d14b      	bne.n	8000fea <__udivmoddi4+0xa6>
 8000f52:	428a      	cmp	r2, r1
 8000f54:	4615      	mov	r5, r2
 8000f56:	d967      	bls.n	8001028 <__udivmoddi4+0xe4>
 8000f58:	fab2 f282 	clz	r2, r2
 8000f5c:	b14a      	cbz	r2, 8000f72 <__udivmoddi4+0x2e>
 8000f5e:	f1c2 0720 	rsb	r7, r2, #32
 8000f62:	fa01 f302 	lsl.w	r3, r1, r2
 8000f66:	fa20 f707 	lsr.w	r7, r0, r7
 8000f6a:	4095      	lsls	r5, r2
 8000f6c:	ea47 0c03 	orr.w	ip, r7, r3
 8000f70:	4094      	lsls	r4, r2
 8000f72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f76:	fbbc f7fe 	udiv	r7, ip, lr
 8000f7a:	fa1f f885 	uxth.w	r8, r5
 8000f7e:	fb0e c317 	mls	r3, lr, r7, ip
 8000f82:	fb07 f908 	mul.w	r9, r7, r8
 8000f86:	0c21      	lsrs	r1, r4, #16
 8000f88:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f8c:	4599      	cmp	r9, r3
 8000f8e:	d909      	bls.n	8000fa4 <__udivmoddi4+0x60>
 8000f90:	18eb      	adds	r3, r5, r3
 8000f92:	f107 31ff 	add.w	r1, r7, #4294967295
 8000f96:	f080 811c 	bcs.w	80011d2 <__udivmoddi4+0x28e>
 8000f9a:	4599      	cmp	r9, r3
 8000f9c:	f240 8119 	bls.w	80011d2 <__udivmoddi4+0x28e>
 8000fa0:	3f02      	subs	r7, #2
 8000fa2:	442b      	add	r3, r5
 8000fa4:	eba3 0309 	sub.w	r3, r3, r9
 8000fa8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fb0:	fb00 f108 	mul.w	r1, r0, r8
 8000fb4:	b2a4      	uxth	r4, r4
 8000fb6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fba:	42a1      	cmp	r1, r4
 8000fbc:	d909      	bls.n	8000fd2 <__udivmoddi4+0x8e>
 8000fbe:	192c      	adds	r4, r5, r4
 8000fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fc4:	f080 8107 	bcs.w	80011d6 <__udivmoddi4+0x292>
 8000fc8:	42a1      	cmp	r1, r4
 8000fca:	f240 8104 	bls.w	80011d6 <__udivmoddi4+0x292>
 8000fce:	3802      	subs	r0, #2
 8000fd0:	442c      	add	r4, r5
 8000fd2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fd6:	2700      	movs	r7, #0
 8000fd8:	1a64      	subs	r4, r4, r1
 8000fda:	b11e      	cbz	r6, 8000fe4 <__udivmoddi4+0xa0>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	40d4      	lsrs	r4, r2
 8000fe0:	e9c6 4300 	strd	r4, r3, [r6]
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0xbe>
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	f000 80ec 	beq.w	80011cc <__udivmoddi4+0x288>
 8000ff4:	2700      	movs	r7, #0
 8000ff6:	e9c6 0100 	strd	r0, r1, [r6]
 8000ffa:	4638      	mov	r0, r7
 8000ffc:	4639      	mov	r1, r7
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	fab3 f783 	clz	r7, r3
 8001006:	2f00      	cmp	r7, #0
 8001008:	d148      	bne.n	800109c <__udivmoddi4+0x158>
 800100a:	428b      	cmp	r3, r1
 800100c:	d302      	bcc.n	8001014 <__udivmoddi4+0xd0>
 800100e:	4282      	cmp	r2, r0
 8001010:	f200 80fb 	bhi.w	800120a <__udivmoddi4+0x2c6>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb61 0303 	sbc.w	r3, r1, r3
 800101a:	2001      	movs	r0, #1
 800101c:	469c      	mov	ip, r3
 800101e:	2e00      	cmp	r6, #0
 8001020:	d0e0      	beq.n	8000fe4 <__udivmoddi4+0xa0>
 8001022:	e9c6 4c00 	strd	r4, ip, [r6]
 8001026:	e7dd      	b.n	8000fe4 <__udivmoddi4+0xa0>
 8001028:	b902      	cbnz	r2, 800102c <__udivmoddi4+0xe8>
 800102a:	deff      	udf	#255	; 0xff
 800102c:	fab2 f282 	clz	r2, r2
 8001030:	2a00      	cmp	r2, #0
 8001032:	f040 808f 	bne.w	8001154 <__udivmoddi4+0x210>
 8001036:	2701      	movs	r7, #1
 8001038:	1b49      	subs	r1, r1, r5
 800103a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800103e:	fa1f f985 	uxth.w	r9, r5
 8001042:	fbb1 fef8 	udiv	lr, r1, r8
 8001046:	fb08 111e 	mls	r1, r8, lr, r1
 800104a:	fb09 f00e 	mul.w	r0, r9, lr
 800104e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001052:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001056:	4298      	cmp	r0, r3
 8001058:	d907      	bls.n	800106a <__udivmoddi4+0x126>
 800105a:	18eb      	adds	r3, r5, r3
 800105c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8001060:	d202      	bcs.n	8001068 <__udivmoddi4+0x124>
 8001062:	4298      	cmp	r0, r3
 8001064:	f200 80cd 	bhi.w	8001202 <__udivmoddi4+0x2be>
 8001068:	468e      	mov	lr, r1
 800106a:	1a1b      	subs	r3, r3, r0
 800106c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001070:	fb08 3310 	mls	r3, r8, r0, r3
 8001074:	fb09 f900 	mul.w	r9, r9, r0
 8001078:	b2a4      	uxth	r4, r4
 800107a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800107e:	45a1      	cmp	r9, r4
 8001080:	d907      	bls.n	8001092 <__udivmoddi4+0x14e>
 8001082:	192c      	adds	r4, r5, r4
 8001084:	f100 33ff 	add.w	r3, r0, #4294967295
 8001088:	d202      	bcs.n	8001090 <__udivmoddi4+0x14c>
 800108a:	45a1      	cmp	r9, r4
 800108c:	f200 80b6 	bhi.w	80011fc <__udivmoddi4+0x2b8>
 8001090:	4618      	mov	r0, r3
 8001092:	eba4 0409 	sub.w	r4, r4, r9
 8001096:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800109a:	e79e      	b.n	8000fda <__udivmoddi4+0x96>
 800109c:	f1c7 0520 	rsb	r5, r7, #32
 80010a0:	40bb      	lsls	r3, r7
 80010a2:	fa22 fc05 	lsr.w	ip, r2, r5
 80010a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010aa:	fa21 f405 	lsr.w	r4, r1, r5
 80010ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010b2:	fbb4 f9fe 	udiv	r9, r4, lr
 80010b6:	fa1f f88c 	uxth.w	r8, ip
 80010ba:	fb0e 4419 	mls	r4, lr, r9, r4
 80010be:	fa20 f305 	lsr.w	r3, r0, r5
 80010c2:	40b9      	lsls	r1, r7
 80010c4:	fb09 fa08 	mul.w	sl, r9, r8
 80010c8:	4319      	orrs	r1, r3
 80010ca:	0c0b      	lsrs	r3, r1, #16
 80010cc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80010d0:	45a2      	cmp	sl, r4
 80010d2:	fa02 f207 	lsl.w	r2, r2, r7
 80010d6:	fa00 f307 	lsl.w	r3, r0, r7
 80010da:	d90b      	bls.n	80010f4 <__udivmoddi4+0x1b0>
 80010dc:	eb1c 0404 	adds.w	r4, ip, r4
 80010e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80010e4:	f080 8088 	bcs.w	80011f8 <__udivmoddi4+0x2b4>
 80010e8:	45a2      	cmp	sl, r4
 80010ea:	f240 8085 	bls.w	80011f8 <__udivmoddi4+0x2b4>
 80010ee:	f1a9 0902 	sub.w	r9, r9, #2
 80010f2:	4464      	add	r4, ip
 80010f4:	eba4 040a 	sub.w	r4, r4, sl
 80010f8:	fbb4 f0fe 	udiv	r0, r4, lr
 80010fc:	fb0e 4410 	mls	r4, lr, r0, r4
 8001100:	fb00 fa08 	mul.w	sl, r0, r8
 8001104:	b289      	uxth	r1, r1
 8001106:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800110a:	45a2      	cmp	sl, r4
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x1dc>
 800110e:	eb1c 0404 	adds.w	r4, ip, r4
 8001112:	f100 31ff 	add.w	r1, r0, #4294967295
 8001116:	d26b      	bcs.n	80011f0 <__udivmoddi4+0x2ac>
 8001118:	45a2      	cmp	sl, r4
 800111a:	d969      	bls.n	80011f0 <__udivmoddi4+0x2ac>
 800111c:	3802      	subs	r0, #2
 800111e:	4464      	add	r4, ip
 8001120:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001124:	fba0 8902 	umull	r8, r9, r0, r2
 8001128:	eba4 040a 	sub.w	r4, r4, sl
 800112c:	454c      	cmp	r4, r9
 800112e:	4641      	mov	r1, r8
 8001130:	46ce      	mov	lr, r9
 8001132:	d354      	bcc.n	80011de <__udivmoddi4+0x29a>
 8001134:	d051      	beq.n	80011da <__udivmoddi4+0x296>
 8001136:	2e00      	cmp	r6, #0
 8001138:	d069      	beq.n	800120e <__udivmoddi4+0x2ca>
 800113a:	1a5a      	subs	r2, r3, r1
 800113c:	eb64 040e 	sbc.w	r4, r4, lr
 8001140:	fa04 f505 	lsl.w	r5, r4, r5
 8001144:	fa22 f307 	lsr.w	r3, r2, r7
 8001148:	40fc      	lsrs	r4, r7
 800114a:	431d      	orrs	r5, r3
 800114c:	e9c6 5400 	strd	r5, r4, [r6]
 8001150:	2700      	movs	r7, #0
 8001152:	e747      	b.n	8000fe4 <__udivmoddi4+0xa0>
 8001154:	4095      	lsls	r5, r2
 8001156:	f1c2 0320 	rsb	r3, r2, #32
 800115a:	fa21 f003 	lsr.w	r0, r1, r3
 800115e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001162:	fbb0 f7f8 	udiv	r7, r0, r8
 8001166:	fa1f f985 	uxth.w	r9, r5
 800116a:	fb08 0017 	mls	r0, r8, r7, r0
 800116e:	fa24 f303 	lsr.w	r3, r4, r3
 8001172:	4091      	lsls	r1, r2
 8001174:	fb07 fc09 	mul.w	ip, r7, r9
 8001178:	430b      	orrs	r3, r1
 800117a:	0c19      	lsrs	r1, r3, #16
 800117c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001180:	458c      	cmp	ip, r1
 8001182:	fa04 f402 	lsl.w	r4, r4, r2
 8001186:	d907      	bls.n	8001198 <__udivmoddi4+0x254>
 8001188:	1869      	adds	r1, r5, r1
 800118a:	f107 30ff 	add.w	r0, r7, #4294967295
 800118e:	d231      	bcs.n	80011f4 <__udivmoddi4+0x2b0>
 8001190:	458c      	cmp	ip, r1
 8001192:	d92f      	bls.n	80011f4 <__udivmoddi4+0x2b0>
 8001194:	3f02      	subs	r7, #2
 8001196:	4429      	add	r1, r5
 8001198:	eba1 010c 	sub.w	r1, r1, ip
 800119c:	fbb1 f0f8 	udiv	r0, r1, r8
 80011a0:	fb08 1c10 	mls	ip, r8, r0, r1
 80011a4:	fb00 fe09 	mul.w	lr, r0, r9
 80011a8:	b299      	uxth	r1, r3
 80011aa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80011ae:	458e      	cmp	lr, r1
 80011b0:	d907      	bls.n	80011c2 <__udivmoddi4+0x27e>
 80011b2:	1869      	adds	r1, r5, r1
 80011b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80011b8:	d218      	bcs.n	80011ec <__udivmoddi4+0x2a8>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d916      	bls.n	80011ec <__udivmoddi4+0x2a8>
 80011be:	3802      	subs	r0, #2
 80011c0:	4429      	add	r1, r5
 80011c2:	eba1 010e 	sub.w	r1, r1, lr
 80011c6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011ca:	e73a      	b.n	8001042 <__udivmoddi4+0xfe>
 80011cc:	4637      	mov	r7, r6
 80011ce:	4630      	mov	r0, r6
 80011d0:	e708      	b.n	8000fe4 <__udivmoddi4+0xa0>
 80011d2:	460f      	mov	r7, r1
 80011d4:	e6e6      	b.n	8000fa4 <__udivmoddi4+0x60>
 80011d6:	4618      	mov	r0, r3
 80011d8:	e6fb      	b.n	8000fd2 <__udivmoddi4+0x8e>
 80011da:	4543      	cmp	r3, r8
 80011dc:	d2ab      	bcs.n	8001136 <__udivmoddi4+0x1f2>
 80011de:	ebb8 0102 	subs.w	r1, r8, r2
 80011e2:	eb69 020c 	sbc.w	r2, r9, ip
 80011e6:	3801      	subs	r0, #1
 80011e8:	4696      	mov	lr, r2
 80011ea:	e7a4      	b.n	8001136 <__udivmoddi4+0x1f2>
 80011ec:	4618      	mov	r0, r3
 80011ee:	e7e8      	b.n	80011c2 <__udivmoddi4+0x27e>
 80011f0:	4608      	mov	r0, r1
 80011f2:	e795      	b.n	8001120 <__udivmoddi4+0x1dc>
 80011f4:	4607      	mov	r7, r0
 80011f6:	e7cf      	b.n	8001198 <__udivmoddi4+0x254>
 80011f8:	4681      	mov	r9, r0
 80011fa:	e77b      	b.n	80010f4 <__udivmoddi4+0x1b0>
 80011fc:	3802      	subs	r0, #2
 80011fe:	442c      	add	r4, r5
 8001200:	e747      	b.n	8001092 <__udivmoddi4+0x14e>
 8001202:	f1ae 0e02 	sub.w	lr, lr, #2
 8001206:	442b      	add	r3, r5
 8001208:	e72f      	b.n	800106a <__udivmoddi4+0x126>
 800120a:	4638      	mov	r0, r7
 800120c:	e707      	b.n	800101e <__udivmoddi4+0xda>
 800120e:	4637      	mov	r7, r6
 8001210:	e6e8      	b.n	8000fe4 <__udivmoddi4+0xa0>
 8001212:	bf00      	nop

08001214 <__aeabi_idiv0>:
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <BME280_Error>:
BME280_CalibData CalibData;
int32_t temper_int;
BME280_WeatherData BME280_CurrentWeatherData;
//------------------------------------------------
void BME280_Error(char *errorMessage)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    PC_Send(errorMessage);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f001 f851 	bl	80022c8 <PC_Send>
    
    while (1)
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <BME280_Error+0x20>)
 800122c:	f001 fe06 	bl	8002e3c <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8001230:	2064      	movs	r0, #100	; 0x64
 8001232:	f001 fb8b 	bl	800294c <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001236:	e7f6      	b.n	8001226 <BME280_Error+0xe>
 8001238:	40011000 	.word	0x40011000

0800123c <I2Cx_WriteData>:
    }
}
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af04      	add	r7, sp, #16
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	460b      	mov	r3, r1
 8001248:	717b      	strb	r3, [r7, #5]
 800124a:	4613      	mov	r3, r2
 800124c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8001252:	797b      	ldrb	r3, [r7, #5]
 8001254:	b29a      	uxth	r2, r3
 8001256:	88f9      	ldrh	r1, [r7, #6]
 8001258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	2301      	movs	r3, #1
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <I2Cx_WriteData+0x4c>)
 800126a:	f001 ff27 	bl	80030bc <HAL_I2C_Mem_Write>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
  
    if(status != HAL_OK) 
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <I2Cx_WriteData+0x42>
        BME280_Error("[ ERROR ] I2Cx_WriteData: HAL_I2C_Mem_Write\n");
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <I2Cx_WriteData+0x50>)
 800127a:	f7ff ffcd 	bl	8001218 <BME280_Error>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000a8 	.word	0x200000a8
 800128c:	0800543c 	.word	0x0800543c

08001290 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af04      	add	r7, sp, #16
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	80fb      	strh	r3, [r7, #6]
 800129c:	4613      	mov	r3, r2
 800129e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	88f9      	ldrh	r1, [r7, #6]
 80012ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f107 030e 	add.w	r3, r7, #14
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	4808      	ldr	r0, [pc, #32]	; (80012e4 <I2Cx_ReadData+0x54>)
 80012c2:	f001 fff5 	bl	80032b0 <HAL_I2C_Mem_Read>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
  
  if(status != HAL_OK) 
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <I2Cx_ReadData+0x4a>
  {
      BME280_Error("[ ERROR ] I2Cx_ReadData: HAL_I2C_Mem_Read");
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <I2Cx_ReadData+0x58>)
 80012d2:	f7ff ffa1 	bl	8001218 <BME280_Error>
      return 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <I2Cx_ReadData+0x4c>
  }
  
  return value;
 80012da:	7bbb      	ldrb	r3, [r7, #14]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000a8 	.word	0x200000a8
 80012e8:	0800546c 	.word	0x0800546c

080012ec <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	603a      	str	r2, [r7, #0]
 80012f6:	80fb      	strh	r3, [r7, #6]
 80012f8:	460b      	mov	r3, r1
 80012fa:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001300:	797b      	ldrb	r3, [r7, #5]
 8001302:	b29a      	uxth	r2, r3
 8001304:	88f9      	ldrh	r1, [r7, #6]
 8001306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2302      	movs	r3, #2
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <I2Cx_ReadData16+0x48>)
 8001318:	f001 ffca 	bl	80032b0 <HAL_I2C_Mem_Read>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
  
  if(status != HAL_OK) 
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <I2Cx_ReadData16+0x40>
  {
      BME280_Error("[ ERROR ] I2Cx_ReadData16: HAL_I2C_Mem_Read");
 8001326:	4804      	ldr	r0, [pc, #16]	; (8001338 <I2Cx_ReadData16+0x4c>)
 8001328:	f7ff ff76 	bl	8001218 <BME280_Error>
  }
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000a8 	.word	0x200000a8
 8001338:	08005498 	.word	0x08005498

0800133c <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af04      	add	r7, sp, #16
 8001342:	4603      	mov	r3, r0
 8001344:	603a      	str	r2, [r7, #0]
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	460b      	mov	r3, r1
 800134a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8001350:	797b      	ldrb	r3, [r7, #5]
 8001352:	b29a      	uxth	r2, r3
 8001354:	88f9      	ldrh	r1, [r7, #6]
 8001356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2303      	movs	r3, #3
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <I2Cx_ReadData24+0x48>)
 8001368:	f001 ffa2 	bl	80032b0 <HAL_I2C_Mem_Read>
 800136c:	4603      	mov	r3, r0
 800136e:	73fb      	strb	r3, [r7, #15]
  
  if(status != HAL_OK) 
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <I2Cx_ReadData24+0x40>
  {
      BME280_Error("[ ERROR ] I2Cx_ReadData24: HAL_I2C_Mem_Read");
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <I2Cx_ReadData24+0x4c>)
 8001378:	f7ff ff4e 	bl	8001218 <BME280_Error>
  }
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200000a8 	.word	0x200000a8
 8001388:	080054c4 	.word	0x080054c4

0800138c <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	460a      	mov	r2, r1
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	4613      	mov	r3, r2
 800139a:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 800139c:	79ba      	ldrb	r2, [r7, #6]
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4619      	mov	r1, r3
 80013a2:	20ec      	movs	r0, #236	; 0xec
 80013a4:	f7ff ff4a 	bl	800123c <I2Cx_WriteData>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4619      	mov	r1, r3
 80013be:	20ec      	movs	r0, #236	; 0xec
 80013c0:	f7ff ff66 	bl	8001290 <I2Cx_ReadData>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
  return res;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	6039      	str	r1, [r7, #0]
 80013dc:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	20ec      	movs	r0, #236	; 0xec
 80013e6:	f7ff ff81 	bl	80012ec <I2Cx_ReadData16>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	6039      	str	r1, [r7, #0]
 80013fc:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	20ec      	movs	r0, #236	; 0xec
 8001406:	f7ff ff71 	bl	80012ec <I2Cx_ReadData16>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	6039      	str	r1, [r7, #0]
 800141c:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	20ec      	movs	r0, #236	; 0xec
 8001426:	f7ff ff61 	bl	80012ec <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	0a1b      	lsrs	r3, r3, #8
 8001430:	b29b      	uxth	r3, r3
 8001432:	b21a      	sxth	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	b29a      	uxth	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	801a      	strh	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	6039      	str	r1, [r7, #0]
 8001458:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	20ec      	movs	r0, #236	; 0xec
 8001462:	f7ff ff6b 	bl	800133c <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0c1b      	lsrs	r3, r3, #16
 800146c:	b2da      	uxtb	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001476:	431a      	orrs	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001482:	4313      	orrs	r3, r2
 8001484:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 800149a:	20f3      	movs	r0, #243	; 0xf3
 800149c:	f7ff ff88 	bl	80013b0 <BME280_ReadReg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f003 0309 	and.w	r3, r3, #9
 80014a6:	71fb      	strb	r3, [r7, #7]
  return res;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 80014b4:	b598      	push	{r3, r4, r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1); 
 80014b8:	4937      	ldr	r1, [pc, #220]	; (8001598 <BME280_ReadCoefficients+0xe4>)
 80014ba:	2088      	movs	r0, #136	; 0x88
 80014bc:	f7ff ff89 	bl	80013d2 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);  
 80014c0:	4936      	ldr	r1, [pc, #216]	; (800159c <BME280_ReadCoefficients+0xe8>)
 80014c2:	208a      	movs	r0, #138	; 0x8a
 80014c4:	f7ff ff95 	bl	80013f2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);  
 80014c8:	4935      	ldr	r1, [pc, #212]	; (80015a0 <BME280_ReadCoefficients+0xec>)
 80014ca:	208c      	movs	r0, #140	; 0x8c
 80014cc:	f7ff ff91 	bl	80013f2 <BME280_ReadReg_S16>
  
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1); 
 80014d0:	4934      	ldr	r1, [pc, #208]	; (80015a4 <BME280_ReadCoefficients+0xf0>)
 80014d2:	208e      	movs	r0, #142	; 0x8e
 80014d4:	f7ff ff7d 	bl	80013d2 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);  
 80014d8:	4933      	ldr	r1, [pc, #204]	; (80015a8 <BME280_ReadCoefficients+0xf4>)
 80014da:	2090      	movs	r0, #144	; 0x90
 80014dc:	f7ff ff89 	bl	80013f2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);  
 80014e0:	4932      	ldr	r1, [pc, #200]	; (80015ac <BME280_ReadCoefficients+0xf8>)
 80014e2:	2092      	movs	r0, #146	; 0x92
 80014e4:	f7ff ff85 	bl	80013f2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4); 
 80014e8:	4931      	ldr	r1, [pc, #196]	; (80015b0 <BME280_ReadCoefficients+0xfc>)
 80014ea:	2094      	movs	r0, #148	; 0x94
 80014ec:	f7ff ff81 	bl	80013f2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);  
 80014f0:	4930      	ldr	r1, [pc, #192]	; (80015b4 <BME280_ReadCoefficients+0x100>)
 80014f2:	2096      	movs	r0, #150	; 0x96
 80014f4:	f7ff ff7d 	bl	80013f2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);  
 80014f8:	492f      	ldr	r1, [pc, #188]	; (80015b8 <BME280_ReadCoefficients+0x104>)
 80014fa:	2098      	movs	r0, #152	; 0x98
 80014fc:	f7ff ff79 	bl	80013f2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8001500:	492e      	ldr	r1, [pc, #184]	; (80015bc <BME280_ReadCoefficients+0x108>)
 8001502:	209a      	movs	r0, #154	; 0x9a
 8001504:	f7ff ff75 	bl	80013f2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8001508:	492d      	ldr	r1, [pc, #180]	; (80015c0 <BME280_ReadCoefficients+0x10c>)
 800150a:	209c      	movs	r0, #156	; 0x9c
 800150c:	f7ff ff71 	bl	80013f2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8001510:	492c      	ldr	r1, [pc, #176]	; (80015c4 <BME280_ReadCoefficients+0x110>)
 8001512:	209e      	movs	r0, #158	; 0x9e
 8001514:	f7ff ff6d 	bl	80013f2 <BME280_ReadReg_S16>
  
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8001518:	20a1      	movs	r0, #161	; 0xa1
 800151a:	f7ff ff49 	bl	80013b0 <BME280_ReadReg>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <BME280_ReadCoefficients+0xe4>)
 8001524:	761a      	strb	r2, [r3, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2, &CalibData.dig_H2);
 8001526:	4928      	ldr	r1, [pc, #160]	; (80015c8 <BME280_ReadCoefficients+0x114>)
 8001528:	20e1      	movs	r0, #225	; 0xe1
 800152a:	f7ff ff62 	bl	80013f2 <BME280_ReadReg_S16>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 800152e:	20e3      	movs	r0, #227	; 0xe3
 8001530:	f7ff ff3e 	bl	80013b0 <BME280_ReadReg>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <BME280_ReadCoefficients+0xe4>)
 800153a:	771a      	strb	r2, [r3, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 800153c:	20e4      	movs	r0, #228	; 0xe4
 800153e:	f7ff ff37 	bl	80013b0 <BME280_ReadReg>
 8001542:	4603      	mov	r3, r0
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	b21c      	sxth	r4, r3
 8001548:	20e5      	movs	r0, #229	; 0xe5
 800154a:	f7ff ff31 	bl	80013b0 <BME280_ReadReg>
 800154e:	4603      	mov	r3, r0
 8001550:	b21b      	sxth	r3, r3
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	b21b      	sxth	r3, r3
 8001558:	4323      	orrs	r3, r4
 800155a:	b21a      	sxth	r2, r3
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <BME280_ReadCoefficients+0xe4>)
 800155e:	83da      	strh	r2, [r3, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8001560:	20e6      	movs	r0, #230	; 0xe6
 8001562:	f7ff ff25 	bl	80013b0 <BME280_ReadReg>
 8001566:	4603      	mov	r3, r0
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	b21c      	sxth	r4, r3
 800156c:	20e5      	movs	r0, #229	; 0xe5
 800156e:	f7ff ff1f 	bl	80013b0 <BME280_ReadReg>
 8001572:	4603      	mov	r3, r0
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	b2db      	uxtb	r3, r3
 8001578:	b21b      	sxth	r3, r3
 800157a:	4323      	orrs	r3, r4
 800157c:	b21a      	sxth	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <BME280_ReadCoefficients+0xe4>)
 8001580:	841a      	strh	r2, [r3, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001582:	20e7      	movs	r0, #231	; 0xe7
 8001584:	f7ff ff14 	bl	80013b0 <BME280_ReadReg>
 8001588:	4603      	mov	r3, r0
 800158a:	b25a      	sxtb	r2, r3
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <BME280_ReadCoefficients+0xe4>)
 800158e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001592:	bf00      	nop
 8001594:	bd98      	pop	{r3, r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	200009c0 	.word	0x200009c0
 800159c:	200009c2 	.word	0x200009c2
 80015a0:	200009c4 	.word	0x200009c4
 80015a4:	200009c6 	.word	0x200009c6
 80015a8:	200009c8 	.word	0x200009c8
 80015ac:	200009ca 	.word	0x200009ca
 80015b0:	200009cc 	.word	0x200009cc
 80015b4:	200009ce 	.word	0x200009ce
 80015b8:	200009d0 	.word	0x200009d0
 80015bc:	200009d2 	.word	0x200009d2
 80015c0:	200009d4 	.word	0x200009d4
 80015c4:	200009d6 	.word	0x200009d6
 80015c8:	200009da 	.word	0x200009da

080015cc <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 80015d6:	20f5      	movs	r0, #245	; 0xf5
 80015d8:	f7ff feea 	bl	80013b0 <BME280_ReadReg>
 80015dc:	4603      	mov	r3, r0
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	f023 031f 	bic.w	r3, r3, #31
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	4619      	mov	r1, r3
 80015fc:	20f5      	movs	r0, #245	; 0xf5
 80015fe:	f7ff fec5 	bl	800138c <BME280_WriteReg>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001614:	20f5      	movs	r0, #245	; 0xf5
 8001616:	f7ff fecb 	bl	80013b0 <BME280_ReadReg>
 800161a:	4603      	mov	r3, r0
 800161c:	f023 031c 	bic.w	r3, r3, #28
 8001620:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	f003 031c 	and.w	r3, r3, #28
 800162a:	b25a      	sxtb	r2, r3
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001630:	4313      	orrs	r3, r2
 8001632:	b25b      	sxtb	r3, r3
 8001634:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	4619      	mov	r1, r3
 800163a:	20f5      	movs	r0, #245	; 0xf5
 800163c:	f7ff fea6 	bl	800138c <BME280_WriteReg>
}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001652:	20f4      	movs	r0, #244	; 0xf4
 8001654:	f7ff feac 	bl	80013b0 <BME280_ReadReg>
 8001658:	4603      	mov	r3, r0
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	f023 031f 	bic.w	r3, r3, #31
 8001668:	b25a      	sxtb	r2, r3
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	4313      	orrs	r3, r2
 8001670:	b25b      	sxtb	r3, r3
 8001672:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	4619      	mov	r1, r3
 8001678:	20f4      	movs	r0, #244	; 0xf4
 800167a:	f7ff fe87 	bl	800138c <BME280_WriteReg>
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8001690:	20f4      	movs	r0, #244	; 0xf4
 8001692:	f7ff fe8d 	bl	80013b0 <BME280_ReadReg>
 8001696:	4603      	mov	r3, r0
 8001698:	f023 031c 	bic.w	r3, r3, #28
 800169c:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	f003 031c 	and.w	r3, r3, #28
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	4619      	mov	r1, r3
 80016b6:	20f4      	movs	r0, #244	; 0xf4
 80016b8:	f7ff fe68 	bl	800138c <BME280_WriteReg>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 80016ce:	20f2      	movs	r0, #242	; 0xf2
 80016d0:	f7ff fe6e 	bl	80013b0 <BME280_ReadReg>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f023 0307 	bic.w	r3, r3, #7
 80016da:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	4619      	mov	r1, r3
 80016f4:	20f2      	movs	r0, #242	; 0xf2
 80016f6:	f7ff fe49 	bl	800138c <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80016fa:	20f4      	movs	r0, #244	; 0xf4
 80016fc:	f7ff fe58 	bl	80013b0 <BME280_ReadReg>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	4619      	mov	r1, r3
 8001708:	20f4      	movs	r0, #244	; 0xf4
 800170a:	f7ff fe3f 	bl	800138c <BME280_WriteReg>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8001720:	20f4      	movs	r0, #244	; 0xf4
 8001722:	f7ff fe45 	bl	80013b0 <BME280_ReadReg>
 8001726:	4603      	mov	r3, r0
 8001728:	f023 0303 	bic.w	r3, r3, #3
 800172c:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	b25a      	sxtb	r2, r3
 8001738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173c:	4313      	orrs	r3, r2
 800173e:	b25b      	sxtb	r3, r3
 8001740:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	4619      	mov	r1, r3
 8001746:	20f4      	movs	r0, #244	; 0xf4
 8001748:	f7ff fe20 	bl	800138c <BME280_WriteReg>
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8001760:	463b      	mov	r3, r7
 8001762:	4619      	mov	r1, r3
 8001764:	20fa      	movs	r0, #250	; 0xfa
 8001766:	f7ff fe72 	bl	800144e <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <BME280_ReadTemperature+0x98>)
 8001776:	8812      	ldrh	r2, [r2, #0]
 8001778:	0052      	lsls	r2, r2, #1
 800177a:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.dig_T2)) >> 11;
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <BME280_ReadTemperature+0x98>)
 800177e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001782:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 8001786:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001788:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <BME280_ReadTemperature+0x98>)
 8001790:	8812      	ldrh	r2, [r2, #0]
 8001792:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	0912      	lsrs	r2, r2, #4
 8001798:	4914      	ldr	r1, [pc, #80]	; (80017ec <BME280_ReadTemperature+0x98>)
 800179a:	8809      	ldrh	r1, [r1, #0]
 800179c:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800179e:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80017a2:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 80017a4:	4a11      	ldr	r2, [pc, #68]	; (80017ec <BME280_ReadTemperature+0x98>)
 80017a6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 80017ae:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80017b0:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <BME280_ReadTemperature+0x9c>)
 80017ba:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <BME280_ReadTemperature+0x9c>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3380      	adds	r3, #128	; 0x80
 80017c8:	121b      	asrs	r3, r3, #8
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f9a0 	bl	8000b10 <__aeabi_i2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	60fb      	str	r3, [r7, #12]
	temper_float /= 100.0f;
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <BME280_ReadTemperature+0xa0>)
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff faa2 	bl	8000d20 <__aeabi_fdiv>
 80017dc:	4603      	mov	r3, r0
 80017de:	60fb      	str	r3, [r7, #12]
  return temper_float;
 80017e0:	68fb      	ldr	r3, [r7, #12]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200009c0 	.word	0x200009c0
 80017f0:	200009e4 	.word	0x200009e4
 80017f4:	42c80000 	.word	0x42c80000

080017f8 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 80017f8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80017fc:	b08a      	sub	sp, #40	; 0x28
 80017fe:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001806:	f7ff ffa5 	bl	8001754 <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 800180a:	463b      	mov	r3, r7
 800180c:	4619      	mov	r1, r3
 800180e:	20f7      	movs	r0, #247	; 0xf7
 8001810:	f7ff fe1d 	bl	800144e <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	603b      	str	r3, [r7, #0]
	val1 = ((int64_t) temper_int) - 128000;
 800181a:	4b65      	ldr	r3, [pc, #404]	; (80019b0 <BME280_ReadPressure+0x1b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4619      	mov	r1, r3
 8001820:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001824:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001828:	f142 34ff 	adc.w	r4, r2, #4294967295
 800182c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	fb02 f203 	mul.w	r2, r2, r3
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	69b9      	ldr	r1, [r7, #24]
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	441a      	add	r2, r3
 8001842:	69b9      	ldr	r1, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fba1 3403 	umull	r3, r4, r1, r3
 800184a:	4422      	add	r2, r4
 800184c:	4614      	mov	r4, r2
 800184e:	4a59      	ldr	r2, [pc, #356]	; (80019b4 <BME280_ReadPressure+0x1bc>)
 8001850:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001854:	b211      	sxth	r1, r2
 8001856:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800185a:	fb01 f504 	mul.w	r5, r1, r4
 800185e:	fb03 f002 	mul.w	r0, r3, r2
 8001862:	4428      	add	r0, r5
 8001864:	fba3 3401 	umull	r3, r4, r3, r1
 8001868:	1902      	adds	r2, r0, r4
 800186a:	4614      	mov	r4, r2
 800186c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001870:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8001874:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <BME280_ReadPressure+0x1bc>)
 8001876:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800187a:	b21b      	sxth	r3, r3
 800187c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	fb04 f102 	mul.w	r1, r4, r2
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	fb03 f202 	mul.w	r2, r3, r2
 800188c:	1888      	adds	r0, r1, r2
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	fba2 1203 	umull	r1, r2, r2, r3
 8001894:	1883      	adds	r3, r0, r2
 8001896:	461a      	mov	r2, r3
 8001898:	f04f 0500 	mov.w	r5, #0
 800189c:	f04f 0600 	mov.w	r6, #0
 80018a0:	0456      	lsls	r6, r2, #17
 80018a2:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80018a6:	044d      	lsls	r5, r1, #17
 80018a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018ac:	186b      	adds	r3, r5, r1
 80018ae:	eb46 0402 	adc.w	r4, r6, r2
 80018b2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 80018b6:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <BME280_ReadPressure+0x1bc>)
 80018b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018bc:	b219      	sxth	r1, r3
 80018be:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80018c2:	f04f 0500 	mov.w	r5, #0
 80018c6:	f04f 0600 	mov.w	r6, #0
 80018ca:	00ce      	lsls	r6, r1, #3
 80018cc:	2500      	movs	r5, #0
 80018ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018d2:	186b      	adds	r3, r5, r1
 80018d4:	eb46 0402 	adc.w	r4, r6, r2
 80018d8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	fb02 f203 	mul.w	r2, r2, r3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	441a      	add	r2, r3
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fba1 3403 	umull	r3, r4, r1, r3
 80018f6:	4422      	add	r2, r4
 80018f8:	4614      	mov	r4, r2
 80018fa:	4a2e      	ldr	r2, [pc, #184]	; (80019b4 <BME280_ReadPressure+0x1bc>)
 80018fc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001900:	b211      	sxth	r1, r2
 8001902:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001906:	fb01 f504 	mul.w	r5, r1, r4
 800190a:	fb03 f002 	mul.w	r0, r3, r2
 800190e:	4428      	add	r0, r5
 8001910:	fba3 3401 	umull	r3, r4, r3, r1
 8001914:	1902      	adds	r2, r0, r4
 8001916:	4614      	mov	r4, r2
 8001918:	f04f 0100 	mov.w	r1, #0
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	0a19      	lsrs	r1, r3, #8
 8001922:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001926:	1222      	asrs	r2, r4, #8
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <BME280_ReadPressure+0x1bc>)
 800192a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800192e:	b21b      	sxth	r3, r3
 8001930:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001934:	69b8      	ldr	r0, [r7, #24]
 8001936:	fb04 f500 	mul.w	r5, r4, r0
 800193a:	69f8      	ldr	r0, [r7, #28]
 800193c:	fb03 f000 	mul.w	r0, r3, r0
 8001940:	4428      	add	r0, r5
 8001942:	69bd      	ldr	r5, [r7, #24]
 8001944:	fba5 5603 	umull	r5, r6, r5, r3
 8001948:	1983      	adds	r3, r0, r6
 800194a:	461e      	mov	r6, r3
 800194c:	f04f 0b00 	mov.w	fp, #0
 8001950:	f04f 0c00 	mov.w	ip, #0
 8001954:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001958:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800195c:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8001960:	eb1b 0301 	adds.w	r3, fp, r1
 8001964:	eb4c 0402 	adc.w	r4, ip, r2
 8001968:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 800196c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001970:	1c19      	adds	r1, r3, #0
 8001972:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <BME280_ReadPressure+0x1bc>)
 8001978:	88db      	ldrh	r3, [r3, #6]
 800197a:	b29b      	uxth	r3, r3
 800197c:	f04f 0400 	mov.w	r4, #0
 8001980:	fb03 f502 	mul.w	r5, r3, r2
 8001984:	fb01 f004 	mul.w	r0, r1, r4
 8001988:	4428      	add	r0, r5
 800198a:	fba1 3403 	umull	r3, r4, r1, r3
 800198e:	1902      	adds	r2, r0, r4
 8001990:	4614      	mov	r4, r2
 8001992:	f04f 0100 	mov.w	r1, #0
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	1061      	asrs	r1, r4, #1
 800199c:	17e2      	asrs	r2, r4, #31
 800199e:	e9c7 1206 	strd	r1, r2, [r7, #24]
	if (val1 == 0) {
 80019a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80019a6:	4323      	orrs	r3, r4
 80019a8:	d106      	bne.n	80019b8 <BME280_ReadPressure+0x1c0>
		return 0; // avoid exception caused by division by zero
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e110      	b.n	8001bd2 <BME280_ReadPressure+0x3da>
 80019b0:	200009e4 	.word	0x200009e4
 80019b4:	200009c0 	.word	0x200009c0
	}
	p = 1048576 - press_raw;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80019be:	f04f 0400 	mov.w	r4, #0
 80019c2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p = (((p << 31) - val2) * 3125) / val1;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	ea4f 0953 	mov.w	r9, r3, lsr #1
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80019d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019d6:	4645      	mov	r5, r8
 80019d8:	464e      	mov	r6, r9
 80019da:	1aed      	subs	r5, r5, r3
 80019dc:	eb66 0604 	sbc.w	r6, r6, r4
 80019e0:	46a8      	mov	r8, r5
 80019e2:	46b1      	mov	r9, r6
 80019e4:	eb18 0308 	adds.w	r3, r8, r8
 80019e8:	eb49 0409 	adc.w	r4, r9, r9
 80019ec:	4698      	mov	r8, r3
 80019ee:	46a1      	mov	r9, r4
 80019f0:	eb18 0805 	adds.w	r8, r8, r5
 80019f4:	eb49 0906 	adc.w	r9, r9, r6
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001a04:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001a08:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001a0c:	eb18 0801 	adds.w	r8, r8, r1
 8001a10:	eb49 0902 	adc.w	r9, r9, r2
 8001a14:	f04f 0100 	mov.w	r1, #0
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001a20:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001a24:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001a28:	4688      	mov	r8, r1
 8001a2a:	4691      	mov	r9, r2
 8001a2c:	eb18 0805 	adds.w	r8, r8, r5
 8001a30:	eb49 0906 	adc.w	r9, r9, r6
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001a40:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001a44:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001a48:	4688      	mov	r8, r1
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	eb18 0005 	adds.w	r0, r8, r5
 8001a50:	eb49 0106 	adc.w	r1, r9, r6
 8001a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a58:	f7ff fa24 	bl	8000ea4 <__aeabi_ldivmod>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	460c      	mov	r4, r1
 8001a60:	e9c7 3402 	strd	r3, r4, [r7, #8]
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001a64:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <BME280_ReadPressure+0x3e4>)
 8001a66:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a6a:	b219      	sxth	r1, r3
 8001a6c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a70:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	f04f 0400 	mov.w	r4, #0
 8001a7c:	0b6b      	lsrs	r3, r5, #13
 8001a7e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001a82:	1374      	asrs	r4, r6, #13
 8001a84:	fb03 f502 	mul.w	r5, r3, r2
 8001a88:	fb01 f004 	mul.w	r0, r1, r4
 8001a8c:	4428      	add	r0, r5
 8001a8e:	fba1 1203 	umull	r1, r2, r1, r3
 8001a92:	1883      	adds	r3, r0, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f04f 0400 	mov.w	r4, #0
 8001aa2:	0b6b      	lsrs	r3, r5, #13
 8001aa4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001aa8:	1374      	asrs	r4, r6, #13
 8001aaa:	fb03 f502 	mul.w	r5, r3, r2
 8001aae:	fb01 f004 	mul.w	r0, r1, r4
 8001ab2:	4428      	add	r0, r5
 8001ab4:	fba1 1203 	umull	r1, r2, r1, r3
 8001ab8:	1883      	adds	r3, r0, r2
 8001aba:	461a      	mov	r2, r3
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	f04f 0400 	mov.w	r4, #0
 8001ac4:	0e4b      	lsrs	r3, r1, #25
 8001ac6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001aca:	1654      	asrs	r4, r2, #25
 8001acc:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8001ad0:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <BME280_ReadPressure+0x3e4>)
 8001ad2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	fb04 f102 	mul.w	r1, r4, r2
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	fb03 f202 	mul.w	r2, r3, r2
 8001ae8:	1888      	adds	r0, r1, r2
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	fba2 1203 	umull	r1, r2, r2, r3
 8001af0:	1883      	adds	r3, r0, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	f04f 0400 	mov.w	r4, #0
 8001afc:	0ccb      	lsrs	r3, r1, #19
 8001afe:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001b02:	14d4      	asrs	r4, r2, #19
 8001b04:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8001b08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b0c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001b10:	eb11 0803 	adds.w	r8, r1, r3
 8001b14:	eb42 0904 	adc.w	r9, r2, r4
 8001b18:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b1c:	eb13 0508 	adds.w	r5, r3, r8
 8001b20:	eb44 0609 	adc.w	r6, r4, r9
 8001b24:	f04f 0100 	mov.w	r1, #0
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	0a29      	lsrs	r1, r5, #8
 8001b2e:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001b32:	1232      	asrs	r2, r6, #8
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <BME280_ReadPressure+0x3e4>)
 8001b36:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b3a:	b21d      	sxth	r5, r3
 8001b3c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001b40:	f04f 0800 	mov.w	r8, #0
 8001b44:	f04f 0900 	mov.w	r9, #0
 8001b48:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001b4c:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001b50:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001b54:	eb18 0301 	adds.w	r3, r8, r1
 8001b58:	eb49 0402 	adc.w	r4, r9, r2
 8001b5c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8001b60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	f04f 0400 	mov.w	r4, #0
 8001b6c:	0a0b      	lsrs	r3, r1, #8
 8001b6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b72:	1214      	asrs	r4, r2, #8
 8001b74:	461a      	mov	r2, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fb03 f502 	mul.w	r5, r3, r2
 8001b7e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b82:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	ea03 0801 	and.w	r8, r3, r1
 8001b8e:	ea04 0902 	and.w	r9, r4, r2
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <BME280_ReadPressure+0x3e8>)
 8001b94:	fb02 f109 	mul.w	r1, r2, r9
 8001b98:	2200      	movs	r2, #0
 8001b9a:	fb02 f208 	mul.w	r2, r2, r8
 8001b9e:	440a      	add	r2, r1
 8001ba0:	490f      	ldr	r1, [pc, #60]	; (8001be0 <BME280_ReadPressure+0x3e8>)
 8001ba2:	fba8 0101 	umull	r0, r1, r8, r1
 8001ba6:	1853      	adds	r3, r2, r1
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <BME280_ReadPressure+0x3ec>)
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	f7ff f978 	bl	8000ea4 <__aeabi_ldivmod>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	442b      	add	r3, r5
 8001bba:	607b      	str	r3, [r7, #4]
	press_float = pres_int / 100.0f;
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7fe ffa3 	bl	8000b08 <__aeabi_ui2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4908      	ldr	r1, [pc, #32]	; (8001be8 <BME280_ReadPressure+0x3f0>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f8aa 	bl	8000d20 <__aeabi_fdiv>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  return press_float;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8001bdc:	200009c0 	.word	0x200009c0
 8001be0:	0005f5e1 	.word	0x0005f5e1
 8001be4:	000186a0 	.word	0x000186a0
 8001be8:	42c80000 	.word	0x42c80000

08001bec <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
	int16_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001bf8:	f7ff fdac 	bl	8001754 <BME280_ReadTemperature>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 8001bfc:	1cbb      	adds	r3, r7, #2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	20fd      	movs	r0, #253	; 0xfd
 8001c02:	f7ff fc06 	bl	8001412 <BME280_ReadReg_BE_S16>
	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8001c06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	60bb      	str	r3, [r7, #8]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <BME280_ReadHumidity+0xec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001c16:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	039a      	lsls	r2, r3, #14
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <BME280_ReadHumidity+0xf0>)
 8001c1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c22:	051b      	lsls	r3, r3, #20
 8001c24:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <BME280_ReadHumidity+0xf0>)
 8001c28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	fb03 f301 	mul.w	r3, r3, r1
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001c34:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001c36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c3a:	13db      	asrs	r3, r3, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001c3c:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <BME280_ReadHumidity+0xf0>)
 8001c3e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001c42:	4611      	mov	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	fb02 f201 	mul.w	r2, r2, r1
 8001c4a:	1292      	asrs	r2, r2, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001c4c:	4923      	ldr	r1, [pc, #140]	; (8001cdc <BME280_ReadHumidity+0xf0>)
 8001c4e:	7f09      	ldrb	r1, [r1, #28]
 8001c50:	4608      	mov	r0, r1
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	fb01 f100 	mul.w	r1, r1, r0
 8001c58:	12c9      	asrs	r1, r1, #11
 8001c5a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001c5e:	fb01 f202 	mul.w	r2, r1, r2
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001c62:	1292      	asrs	r2, r2, #10
 8001c64:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 8001c68:	491c      	ldr	r1, [pc, #112]	; (8001cdc <BME280_ReadHumidity+0xf0>)
 8001c6a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c6e:	fb01 f202 	mul.w	r2, r1, r2
 8001c72:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001c76:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	13db      	asrs	r3, r3, #15
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	13d2      	asrs	r2, r2, #15
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 8001c8c:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <BME280_ReadHumidity+0xf0>)
 8001c8e:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_H1)) >> 4));
 8001c94:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ca2:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001caa:	bfa8      	it	ge
 8001cac:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001cb0:	607b      	str	r3, [r7, #4]
	hum_float = (v_x1_u32r>>12);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	131b      	asrs	r3, r3, #12
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe ff2a 	bl	8000b10 <__aeabi_i2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
	hum_float /= 1024.0f;
 8001cc0:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff f82b 	bl	8000d20 <__aeabi_fdiv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60fb      	str	r3, [r7, #12]
  return hum_float;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200009e4 	.word	0x200009e4
 8001cdc:	200009c0 	.word	0x200009c0

08001ce0 <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	71fb      	strb	r3, [r7, #7]
    uint32_t value32 = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	603b      	str	r3, [r7, #0]
	value = BME280_ReadReg(BME280_REG_ID);
 8001cee:	20d0      	movs	r0, #208	; 0xd0
 8001cf0:	f7ff fb5e 	bl	80013b0 <BME280_ReadReg>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
	
	if(value !=BME280_ID)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	2b60      	cmp	r3, #96	; 0x60
 8001cfc:	d003      	beq.n	8001d06 <BME280_Init+0x26>
	{
		BME280_Error("[ ERROR ] BME280 Init: Invalid ID\n");
 8001cfe:	4820      	ldr	r0, [pc, #128]	; (8001d80 <BME280_Init+0xa0>)
 8001d00:	f7ff fa8a 	bl	8001218 <BME280_Error>
		return;
 8001d04:	e039      	b.n	8001d7a <BME280_Init+0x9a>
	}
    
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8001d06:	21b6      	movs	r1, #182	; 0xb6
 8001d08:	20e0      	movs	r0, #224	; 0xe0
 8001d0a:	f7ff fb3f 	bl	800138c <BME280_WriteReg>
	
    while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE);
 8001d0e:	bf00      	nop
 8001d10:	f7ff fbc0 	bl	8001494 <BME280_ReadStatus>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f8      	bne.n	8001d10 <BME280_Init+0x30>
	
    BME280_ReadCoefficients();
 8001d1e:	f7ff fbc9 	bl	80014b4 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 8001d22:	20a0      	movs	r0, #160	; 0xa0
 8001d24:	f7ff fc52 	bl	80015cc <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8001d28:	2008      	movs	r0, #8
 8001d2a:	f7ff fc6e 	bl	800160a <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001d2e:	2060      	movs	r0, #96	; 0x60
 8001d30:	f7ff fc8a 	bl	8001648 <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8001d34:	2008      	movs	r0, #8
 8001d36:	f7ff fca6 	bl	8001686 <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff fcc2 	bl	80016c4 <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001d40:	20f4      	movs	r0, #244	; 0xf4
 8001d42:	f7ff fb35 	bl	80013b0 <BME280_ReadReg>
 8001d46:	4603      	mov	r3, r0
 8001d48:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8001d4a:	20f2      	movs	r0, #242	; 0xf2
 8001d4c:	f7ff fb30 	bl	80013b0 <BME280_ReadReg>
 8001d50:	4603      	mov	r3, r0
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	461a      	mov	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	603b      	str	r3, [r7, #0]
	
	BME280_SetMode(BME280_MODE_NORMAL);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f7ff fcda 	bl	8001716 <BME280_SetMode>
    
    BME280_CurrentWeatherData.humidity = 0;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <BME280_Init+0xa4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
    BME280_CurrentWeatherData.pressure = 0;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <BME280_Init+0xa4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
    BME280_CurrentWeatherData.temperature = 0;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <BME280_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
    
    #ifdef BME280_DEBUG
        PC_Send("[ OK ] BME280_INIT\n");
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <BME280_Init+0xa8>)
 8001d76:	f000 faa7 	bl	80022c8 <PC_Send>
    #endif
}
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	080054f0 	.word	0x080054f0
 8001d84:	20000098 	.word	0x20000098
 8001d88:	08005514 	.word	0x08005514
 8001d8c:	00000000 	.word	0x00000000

08001d90 <BME280_GetWeatherData>:
//------------------------------------------------
BME280_WeatherData *BME280_GetWeatherData()
{
 8001d90:	b598      	push	{r3, r4, r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    BME280_CurrentWeatherData.humidity = (int)roundf(BME280_ReadHumidity());
 8001d94:	f7ff ff2a 	bl	8001bec <BME280_ReadHumidity>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 fb1e 	bl	80053dc <roundf>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f858 	bl	8000e58 <__aeabi_f2iz>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <BME280_GetWeatherData+0x80>)
 8001dac:	601a      	str	r2, [r3, #0]
    BME280_CurrentWeatherData.pressure = (int)roundf(BME280_ReadPressure() * 0.00075);
 8001dae:	f7ff fd23 	bl	80017f8 <BME280_ReadPressure>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb37 	bl	8000428 <__aeabi_f2d>
 8001dba:	a313      	add	r3, pc, #76	; (adr r3, 8001e08 <BME280_GetWeatherData+0x78>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fb8a 	bl	80004d8 <__aeabi_dmul>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	4621      	mov	r1, r4
 8001dcc:	f7fe fd96 	bl	80008fc <__aeabi_d2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fb02 	bl	80053dc <roundf>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f83c 	bl	8000e58 <__aeabi_f2iz>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <BME280_GetWeatherData+0x80>)
 8001de4:	605a      	str	r2, [r3, #4]
    BME280_CurrentWeatherData.temperature = (int)roundf(BME280_ReadTemperature());
 8001de6:	f7ff fcb5 	bl	8001754 <BME280_ReadTemperature>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 faf5 	bl	80053dc <roundf>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f82f 	bl	8000e58 <__aeabi_f2iz>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <BME280_GetWeatherData+0x80>)
 8001dfe:	609a      	str	r2, [r3, #8]
    
    return &BME280_CurrentWeatherData;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <BME280_GetWeatherData+0x80>)
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd98      	pop	{r3, r4, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	bc6a7efa 	.word	0xbc6a7efa
 8001e0c:	3f489374 	.word	0x3f489374
 8001e10:	20000098 	.word	0x20000098

08001e14 <ESP8266_Init>:
UART_HandleTypeDef *ESP8266_huart;
GPIO_TypeDef *ESP8266_PinPort;
uint32_t ESP8266_PinNum;

void ESP8266_Init(UART_HandleTypeDef *huart, GPIO_TypeDef *pinPort, uint32_t pinNum)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
    ESP8266_PinPort = pinPort;
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <ESP8266_Init+0x28>)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	6013      	str	r3, [r2, #0]
    ESP8266_PinNum = pinNum;
 8001e26:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <ESP8266_Init+0x2c>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6013      	str	r3, [r2, #0]
    ESP8266_huart = huart;
 8001e2c:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <ESP8266_Init+0x30>)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6013      	str	r3, [r2, #0]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	20000aac 	.word	0x20000aac
 8001e40:	20000a68 	.word	0x20000a68
 8001e44:	200000a4 	.word	0x200000a4

08001e48 <ESP8266_ON>:

void ESP8266_ON()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ESP8266_PinPort, ESP8266_PinNum, GPIO_PIN_SET);
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <ESP8266_ON+0x1c>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <ESP8266_ON+0x20>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2201      	movs	r2, #1
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f000 ffd7 	bl	8002e0c <HAL_GPIO_WritePin>
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000aac 	.word	0x20000aac
 8001e68:	20000a68 	.word	0x20000a68

08001e6c <ESP8266_OFF>:

void ESP8266_OFF()
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ESP8266_PinPort, ESP8266_PinNum, GPIO_PIN_RESET);
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <ESP8266_OFF+0x1c>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <ESP8266_OFF+0x20>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f000 ffc5 	bl	8002e0c <HAL_GPIO_WritePin>
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000aac 	.word	0x20000aac
 8001e8c:	20000a68 	.word	0x20000a68

08001e90 <ESP8266_Error>:
        PC_Send("[ OK ] ESP8266_RESTART\n");
    #endif
}

void ESP8266_Error(char *errorMessage)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    PC_Send(errorMessage);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fa15 	bl	80022c8 <PC_Send>
    PC_Send("\n");
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <ESP8266_Error+0x28>)
 8001ea0:	f000 fa12 	bl	80022c8 <PC_Send>
    
    while (1)
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <ESP8266_Error+0x2c>)
 8001eaa:	f000 ffc7 	bl	8002e3c <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8001eae:	2064      	movs	r0, #100	; 0x64
 8001eb0:	f000 fd4c 	bl	800294c <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001eb4:	e7f6      	b.n	8001ea4 <ESP8266_Error+0x14>
 8001eb6:	bf00      	nop
 8001eb8:	080055a4 	.word	0x080055a4
 8001ebc:	40011000 	.word	0x40011000

08001ec0 <ESP8266_ConnectTo>:
        PC_Send("[ OK ] ESP8266_DISABLE_ECHO\n");
    #endif
}

void ESP8266_ConnectTo(char *wifiName, char *password)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	sprintf(ESP_TX_buff, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", wifiName, password);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	491f      	ldr	r1, [pc, #124]	; (8001f4c <ESP8266_ConnectTo+0x8c>)
 8001ed0:	481f      	ldr	r0, [pc, #124]	; (8001f50 <ESP8266_ConnectTo+0x90>)
 8001ed2:	f002 fe57 	bl	8004b84 <siprintf>
	HAL_UART_Transmit(ESP8266_huart,(uint8_t*)ESP_TX_buff, strlen(ESP_TX_buff), 100);
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <ESP8266_ConnectTo+0x94>)
 8001ed8:	681c      	ldr	r4, [r3, #0]
 8001eda:	481d      	ldr	r0, [pc, #116]	; (8001f50 <ESP8266_ConnectTo+0x90>)
 8001edc:	f7fe f938 	bl	8000150 <strlen>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	2364      	movs	r3, #100	; 0x64
 8001ee6:	491a      	ldr	r1, [pc, #104]	; (8001f50 <ESP8266_ConnectTo+0x90>)
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f002 fbb6 	bl	800465a <HAL_UART_Transmit>
	
    memset(ESP_RX_buff, 0, ESP_RX_buff_size);
 8001eee:	2240      	movs	r2, #64	; 0x40
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4819      	ldr	r0, [pc, #100]	; (8001f58 <ESP8266_ConnectTo+0x98>)
 8001ef4:	f002 fe3e 	bl	8004b74 <memset>
	do
	{
		HAL_UART_Receive(ESP8266_huart, (uint8_t *)ESP_RX_buff, ESP_RX_buff_size, 100);
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <ESP8266_ConnectTo+0x94>)
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	2364      	movs	r3, #100	; 0x64
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	4915      	ldr	r1, [pc, #84]	; (8001f58 <ESP8266_ConnectTo+0x98>)
 8001f02:	f002 fc43 	bl	800478c <HAL_UART_Receive>
        
        if(strstr(ESP_RX_buff, "ERROR") != NULL)
 8001f06:	4915      	ldr	r1, [pc, #84]	; (8001f5c <ESP8266_ConnectTo+0x9c>)
 8001f08:	4813      	ldr	r0, [pc, #76]	; (8001f58 <ESP8266_ConnectTo+0x98>)
 8001f0a:	f002 fe5b 	bl	8004bc4 <strstr>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <ESP8266_ConnectTo+0x64>
        {
           sprintf(ESP_TX_buff, "[ ERROR ] Connect to %s\n", wifiName);
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4912      	ldr	r1, [pc, #72]	; (8001f60 <ESP8266_ConnectTo+0xa0>)
 8001f18:	480d      	ldr	r0, [pc, #52]	; (8001f50 <ESP8266_ConnectTo+0x90>)
 8001f1a:	f002 fe33 	bl	8004b84 <siprintf>
           ESP8266_Error(ESP_RX_buff);
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <ESP8266_ConnectTo+0x98>)
 8001f20:	f7ff ffb6 	bl	8001e90 <ESP8266_Error>
        }
        
	} while(strstr(ESP_RX_buff, "WIFI GOT IP") == NULL);
 8001f24:	490f      	ldr	r1, [pc, #60]	; (8001f64 <ESP8266_ConnectTo+0xa4>)
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <ESP8266_ConnectTo+0x98>)
 8001f28:	f002 fe4c 	bl	8004bc4 <strstr>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0e2      	beq.n	8001ef8 <ESP8266_ConnectTo+0x38>
    
    #ifdef ESP8266_DEBUG
        sprintf(ESP_TX_buff, "[ OK ] Connect to %s\n", wifiName);
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	490c      	ldr	r1, [pc, #48]	; (8001f68 <ESP8266_ConnectTo+0xa8>)
 8001f36:	4806      	ldr	r0, [pc, #24]	; (8001f50 <ESP8266_ConnectTo+0x90>)
 8001f38:	f002 fe24 	bl	8004b84 <siprintf>
        PC_Send(ESP_TX_buff);
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <ESP8266_ConnectTo+0x90>)
 8001f3e:	f000 f9c3 	bl	80022c8 <PC_Send>
    #endif
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08005680 	.word	0x08005680
 8001f50:	20000a28 	.word	0x20000a28
 8001f54:	200000a4 	.word	0x200000a4
 8001f58:	20000980 	.word	0x20000980
 8001f5c:	08005534 	.word	0x08005534
 8001f60:	0800569c 	.word	0x0800569c
 8001f64:	080056b8 	.word	0x080056b8
 8001f68:	080056c4 	.word	0x080056c4

08001f6c <ESP8266_DisconnectFromWifi>:

void ESP8266_DisconnectFromWifi()
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
	char *str = "AT+CWQAP\r\n";
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <ESP8266_DisconnectFromWifi+0x78>)
 8001f74:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(ESP8266_huart,(uint8_t*)str, strlen(str), 100);
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <ESP8266_DisconnectFromWifi+0x7c>)
 8001f78:	681c      	ldr	r4, [r3, #0]
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe f8e8 	bl	8000150 <strlen>
 8001f80:	4603      	mov	r3, r0
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	2364      	movs	r3, #100	; 0x64
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f002 fb66 	bl	800465a <HAL_UART_Transmit>
	
	memset(ESP_RX_buff, 0, ESP_RX_buff_size);
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	2100      	movs	r1, #0
 8001f92:	4816      	ldr	r0, [pc, #88]	; (8001fec <ESP8266_DisconnectFromWifi+0x80>)
 8001f94:	f002 fdee 	bl	8004b74 <memset>
	
	do
	{
		HAL_UART_Receive(ESP8266_huart, (uint8_t *)ESP_RX_buff, ESP_RX_buff_size, 100);
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <ESP8266_DisconnectFromWifi+0x7c>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	2364      	movs	r3, #100	; 0x64
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	4912      	ldr	r1, [pc, #72]	; (8001fec <ESP8266_DisconnectFromWifi+0x80>)
 8001fa2:	f002 fbf3 	bl	800478c <HAL_UART_Receive>
		
	}while(strstr(ESP_RX_buff, "OK") == NULL && strstr(ESP_RX_buff, "ERROR") == NULL);
 8001fa6:	4912      	ldr	r1, [pc, #72]	; (8001ff0 <ESP8266_DisconnectFromWifi+0x84>)
 8001fa8:	4810      	ldr	r0, [pc, #64]	; (8001fec <ESP8266_DisconnectFromWifi+0x80>)
 8001faa:	f002 fe0b 	bl	8004bc4 <strstr>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d106      	bne.n	8001fc2 <ESP8266_DisconnectFromWifi+0x56>
 8001fb4:	490f      	ldr	r1, [pc, #60]	; (8001ff4 <ESP8266_DisconnectFromWifi+0x88>)
 8001fb6:	480d      	ldr	r0, [pc, #52]	; (8001fec <ESP8266_DisconnectFromWifi+0x80>)
 8001fb8:	f002 fe04 	bl	8004bc4 <strstr>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ea      	beq.n	8001f98 <ESP8266_DisconnectFromWifi+0x2c>
    
    if(strstr(ESP_RX_buff, "OK") == NULL)
 8001fc2:	490b      	ldr	r1, [pc, #44]	; (8001ff0 <ESP8266_DisconnectFromWifi+0x84>)
 8001fc4:	4809      	ldr	r0, [pc, #36]	; (8001fec <ESP8266_DisconnectFromWifi+0x80>)
 8001fc6:	f002 fdfd 	bl	8004bc4 <strstr>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <ESP8266_DisconnectFromWifi+0x6a>
    {
        ESP8266_Error("[ ERROR ] ESP8266_WIFI_DISCONNECT_ERROR");
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <ESP8266_DisconnectFromWifi+0x8c>)
 8001fd2:	f7ff ff5d 	bl	8001e90 <ESP8266_Error>
    }
    
    #ifdef ESP8266_DEBUG
        PC_Send("[ OK ] ESP8266_WIFI_DISCONNECT\n");
 8001fd6:	4809      	ldr	r0, [pc, #36]	; (8001ffc <ESP8266_DisconnectFromWifi+0x90>)
 8001fd8:	f000 f976 	bl	80022c8 <PC_Send>
    #endif
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	080056dc 	.word	0x080056dc
 8001fe8:	200000a4 	.word	0x200000a4
 8001fec:	20000980 	.word	0x20000980
 8001ff0:	08005560 	.word	0x08005560
 8001ff4:	08005534 	.word	0x08005534
 8001ff8:	080056e8 	.word	0x080056e8
 8001ffc:	08005710 	.word	0x08005710

08002000 <ESP8266_SendRequest>:
/*
    Send request
*/

void ESP8266_SendRequest(char *type, char *ip, uint8_t port, char *request)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	71fb      	strb	r3, [r7, #7]
    ESP8266_AT_CIPSTART(type, ip, port);
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	461a      	mov	r2, r3
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f80a 	bl	8002030 <ESP8266_AT_CIPSTART>
    ESP8266_AT_CIPSEND(request);
 800201c:	6838      	ldr	r0, [r7, #0]
 800201e:	f000 f857 	bl	80020d0 <ESP8266_AT_CIPSEND>
	ESP8266_AT_SendData(request);
 8002022:	6838      	ldr	r0, [r7, #0]
 8002024:	f000 f8a6 	bl	8002174 <ESP8266_AT_SendData>
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <ESP8266_AT_CIPSTART>:

void ESP8266_AT_CIPSTART(char *type, char *ip, uint8_t port)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b087      	sub	sp, #28
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	4613      	mov	r3, r2
 800203c:	71fb      	strb	r3, [r7, #7]
    sprintf(ESP_TX_buff, "AT+CIPSTART=\"%s\",\"%s\",%d\r\n", type, ip, port);
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	491a      	ldr	r1, [pc, #104]	; (80020b0 <ESP8266_AT_CIPSTART+0x80>)
 8002048:	481a      	ldr	r0, [pc, #104]	; (80020b4 <ESP8266_AT_CIPSTART+0x84>)
 800204a:	f002 fd9b 	bl	8004b84 <siprintf>
	HAL_UART_Transmit(ESP8266_huart,(uint8_t*)ESP_TX_buff, strlen(ESP_TX_buff), 100);
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <ESP8266_AT_CIPSTART+0x88>)
 8002050:	681c      	ldr	r4, [r3, #0]
 8002052:	4818      	ldr	r0, [pc, #96]	; (80020b4 <ESP8266_AT_CIPSTART+0x84>)
 8002054:	f7fe f87c 	bl	8000150 <strlen>
 8002058:	4603      	mov	r3, r0
 800205a:	b29a      	uxth	r2, r3
 800205c:	2364      	movs	r3, #100	; 0x64
 800205e:	4915      	ldr	r1, [pc, #84]	; (80020b4 <ESP8266_AT_CIPSTART+0x84>)
 8002060:	4620      	mov	r0, r4
 8002062:	f002 fafa 	bl	800465a <HAL_UART_Transmit>
	
	memset(ESP_RX_buff, 0, ESP_RX_buff_size);
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	2100      	movs	r1, #0
 800206a:	4814      	ldr	r0, [pc, #80]	; (80020bc <ESP8266_AT_CIPSTART+0x8c>)
 800206c:	f002 fd82 	bl	8004b74 <memset>
	do
	{
		HAL_UART_Receive(ESP8266_huart, (uint8_t *)ESP_RX_buff, ESP_RX_buff_size, 100);
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <ESP8266_AT_CIPSTART+0x88>)
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	2364      	movs	r3, #100	; 0x64
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	4910      	ldr	r1, [pc, #64]	; (80020bc <ESP8266_AT_CIPSTART+0x8c>)
 800207a:	f002 fb87 	bl	800478c <HAL_UART_Receive>
        
        if(strstr(ESP_RX_buff, "ERROR") != NULL)
 800207e:	4910      	ldr	r1, [pc, #64]	; (80020c0 <ESP8266_AT_CIPSTART+0x90>)
 8002080:	480e      	ldr	r0, [pc, #56]	; (80020bc <ESP8266_AT_CIPSTART+0x8c>)
 8002082:	f002 fd9f 	bl	8004bc4 <strstr>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <ESP8266_AT_CIPSTART+0x62>
            ESP8266_Error("[ ERROR ] ESP8266_AT_CIPSTART_ERROR");
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <ESP8266_AT_CIPSTART+0x94>)
 800208e:	f7ff feff 	bl	8001e90 <ESP8266_Error>
 
	} while(strstr(ESP_RX_buff, "OK") == NULL);
 8002092:	490d      	ldr	r1, [pc, #52]	; (80020c8 <ESP8266_AT_CIPSTART+0x98>)
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <ESP8266_AT_CIPSTART+0x8c>)
 8002096:	f002 fd95 	bl	8004bc4 <strstr>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0e7      	beq.n	8002070 <ESP8266_AT_CIPSTART+0x40>
    
    #ifdef ESP8266_DEBUG
        PC_Send("[ OK ] ESP8266_AT_CIPSTART\n");
 80020a0:	480a      	ldr	r0, [pc, #40]	; (80020cc <ESP8266_AT_CIPSTART+0x9c>)
 80020a2:	f000 f911 	bl	80022c8 <PC_Send>
    #endif
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	08005730 	.word	0x08005730
 80020b4:	20000a28 	.word	0x20000a28
 80020b8:	200000a4 	.word	0x200000a4
 80020bc:	20000980 	.word	0x20000980
 80020c0:	08005534 	.word	0x08005534
 80020c4:	0800574c 	.word	0x0800574c
 80020c8:	08005560 	.word	0x08005560
 80020cc:	08005770 	.word	0x08005770

080020d0 <ESP8266_AT_CIPSEND>:

void ESP8266_AT_CIPSEND(char *request)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    sprintf(ESP_TX_buff, "AT+CIPSEND=%d\r\n", strlen(request) + 2);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7fe f839 	bl	8000150 <strlen>
 80020de:	4603      	mov	r3, r0
 80020e0:	3302      	adds	r3, #2
 80020e2:	461a      	mov	r2, r3
 80020e4:	491b      	ldr	r1, [pc, #108]	; (8002154 <ESP8266_AT_CIPSEND+0x84>)
 80020e6:	481c      	ldr	r0, [pc, #112]	; (8002158 <ESP8266_AT_CIPSEND+0x88>)
 80020e8:	f002 fd4c 	bl	8004b84 <siprintf>
	HAL_UART_Transmit(ESP8266_huart,(uint8_t*)ESP_TX_buff, strlen(ESP_TX_buff), 100);
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <ESP8266_AT_CIPSEND+0x8c>)
 80020ee:	681c      	ldr	r4, [r3, #0]
 80020f0:	4819      	ldr	r0, [pc, #100]	; (8002158 <ESP8266_AT_CIPSEND+0x88>)
 80020f2:	f7fe f82d 	bl	8000150 <strlen>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	2364      	movs	r3, #100	; 0x64
 80020fc:	4916      	ldr	r1, [pc, #88]	; (8002158 <ESP8266_AT_CIPSEND+0x88>)
 80020fe:	4620      	mov	r0, r4
 8002100:	f002 faab 	bl	800465a <HAL_UART_Transmit>
	
    memset(ESP_RX_buff, 0, ESP_RX_buff_size);
 8002104:	2240      	movs	r2, #64	; 0x40
 8002106:	2100      	movs	r1, #0
 8002108:	4815      	ldr	r0, [pc, #84]	; (8002160 <ESP8266_AT_CIPSEND+0x90>)
 800210a:	f002 fd33 	bl	8004b74 <memset>
	do
	{
		HAL_UART_Receive(ESP8266_huart, (uint8_t *)ESP_RX_buff, ESP_RX_buff_size, 100);
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <ESP8266_AT_CIPSEND+0x8c>)
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	2364      	movs	r3, #100	; 0x64
 8002114:	2240      	movs	r2, #64	; 0x40
 8002116:	4912      	ldr	r1, [pc, #72]	; (8002160 <ESP8266_AT_CIPSEND+0x90>)
 8002118:	f002 fb38 	bl	800478c <HAL_UART_Receive>
        
        if(strstr(ESP_RX_buff, "ERROR") != NULL)
 800211c:	4911      	ldr	r1, [pc, #68]	; (8002164 <ESP8266_AT_CIPSEND+0x94>)
 800211e:	4810      	ldr	r0, [pc, #64]	; (8002160 <ESP8266_AT_CIPSEND+0x90>)
 8002120:	f002 fd50 	bl	8004bc4 <strstr>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <ESP8266_AT_CIPSEND+0x66>
        {
            PC_Send(ESP_RX_buff);
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <ESP8266_AT_CIPSEND+0x90>)
 800212c:	f000 f8cc 	bl	80022c8 <PC_Send>
            ESP8266_Error("[ ERROR ] ESP8266_AT_CIPSEND_ERROR");
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <ESP8266_AT_CIPSEND+0x98>)
 8002132:	f7ff fead 	bl	8001e90 <ESP8266_Error>
        }
            

	}while(strstr(ESP_RX_buff, "OK") == NULL);
 8002136:	490d      	ldr	r1, [pc, #52]	; (800216c <ESP8266_AT_CIPSEND+0x9c>)
 8002138:	4809      	ldr	r0, [pc, #36]	; (8002160 <ESP8266_AT_CIPSEND+0x90>)
 800213a:	f002 fd43 	bl	8004bc4 <strstr>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0e4      	beq.n	800210e <ESP8266_AT_CIPSEND+0x3e>
    
    #ifdef ESP8266_DEBUG
        PC_Send("[ OK ] ESP8266_AT_CIPSEND\n");
 8002144:	480a      	ldr	r0, [pc, #40]	; (8002170 <ESP8266_AT_CIPSEND+0xa0>)
 8002146:	f000 f8bf 	bl	80022c8 <PC_Send>
    #endif
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bd90      	pop	{r4, r7, pc}
 8002152:	bf00      	nop
 8002154:	0800578c 	.word	0x0800578c
 8002158:	20000a28 	.word	0x20000a28
 800215c:	200000a4 	.word	0x200000a4
 8002160:	20000980 	.word	0x20000980
 8002164:	08005534 	.word	0x08005534
 8002168:	0800579c 	.word	0x0800579c
 800216c:	08005560 	.word	0x08005560
 8002170:	080057c0 	.word	0x080057c0

08002174 <ESP8266_AT_SendData>:

void ESP8266_AT_SendData(char *request)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
    sprintf(ESP_TX_buff, "%s\r\n", request);
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	491b      	ldr	r1, [pc, #108]	; (80021ec <ESP8266_AT_SendData+0x78>)
 8002180:	481b      	ldr	r0, [pc, #108]	; (80021f0 <ESP8266_AT_SendData+0x7c>)
 8002182:	f002 fcff 	bl	8004b84 <siprintf>
	HAL_UART_Transmit(ESP8266_huart,(uint8_t*)ESP_TX_buff, strlen(ESP_TX_buff), 100);
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <ESP8266_AT_SendData+0x80>)
 8002188:	681c      	ldr	r4, [r3, #0]
 800218a:	4819      	ldr	r0, [pc, #100]	; (80021f0 <ESP8266_AT_SendData+0x7c>)
 800218c:	f7fd ffe0 	bl	8000150 <strlen>
 8002190:	4603      	mov	r3, r0
 8002192:	b29a      	uxth	r2, r3
 8002194:	2364      	movs	r3, #100	; 0x64
 8002196:	4916      	ldr	r1, [pc, #88]	; (80021f0 <ESP8266_AT_SendData+0x7c>)
 8002198:	4620      	mov	r0, r4
 800219a:	f002 fa5e 	bl	800465a <HAL_UART_Transmit>
    
    memset(ESP_temp_buff, 0, ESP_temp_buff_size);
 800219e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a2:	2100      	movs	r1, #0
 80021a4:	4814      	ldr	r0, [pc, #80]	; (80021f8 <ESP8266_AT_SendData+0x84>)
 80021a6:	f002 fce5 	bl	8004b74 <memset>
	do
	{
		HAL_UART_Receive(ESP8266_huart, (uint8_t *)ESP_temp_buff, ESP_temp_buff_size, 200);
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <ESP8266_AT_SendData+0x80>)
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	23c8      	movs	r3, #200	; 0xc8
 80021b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b4:	4910      	ldr	r1, [pc, #64]	; (80021f8 <ESP8266_AT_SendData+0x84>)
 80021b6:	f002 fae9 	bl	800478c <HAL_UART_Receive>
        
        if(strstr(ESP_temp_buff, "ERROR") != NULL)
 80021ba:	4910      	ldr	r1, [pc, #64]	; (80021fc <ESP8266_AT_SendData+0x88>)
 80021bc:	480e      	ldr	r0, [pc, #56]	; (80021f8 <ESP8266_AT_SendData+0x84>)
 80021be:	f002 fd01 	bl	8004bc4 <strstr>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <ESP8266_AT_SendData+0x5a>
            ESP8266_Error("[ ERROR ] ESP8266_SEND_REQUEST_ERROR");
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <ESP8266_AT_SendData+0x8c>)
 80021ca:	f7ff fe61 	bl	8001e90 <ESP8266_Error>
        
	} while(strstr(ESP_temp_buff, "OK") == NULL);
 80021ce:	490d      	ldr	r1, [pc, #52]	; (8002204 <ESP8266_AT_SendData+0x90>)
 80021d0:	4809      	ldr	r0, [pc, #36]	; (80021f8 <ESP8266_AT_SendData+0x84>)
 80021d2:	f002 fcf7 	bl	8004bc4 <strstr>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0e6      	beq.n	80021aa <ESP8266_AT_SendData+0x36>
    
    #ifdef ESP8266_DEBUG
        PC_Send("[ OK ] ESP8266_SEND_REQUEST\n");
 80021dc:	480a      	ldr	r0, [pc, #40]	; (8002208 <ESP8266_AT_SendData+0x94>)
 80021de:	f000 f873 	bl	80022c8 <PC_Send>
    #endif
    
    #ifdef ESP8266_SHOW_ANSWER_ON_REQUEST
        PC_Send(ESP_temp_buff);
    #endif
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	080057dc 	.word	0x080057dc
 80021f0:	20000a28 	.word	0x20000a28
 80021f4:	200000a4 	.word	0x200000a4
 80021f8:	20000180 	.word	0x20000180
 80021fc:	08005534 	.word	0x08005534
 8002200:	080057e4 	.word	0x080057e4
 8002204:	08005560 	.word	0x08005560
 8002208:	0800580c 	.word	0x0800580c

0800220c <main>:
bool requestStatus;

void PC_Send(char *str);

int main(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af02      	add	r7, sp, #8
	HAL_Init();
 8002212:	f000 fb39 	bl	8002888 <HAL_Init>

	    SystemClock_Config();
 8002216:	f000 f86d 	bl	80022f4 <SystemClock_Config>

	    MX_GPIO_Init();
 800221a:	f000 f929 	bl	8002470 <MX_GPIO_Init>
	    MX_I2C1_Init();
 800221e:	f000 f8a5 	bl	800236c <MX_I2C1_Init>
	    MX_USART2_UART_Init();
 8002222:	f000 f8fb 	bl	800241c <MX_USART2_UART_Init>
	    MX_USART1_UART_Init();
 8002226:	f000 f8cf 	bl	80023c8 <MX_USART1_UART_Init>

	    PC_Send("[ OK ] Start\n");
 800222a:	481c      	ldr	r0, [pc, #112]	; (800229c <main+0x90>)
 800222c:	f000 f84c 	bl	80022c8 <PC_Send>

	    BME280_Init();
 8002230:	f7ff fd56 	bl	8001ce0 <BME280_Init>
	    BME280_WeatherData *currentWeather = NULL;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]

	    ESP8266_Init(&huart2, GPIOB, GPIO_PIN_11);
 8002238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800223c:	4918      	ldr	r1, [pc, #96]	; (80022a0 <main+0x94>)
 800223e:	4819      	ldr	r0, [pc, #100]	; (80022a4 <main+0x98>)
 8002240:	f7ff fde8 	bl	8001e14 <ESP8266_Init>
	    ESP8266_ON();
 8002244:	f7ff fe00 	bl	8001e48 <ESP8266_ON>
	    ESP8266_ConnectTo("MERCUSYS_7EBA", "3105vlad3010vlada");
 8002248:	4917      	ldr	r1, [pc, #92]	; (80022a8 <main+0x9c>)
 800224a:	4818      	ldr	r0, [pc, #96]	; (80022ac <main+0xa0>)
 800224c:	f7ff fe38 	bl	8001ec0 <ESP8266_ConnectTo>

	    currentWeather = BME280_GetWeatherData();
 8002250:	f7ff fd9e 	bl	8001d90 <BME280_GetWeatherData>
 8002254:	6078      	str	r0, [r7, #4]
	    sprintf(buff, "GET /weatherStation/addWeather.php?t=%d&h=%d&p=%d", currentWeather->temperature, currentWeather->humidity, currentWeather->pressure);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	460b      	mov	r3, r1
 8002266:	4912      	ldr	r1, [pc, #72]	; (80022b0 <main+0xa4>)
 8002268:	4812      	ldr	r0, [pc, #72]	; (80022b4 <main+0xa8>)
 800226a:	f002 fc8b 	bl	8004b84 <siprintf>
	    ESP8266_SendRequest("TCP", "192.168.1.102", 80, buff);
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <main+0xa8>)
 8002270:	2250      	movs	r2, #80	; 0x50
 8002272:	4911      	ldr	r1, [pc, #68]	; (80022b8 <main+0xac>)
 8002274:	4811      	ldr	r0, [pc, #68]	; (80022bc <main+0xb0>)
 8002276:	f7ff fec3 	bl	8002000 <ESP8266_SendRequest>

	    ESP8266_DisconnectFromWifi();
 800227a:	f7ff fe77 	bl	8001f6c <ESP8266_DisconnectFromWifi>
	    PC_Send("[ OK ] Done\n");
 800227e:	4810      	ldr	r0, [pc, #64]	; (80022c0 <main+0xb4>)
 8002280:	f000 f822 	bl	80022c8 <PC_Send>

	    ESP8266_OFF();
 8002284:	f7ff fdf2 	bl	8001e6c <ESP8266_OFF>
	    // __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	    //HAL_PWR_EnterSTANDBYMode();

	    while (1)
	    {
	    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800228c:	480d      	ldr	r0, [pc, #52]	; (80022c4 <main+0xb8>)
 800228e:	f000 fdd5 	bl	8002e3c <HAL_GPIO_TogglePin>
	    	HAL_Delay(1000);
 8002292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002296:	f000 fb59 	bl	800294c <HAL_Delay>
	    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800229a:	e7f5      	b.n	8002288 <main+0x7c>
 800229c:	0800582c 	.word	0x0800582c
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	20000a6c 	.word	0x20000a6c
 80022a8:	0800583c 	.word	0x0800583c
 80022ac:	08005850 	.word	0x08005850
 80022b0:	08005860 	.word	0x08005860
 80022b4:	20000100 	.word	0x20000100
 80022b8:	08005894 	.word	0x08005894
 80022bc:	080058a4 	.word	0x080058a4
 80022c0:	080058a8 	.word	0x080058a8
 80022c4:	40011000 	.word	0x40011000

080022c8 <PC_Send>:
	    }
}

void PC_Send(char *str)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7fd ff3d 	bl	8000150 <strlen>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b29a      	uxth	r2, r3
 80022da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <PC_Send+0x28>)
 80022e2:	f002 f9ba 	bl	800465a <HAL_UART_Transmit>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200009e8 	.word	0x200009e8

080022f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b090      	sub	sp, #64	; 0x40
 80022f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fa:	f107 0318 	add.w	r3, r7, #24
 80022fe:	2228      	movs	r2, #40	; 0x28
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f002 fc36 	bl	8004b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800231a:	2301      	movs	r3, #1
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800231e:	2310      	movs	r3, #16
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002326:	f107 0318 	add.w	r3, r7, #24
 800232a:	4618      	mov	r0, r3
 800232c:	f001 fd2c 	bl	8003d88 <HAL_RCC_OscConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002336:	f000 f8fd 	bl	8002534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800233a:	230f      	movs	r3, #15
 800233c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f001 ff98 	bl	8004288 <HAL_RCC_ClockConfig>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800235e:	f000 f8e9 	bl	8002534 <Error_Handler>
  }
}
 8002362:	bf00      	nop
 8002364:	3740      	adds	r7, #64	; 0x40
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <MX_I2C1_Init+0x50>)
 8002372:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <MX_I2C1_Init+0x54>)
 8002374:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_I2C1_Init+0x50>)
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <MX_I2C1_Init+0x58>)
 800237a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <MX_I2C1_Init+0x50>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_I2C1_Init+0x50>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <MX_I2C1_Init+0x50>)
 800238a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800238e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <MX_I2C1_Init+0x50>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <MX_I2C1_Init+0x50>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <MX_I2C1_Init+0x50>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MX_I2C1_Init+0x50>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <MX_I2C1_Init+0x50>)
 80023aa:	f000 fd5f 	bl	8002e6c <HAL_I2C_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023b4:	f000 f8be 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200000a8 	.word	0x200000a8
 80023c0:	40005400 	.word	0x40005400
 80023c4:	000186a0 	.word	0x000186a0

080023c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_USART1_UART_Init+0x4c>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <MX_USART1_UART_Init+0x50>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <MX_USART1_UART_Init+0x4c>)
 80023d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <MX_USART1_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_USART1_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <MX_USART1_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_USART1_UART_Init+0x4c>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <MX_USART1_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_USART1_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	; (8002414 <MX_USART1_UART_Init+0x4c>)
 8002400:	f002 f8de 	bl	80045c0 <HAL_UART_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800240a:	f000 f893 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200009e8 	.word	0x200009e8
 8002418:	40013800 	.word	0x40013800

0800241c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_USART2_UART_Init+0x4c>)
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <MX_USART2_UART_Init+0x50>)
 8002424:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <MX_USART2_UART_Init+0x4c>)
 8002428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800242c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <MX_USART2_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <MX_USART2_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <MX_USART2_UART_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MX_USART2_UART_Init+0x4c>)
 8002442:	220c      	movs	r2, #12
 8002444:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <MX_USART2_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <MX_USART2_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <MX_USART2_UART_Init+0x4c>)
 8002454:	f002 f8b4 	bl	80045c0 <HAL_UART_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800245e:	f000 f869 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000a6c 	.word	0x20000a6c
 800246c:	40004400 	.word	0x40004400

08002470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002484:	4b28      	ldr	r3, [pc, #160]	; (8002528 <MX_GPIO_Init+0xb8>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <MX_GPIO_Init+0xb8>)
 800248a:	f043 0310 	orr.w	r3, r3, #16
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <MX_GPIO_Init+0xb8>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <MX_GPIO_Init+0xb8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <MX_GPIO_Init+0xb8>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <MX_GPIO_Init+0xb8>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <MX_GPIO_Init+0xb8>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <MX_GPIO_Init+0xb8>)
 80024ba:	f043 0308 	orr.w	r3, r3, #8
 80024be:	6193      	str	r3, [r2, #24]
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <MX_GPIO_Init+0xb8>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d2:	4816      	ldr	r0, [pc, #88]	; (800252c <MX_GPIO_Init+0xbc>)
 80024d4:	f000 fc9a 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024de:	4814      	ldr	r0, [pc, #80]	; (8002530 <MX_GPIO_Init+0xc0>)
 80024e0:	f000 fc94 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2302      	movs	r3, #2
 80024f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4619      	mov	r1, r3
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <MX_GPIO_Init+0xbc>)
 80024fe:	f000 fb2b 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002508:	2301      	movs	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2302      	movs	r3, #2
 8002512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	4619      	mov	r1, r3
 800251a:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_GPIO_Init+0xc0>)
 800251c:	f000 fb1c 	bl	8002b58 <HAL_GPIO_Init>

}
 8002520:	bf00      	nop
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	40011000 	.word	0x40011000
 8002530:	40010c00 	.word	0x40010c00

08002534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_MspInit+0x5c>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_MspInit+0x5c>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6193      	str	r3, [r2, #24]
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_MspInit+0x5c>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_MspInit+0x5c>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a0e      	ldr	r2, [pc, #56]	; (800259c <HAL_MspInit+0x5c>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	61d3      	str	r3, [r2, #28]
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_MspInit+0x5c>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_MspInit+0x60>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_MspInit+0x60>)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000

080025a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a15      	ldr	r2, [pc, #84]	; (8002614 <HAL_I2C_MspInit+0x70>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d123      	bne.n	800260c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_I2C_MspInit+0x74>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a13      	ldr	r2, [pc, #76]	; (8002618 <HAL_I2C_MspInit+0x74>)
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_I2C_MspInit+0x74>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025dc:	23c0      	movs	r3, #192	; 0xc0
 80025de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e0:	2312      	movs	r3, #18
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	4619      	mov	r1, r3
 80025ee:	480b      	ldr	r0, [pc, #44]	; (800261c <HAL_I2C_MspInit+0x78>)
 80025f0:	f000 fab2 	bl	8002b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_I2C_MspInit+0x74>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_I2C_MspInit+0x74>)
 80025fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025fe:	61d3      	str	r3, [r2, #28]
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_I2C_MspInit+0x74>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800260c:	bf00      	nop
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40005400 	.word	0x40005400
 8002618:	40021000 	.word	0x40021000
 800261c:	40010c00 	.word	0x40010c00

08002620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0318 	add.w	r3, r7, #24
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a37      	ldr	r2, [pc, #220]	; (8002718 <HAL_UART_MspInit+0xf8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d132      	bne.n	80026a6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_UART_MspInit+0xfc>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a35      	ldr	r2, [pc, #212]	; (800271c <HAL_UART_MspInit+0xfc>)
 8002646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b33      	ldr	r3, [pc, #204]	; (800271c <HAL_UART_MspInit+0xfc>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b30      	ldr	r3, [pc, #192]	; (800271c <HAL_UART_MspInit+0xfc>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a2f      	ldr	r2, [pc, #188]	; (800271c <HAL_UART_MspInit+0xfc>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_UART_MspInit+0xfc>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f107 0318 	add.w	r3, r7, #24
 8002682:	4619      	mov	r1, r3
 8002684:	4826      	ldr	r0, [pc, #152]	; (8002720 <HAL_UART_MspInit+0x100>)
 8002686:	f000 fa67 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800268a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800268e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 0318 	add.w	r3, r7, #24
 800269c:	4619      	mov	r1, r3
 800269e:	4820      	ldr	r0, [pc, #128]	; (8002720 <HAL_UART_MspInit+0x100>)
 80026a0:	f000 fa5a 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026a4:	e034      	b.n	8002710 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_UART_MspInit+0x104>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d12f      	bne.n	8002710 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_UART_MspInit+0xfc>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_UART_MspInit+0xfc>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ba:	61d3      	str	r3, [r2, #28]
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_UART_MspInit+0xfc>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_UART_MspInit+0xfc>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <HAL_UART_MspInit+0xfc>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_UART_MspInit+0xfc>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026e0:	2304      	movs	r3, #4
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	f107 0318 	add.w	r3, r7, #24
 80026f0:	4619      	mov	r1, r3
 80026f2:	480b      	ldr	r0, [pc, #44]	; (8002720 <HAL_UART_MspInit+0x100>)
 80026f4:	f000 fa30 	bl	8002b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026f8:	2308      	movs	r3, #8
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 0318 	add.w	r3, r7, #24
 8002708:	4619      	mov	r1, r3
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <HAL_UART_MspInit+0x100>)
 800270c:	f000 fa24 	bl	8002b58 <HAL_GPIO_Init>
}
 8002710:	bf00      	nop
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40013800 	.word	0x40013800
 800271c:	40021000 	.word	0x40021000
 8002720:	40010800 	.word	0x40010800
 8002724:	40004400 	.word	0x40004400

08002728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <HardFault_Handler+0x4>

0800273a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800273e:	e7fe      	b.n	800273e <MemManage_Handler+0x4>

08002740 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002744:	e7fe      	b.n	8002744 <BusFault_Handler+0x4>

08002746 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800274a:	e7fe      	b.n	800274a <UsageFault_Handler+0x4>

0800274c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002774:	f000 f8ce 	bl	8002914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}

0800277c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <_sbrk+0x50>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <_sbrk+0x16>
		heap_end = &end;
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <_sbrk+0x50>)
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <_sbrk+0x54>)
 8002790:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <_sbrk+0x50>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <_sbrk+0x50>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	466a      	mov	r2, sp
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d907      	bls.n	80027b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80027a6:	f002 f9bb 	bl	8004b20 <__errno>
 80027aa:	4602      	mov	r2, r0
 80027ac:	230c      	movs	r3, #12
 80027ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	e006      	b.n	80027c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <_sbrk+0x50>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	4a03      	ldr	r2, [pc, #12]	; (80027cc <_sbrk+0x50>)
 80027c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2000008c 	.word	0x2000008c
 80027d0:	20000ab8 	.word	0x20000ab8

080027d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <SystemInit+0x5c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <SystemInit+0x5c>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <SystemInit+0x5c>)
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4911      	ldr	r1, [pc, #68]	; (8002830 <SystemInit+0x5c>)
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <SystemInit+0x60>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <SystemInit+0x5c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <SystemInit+0x5c>)
 80027f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <SystemInit+0x5c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <SystemInit+0x5c>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <SystemInit+0x5c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <SystemInit+0x5c>)
 8002812:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002816:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <SystemInit+0x5c>)
 800281a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800281e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <SystemInit+0x64>)
 8002822:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002826:	609a      	str	r2, [r3, #8]
#endif 
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40021000 	.word	0x40021000
 8002834:	f8ff0000 	.word	0xf8ff0000
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800283c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800283e:	e003      	b.n	8002848 <LoopCopyDataInit>

08002840 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002842:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002844:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002846:	3104      	adds	r1, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002848:	480a      	ldr	r0, [pc, #40]	; (8002874 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800284c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800284e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002850:	d3f6      	bcc.n	8002840 <CopyDataInit>
  ldr r2, =_sbss
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002854:	e002      	b.n	800285c <LoopFillZerobss>

08002856 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002858:	f842 3b04 	str.w	r3, [r2], #4

0800285c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800285e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002860:	d3f9      	bcc.n	8002856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002862:	f7ff ffb7 	bl	80027d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002866:	f002 f961 	bl	8004b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800286a:	f7ff fccf 	bl	800220c <main>
  bx lr
 800286e:	4770      	bx	lr
  ldr r3, =_sidata
 8002870:	08005928 	.word	0x08005928
  ldr r0, =_sdata
 8002874:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002878:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800287c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002880:	20000ab8 	.word	0x20000ab8

08002884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC1_2_IRQHandler>
	...

08002888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_Init+0x28>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <HAL_Init+0x28>)
 8002892:	f043 0310 	orr.w	r3, r3, #16
 8002896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002898:	2003      	movs	r0, #3
 800289a:	f000 f929 	bl	8002af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800289e:	2000      	movs	r0, #0
 80028a0:	f000 f808 	bl	80028b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a4:	f7ff fe4c 	bl	8002540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40022000 	.word	0x40022000

080028b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_InitTick+0x54>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_InitTick+0x58>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4619      	mov	r1, r3
 80028c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f933 	bl	8002b3e <HAL_SYSTICK_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e00e      	b.n	8002900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b0f      	cmp	r3, #15
 80028e6:	d80a      	bhi.n	80028fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e8:	2200      	movs	r2, #0
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	f000 f909 	bl	8002b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f4:	4a06      	ldr	r2, [pc, #24]	; (8002910 <HAL_InitTick+0x5c>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000000 	.word	0x20000000
 800290c:	20000008 	.word	0x20000008
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_IncTick+0x1c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_IncTick+0x20>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4413      	add	r3, r2
 8002924:	4a03      	ldr	r2, [pc, #12]	; (8002934 <HAL_IncTick+0x20>)
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	20000008 	.word	0x20000008
 8002934:	20000ab0 	.word	0x20000ab0

08002938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return uwTick;
 800293c:	4b02      	ldr	r3, [pc, #8]	; (8002948 <HAL_GetTick+0x10>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	20000ab0 	.word	0x20000ab0

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff fff0 	bl	8002938 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_Delay+0x40>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002972:	bf00      	nop
 8002974:	f7ff ffe0 	bl	8002938 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000008 	.word	0x20000008

08002990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c2:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	60d3      	str	r3, [r2, #12]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <__NVIC_GetPriorityGrouping+0x18>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	f003 0307 	and.w	r3, r3, #7
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d301      	bcc.n	8002ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00f      	b.n	8002ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <SysTick_Config+0x40>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aca:	210f      	movs	r1, #15
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f7ff ff90 	bl	80029f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x40>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x40>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff49 	bl	8002990 <__NVIC_SetPriorityGrouping>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b18:	f7ff ff5e 	bl	80029d8 <__NVIC_GetPriorityGrouping>
 8002b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff90 	bl	8002a48 <NVIC_EncodePriority>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff5f 	bl	80029f4 <__NVIC_SetPriority>
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffb0 	bl	8002aac <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6a:	e127      	b.n	8002dbc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8116 	bne.w	8002db6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b12      	cmp	r3, #18
 8002b90:	d034      	beq.n	8002bfc <HAL_GPIO_Init+0xa4>
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d80d      	bhi.n	8002bb2 <HAL_GPIO_Init+0x5a>
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d02b      	beq.n	8002bf2 <HAL_GPIO_Init+0x9a>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d804      	bhi.n	8002ba8 <HAL_GPIO_Init+0x50>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d031      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d01c      	beq.n	8002be0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ba6:	e048      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d043      	beq.n	8002c34 <HAL_GPIO_Init+0xdc>
 8002bac:	2b11      	cmp	r3, #17
 8002bae:	d01b      	beq.n	8002be8 <HAL_GPIO_Init+0x90>
          break;
 8002bb0:	e043      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bb2:	4a89      	ldr	r2, [pc, #548]	; (8002dd8 <HAL_GPIO_Init+0x280>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d026      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bb8:	4a87      	ldr	r2, [pc, #540]	; (8002dd8 <HAL_GPIO_Init+0x280>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d806      	bhi.n	8002bcc <HAL_GPIO_Init+0x74>
 8002bbe:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_GPIO_Init+0x284>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d020      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bc4:	4a86      	ldr	r2, [pc, #536]	; (8002de0 <HAL_GPIO_Init+0x288>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
          break;
 8002bca:	e036      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bcc:	4a85      	ldr	r2, [pc, #532]	; (8002de4 <HAL_GPIO_Init+0x28c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bd2:	4a85      	ldr	r2, [pc, #532]	; (8002de8 <HAL_GPIO_Init+0x290>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d016      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bd8:	4a84      	ldr	r2, [pc, #528]	; (8002dec <HAL_GPIO_Init+0x294>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
          break;
 8002bde:	e02c      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e028      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3304      	adds	r3, #4
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e023      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	623b      	str	r3, [r7, #32]
          break;
 8002bfa:	e01e      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	330c      	adds	r3, #12
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e019      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e012      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	611a      	str	r2, [r3, #16]
          break;
 8002c26:	e008      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	615a      	str	r2, [r3, #20]
          break;
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2bff      	cmp	r3, #255	; 0xff
 8002c3e:	d801      	bhi.n	8002c44 <HAL_GPIO_Init+0xec>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	e001      	b.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2bff      	cmp	r3, #255	; 0xff
 8002c4e:	d802      	bhi.n	8002c56 <HAL_GPIO_Init+0xfe>
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_Init+0x104>
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	3b08      	subs	r3, #8
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	210f      	movs	r1, #15
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	6a39      	ldr	r1, [r7, #32]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8096 	beq.w	8002db6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c8a:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6193      	str	r3, [r2, #24]
 8002c96:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca2:	4a54      	ldr	r2, [pc, #336]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	; (8002df8 <HAL_GPIO_Init+0x2a0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x19e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_GPIO_Init+0x2a4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x19a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <HAL_GPIO_Init+0x2a8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x196>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_GPIO_Init+0x2ac>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x192>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cea:	2304      	movs	r3, #4
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d08:	493a      	ldr	r1, [pc, #232]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4938      	ldr	r1, [pc, #224]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	e006      	b.n	8002d3e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	4933      	ldr	r1, [pc, #204]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	492e      	ldr	r1, [pc, #184]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	4929      	ldr	r1, [pc, #164]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4924      	ldr	r1, [pc, #144]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	e006      	b.n	8002d8e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	491f      	ldr	r1, [pc, #124]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	491a      	ldr	r1, [pc, #104]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60cb      	str	r3, [r1, #12]
 8002da6:	e006      	b.n	8002db6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	4915      	ldr	r1, [pc, #84]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	3301      	adds	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f47f aed0 	bne.w	8002b6c <HAL_GPIO_Init+0x14>
  }
}
 8002dcc:	bf00      	nop
 8002dce:	372c      	adds	r7, #44	; 0x2c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	10210000 	.word	0x10210000
 8002ddc:	10110000 	.word	0x10110000
 8002de0:	10120000 	.word	0x10120000
 8002de4:	10310000 	.word	0x10310000
 8002de8:	10320000 	.word	0x10320000
 8002dec:	10220000 	.word	0x10220000
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	40010c00 	.word	0x40010c00
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e1c:	787b      	ldrb	r3, [r7, #1]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e28:	e003      	b.n	8002e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	041a      	lsls	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e54:	887a      	ldrh	r2, [r7, #2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e5a:	e002      	b.n	8002e62 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e5c:	887a      	ldrh	r2, [r7, #2]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	611a      	str	r2, [r3, #16]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e10f      	b.n	800309e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fb86 	bl	80025a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eb0:	f001 fb40 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 8002eb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4a7b      	ldr	r2, [pc, #492]	; (80030a8 <HAL_I2C_Init+0x23c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d807      	bhi.n	8002ed0 <HAL_I2C_Init+0x64>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a7a      	ldr	r2, [pc, #488]	; (80030ac <HAL_I2C_Init+0x240>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	bf94      	ite	ls
 8002ec8:	2301      	movls	r3, #1
 8002eca:	2300      	movhi	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e006      	b.n	8002ede <HAL_I2C_Init+0x72>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a77      	ldr	r2, [pc, #476]	; (80030b0 <HAL_I2C_Init+0x244>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	bf94      	ite	ls
 8002ed8:	2301      	movls	r3, #1
 8002eda:	2300      	movhi	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0db      	b.n	800309e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a72      	ldr	r2, [pc, #456]	; (80030b4 <HAL_I2C_Init+0x248>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	0c9b      	lsrs	r3, r3, #18
 8002ef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a64      	ldr	r2, [pc, #400]	; (80030a8 <HAL_I2C_Init+0x23c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d802      	bhi.n	8002f20 <HAL_I2C_Init+0xb4>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	e009      	b.n	8002f34 <HAL_I2C_Init+0xc8>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	4a63      	ldr	r2, [pc, #396]	; (80030b8 <HAL_I2C_Init+0x24c>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	3301      	adds	r3, #1
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4956      	ldr	r1, [pc, #344]	; (80030a8 <HAL_I2C_Init+0x23c>)
 8002f50:	428b      	cmp	r3, r1
 8002f52:	d80d      	bhi.n	8002f70 <HAL_I2C_Init+0x104>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e59      	subs	r1, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	bf38      	it	cc
 8002f6c:	2304      	movcc	r3, #4
 8002f6e:	e04f      	b.n	8003010 <HAL_I2C_Init+0x1a4>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d111      	bne.n	8002f9c <HAL_I2C_Init+0x130>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e012      	b.n	8002fc2 <HAL_I2C_Init+0x156>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	0099      	lsls	r1, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Init+0x15e>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e022      	b.n	8003010 <HAL_I2C_Init+0x1a4>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_I2C_Init+0x184>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1e58      	subs	r0, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	440b      	add	r3, r1
 8002fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fee:	e00f      	b.n	8003010 <HAL_I2C_Init+0x1a4>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6809      	ldr	r1, [r1, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800303e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6911      	ldr	r1, [r2, #16]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68d2      	ldr	r2, [r2, #12]
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	000186a0 	.word	0x000186a0
 80030ac:	001e847f 	.word	0x001e847f
 80030b0:	003d08ff 	.word	0x003d08ff
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	10624dd3 	.word	0x10624dd3

080030bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030d6:	f7ff fc2f 	bl	8002938 <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	f040 80d9 	bne.w	800329c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2319      	movs	r3, #25
 80030f0:	2201      	movs	r2, #1
 80030f2:	496d      	ldr	r1, [pc, #436]	; (80032a8 <HAL_I2C_Mem_Write+0x1ec>)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fc6b 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	e0cc      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Mem_Write+0x56>
 800310e:	2302      	movs	r3, #2
 8003110:	e0c5      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d007      	beq.n	8003138 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2221      	movs	r2, #33	; 0x21
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a3a      	ldr	r2, [r7, #32]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a4d      	ldr	r2, [pc, #308]	; (80032ac <HAL_I2C_Mem_Write+0x1f0>)
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800317a:	88f8      	ldrh	r0, [r7, #6]
 800317c:	893a      	ldrh	r2, [r7, #8]
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4603      	mov	r3, r0
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fac6 	bl	800371c <I2C_RequestMemoryWrite>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d052      	beq.n	800323c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e081      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fcec 	bl	8003b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d107      	bne.n	80031c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06b      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b04      	cmp	r3, #4
 8003202:	d11b      	bne.n	800323c <HAL_I2C_Mem_Write+0x180>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d017      	beq.n	800323c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1aa      	bne.n	800319a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fcd8 	bl	8003bfe <I2C_WaitOnBTFFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	2b04      	cmp	r3, #4
 800325a:	d107      	bne.n	800326c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e016      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	00100002 	.word	0x00100002
 80032ac:	ffff0000 	.word	0xffff0000

080032b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	817b      	strh	r3, [r7, #10]
 80032c2:	460b      	mov	r3, r1
 80032c4:	813b      	strh	r3, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ca:	f7ff fb35 	bl	8002938 <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	f040 8218 	bne.w	800370e <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	2319      	movs	r3, #25
 80032e4:	2201      	movs	r2, #1
 80032e6:	4981      	ldr	r1, [pc, #516]	; (80034ec <HAL_I2C_Mem_Read+0x23c>)
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fb71 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
 80032f6:	e20b      	b.n	8003710 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_I2C_Mem_Read+0x56>
 8003302:	2302      	movs	r3, #2
 8003304:	e204      	b.n	8003710 <HAL_I2C_Mem_Read+0x460>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d007      	beq.n	800332c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2222      	movs	r2, #34	; 0x22
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2240      	movs	r2, #64	; 0x40
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a61      	ldr	r2, [pc, #388]	; (80034f0 <HAL_I2C_Mem_Read+0x240>)
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800336e:	88f8      	ldrh	r0, [r7, #6]
 8003370:	893a      	ldrh	r2, [r7, #8]
 8003372:	8979      	ldrh	r1, [r7, #10]
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4603      	mov	r3, r0
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fa56 	bl	8003830 <I2C_RequestMemoryRead>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e1c0      	b.n	8003710 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d113      	bne.n	80033be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e194      	b.n	80036e8 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d11d      	bne.n	8003402 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033fe:	b662      	cpsie	i
 8003400:	e172      	b.n	80036e8 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	2b02      	cmp	r3, #2
 8003408:	d11d      	bne.n	8003446 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003418:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800341a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003440:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003442:	b662      	cpsie	i
 8003444:	e150      	b.n	80036e8 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003454:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800346c:	e13c      	b.n	80036e8 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	2b03      	cmp	r3, #3
 8003474:	f200 80f5 	bhi.w	8003662 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	2b01      	cmp	r3, #1
 800347e:	d123      	bne.n	80034c8 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fbfb 	bl	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e13d      	b.n	8003710 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034c6:	e10f      	b.n	80036e8 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d150      	bne.n	8003572 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	2200      	movs	r2, #0
 80034d8:	4906      	ldr	r1, [pc, #24]	; (80034f4 <HAL_I2C_Mem_Read+0x244>)
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fa78 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e112      	b.n	8003710 <HAL_I2C_Mem_Read+0x460>
 80034ea:	bf00      	nop
 80034ec:	00100002 	.word	0x00100002
 80034f0:	ffff0000 	.word	0xffff0000
 80034f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034f8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003508:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800353c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003570:	e0ba      	b.n	80036e8 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	2200      	movs	r2, #0
 800357a:	4967      	ldr	r1, [pc, #412]	; (8003718 <HAL_I2C_Mem_Read+0x468>)
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fa27 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0c1      	b.n	8003710 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800359c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	2200      	movs	r2, #0
 80035d8:	494f      	ldr	r1, [pc, #316]	; (8003718 <HAL_I2C_Mem_Read+0x468>)
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f9f8 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e092      	b.n	8003710 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800362c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003660:	e042      	b.n	80036e8 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 fb0a 	bl	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e04c      	b.n	8003710 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d118      	bne.n	80036e8 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f47f aebe 	bne.w	800346e <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e000      	b.n	8003710 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	3728      	adds	r7, #40	; 0x28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	00010004 	.word	0x00010004

0800371c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	4608      	mov	r0, r1
 8003726:	4611      	mov	r1, r2
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	817b      	strh	r3, [r7, #10]
 800372e:	460b      	mov	r3, r1
 8003730:	813b      	strh	r3, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003744:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	2200      	movs	r2, #0
 800374e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f93c 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e05f      	b.n	8003822 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003770:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	6a3a      	ldr	r2, [r7, #32]
 8003776:	492d      	ldr	r1, [pc, #180]	; (800382c <I2C_RequestMemoryWrite+0x110>)
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f980 	bl	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e04c      	b.n	8003822 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	6a39      	ldr	r1, [r7, #32]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f9ea 	bl	8003b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d107      	bne.n	80037c6 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e02b      	b.n	8003822 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d0:	893b      	ldrh	r3, [r7, #8]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	611a      	str	r2, [r3, #16]
 80037da:	e021      	b.n	8003820 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037dc:	893b      	ldrh	r3, [r7, #8]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	6a39      	ldr	r1, [r7, #32]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f9c4 	bl	8003b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d107      	bne.n	8003812 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003810:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e005      	b.n	8003822 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003816:	893b      	ldrh	r3, [r7, #8]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	00010002 	.word	0x00010002

08003830 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	817b      	strh	r3, [r7, #10]
 8003842:	460b      	mov	r3, r1
 8003844:	813b      	strh	r3, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003858:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003868:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	2200      	movs	r2, #0
 8003872:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f8aa 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e09e      	b.n	80039c4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003894:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	6a3a      	ldr	r2, [r7, #32]
 800389a:	494c      	ldr	r1, [pc, #304]	; (80039cc <I2C_RequestMemoryRead+0x19c>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f8ee 	bl	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e08b      	b.n	80039c4 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	6a39      	ldr	r1, [r7, #32]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f958 	bl	8003b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00d      	beq.n	80038ee <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d107      	bne.n	80038ea <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e06a      	b.n	80039c4 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038f4:	893b      	ldrh	r3, [r7, #8]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	611a      	str	r2, [r3, #16]
 80038fe:	e021      	b.n	8003944 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003900:	893b      	ldrh	r3, [r7, #8]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	b29b      	uxth	r3, r3
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6a39      	ldr	r1, [r7, #32]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f932 	bl	8003b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b04      	cmp	r3, #4
 8003924:	d107      	bne.n	8003936 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003934:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e044      	b.n	80039c4 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800393a:	893b      	ldrh	r3, [r7, #8]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003946:	6a39      	ldr	r1, [r7, #32]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f917 	bl	8003b7c <I2C_WaitOnTXEFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	2b04      	cmp	r3, #4
 800395a:	d107      	bne.n	800396c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e029      	b.n	80039c4 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	2200      	movs	r2, #0
 8003988:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f81f 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e013      	b.n	80039c4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800399c:	897b      	ldrh	r3, [r7, #10]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	4906      	ldr	r1, [pc, #24]	; (80039cc <I2C_RequestMemoryRead+0x19c>)
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f863 	bl	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	00010002 	.word	0x00010002

080039d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e0:	e025      	b.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d021      	beq.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	f7fe ffa5 	bl	8002938 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d302      	bcc.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d116      	bne.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e023      	b.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10d      	bne.n	8003a54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4013      	ands	r3, r2
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	e00c      	b.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d0b6      	beq.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a8c:	e051      	b.n	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9c:	d123      	bne.n	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ab6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0204 	orr.w	r2, r3, #4
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e046      	b.n	8003b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d021      	beq.n	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fe ff23 	bl	8002938 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d116      	bne.n	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e020      	b.n	8003b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10c      	bne.n	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	43da      	mvns	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4013      	ands	r3, r2
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bf14      	ite	ne
 8003b4e:	2301      	movne	r3, #1
 8003b50:	2300      	moveq	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	e00b      	b.n	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d18d      	bne.n	8003a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b88:	e02d      	b.n	8003be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f8ce 	bl	8003d2c <I2C_IsAcknowledgeFailed>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e02d      	b.n	8003bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d021      	beq.n	8003be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fe fec9 	bl	8002938 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d116      	bne.n	8003be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e007      	b.n	8003bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d1ca      	bne.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c0a:	e02d      	b.n	8003c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f88d 	bl	8003d2c <I2C_IsAcknowledgeFailed>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e02d      	b.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d021      	beq.n	8003c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c24:	f7fe fe88 	bl	8002938 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d116      	bne.n	8003c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e007      	b.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d1ca      	bne.n	8003c0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c8c:	e042      	b.n	8003d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d119      	bne.n	8003cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0210 	mvn.w	r2, #16
 8003ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e029      	b.n	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	f7fe fe32 	bl	8002938 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d116      	bne.n	8003d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e007      	b.n	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d1b5      	bne.n	8003c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d42:	d11b      	bne.n	8003d7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e26c      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8087 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003da8:	4b92      	ldr	r3, [pc, #584]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d00c      	beq.n	8003dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003db4:	4b8f      	ldr	r3, [pc, #572]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d112      	bne.n	8003de6 <HAL_RCC_OscConfig+0x5e>
 8003dc0:	4b8c      	ldr	r3, [pc, #560]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d10b      	bne.n	8003de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dce:	4b89      	ldr	r3, [pc, #548]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d06c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x12c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d168      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e246      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x76>
 8003df0:	4b80      	ldr	r3, [pc, #512]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a7f      	ldr	r2, [pc, #508]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e02e      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x98>
 8003e06:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a7a      	ldr	r2, [pc, #488]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b78      	ldr	r3, [pc, #480]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a77      	ldr	r2, [pc, #476]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e01d      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0xbc>
 8003e2a:	4b72      	ldr	r3, [pc, #456]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a71      	ldr	r2, [pc, #452]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6e      	ldr	r2, [pc, #440]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003e44:	4b6b      	ldr	r3, [pc, #428]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a6a      	ldr	r2, [pc, #424]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b68      	ldr	r3, [pc, #416]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a67      	ldr	r2, [pc, #412]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d013      	beq.n	8003e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e64:	f7fe fd68 	bl	8002938 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fe fd64 	bl	8002938 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	; 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1fa      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4b5d      	ldr	r3, [pc, #372]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0xe4>
 8003e8a:	e014      	b.n	8003eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fd54 	bl	8002938 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe fd50 	bl	8002938 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e1e6      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x10c>
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d063      	beq.n	8003f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec2:	4b4c      	ldr	r3, [pc, #304]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ece:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d11c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x18c>
 8003eda:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d116      	bne.n	8003f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee6:	4b43      	ldr	r3, [pc, #268]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_RCC_OscConfig+0x176>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e1ba      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4939      	ldr	r1, [pc, #228]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f12:	e03a      	b.n	8003f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f1c:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fe fd09 	bl	8002938 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2a:	f7fe fd05 	bl	8002938 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e19b      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4927      	ldr	r1, [pc, #156]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
 8003f5c:	e015      	b.n	8003f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5e:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe fce8 	bl	8002938 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fe fce4 	bl	8002938 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e17a      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d03a      	beq.n	800400c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d019      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa4:	f7fe fcc8 	bl	8002938 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fac:	f7fe fcc4 	bl	8002938 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e15a      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f000 fada 	bl	8004584 <RCC_Delay>
 8003fd0:	e01c      	b.n	800400c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd8:	f7fe fcae 	bl	8002938 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fde:	e00f      	b.n	8004000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fe fcaa 	bl	8002938 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d908      	bls.n	8004000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e140      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	42420000 	.word	0x42420000
 8003ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b9e      	ldr	r3, [pc, #632]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e9      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a6 	beq.w	8004166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b97      	ldr	r3, [pc, #604]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	4b94      	ldr	r3, [pc, #592]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4a93      	ldr	r2, [pc, #588]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	61d3      	str	r3, [r2, #28]
 8004036:	4b91      	ldr	r3, [pc, #580]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	4b8e      	ldr	r3, [pc, #568]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d118      	bne.n	8004084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004052:	4b8b      	ldr	r3, [pc, #556]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a8a      	ldr	r2, [pc, #552]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405e:	f7fe fc6b 	bl	8002938 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fe fc67 	bl	8002938 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b64      	cmp	r3, #100	; 0x64
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0fd      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	4b81      	ldr	r3, [pc, #516]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x312>
 800408c:	4b7b      	ldr	r3, [pc, #492]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a7a      	ldr	r2, [pc, #488]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	e02d      	b.n	80040f6 <HAL_RCC_OscConfig+0x36e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x334>
 80040a2:	4b76      	ldr	r3, [pc, #472]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4a75      	ldr	r2, [pc, #468]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	6213      	str	r3, [r2, #32]
 80040ae:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4a72      	ldr	r2, [pc, #456]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	6213      	str	r3, [r2, #32]
 80040ba:	e01c      	b.n	80040f6 <HAL_RCC_OscConfig+0x36e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d10c      	bne.n	80040de <HAL_RCC_OscConfig+0x356>
 80040c4:	4b6d      	ldr	r3, [pc, #436]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4a6c      	ldr	r2, [pc, #432]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040ca:	f043 0304 	orr.w	r3, r3, #4
 80040ce:	6213      	str	r3, [r2, #32]
 80040d0:	4b6a      	ldr	r3, [pc, #424]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	4a69      	ldr	r2, [pc, #420]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6213      	str	r3, [r2, #32]
 80040dc:	e00b      	b.n	80040f6 <HAL_RCC_OscConfig+0x36e>
 80040de:	4b67      	ldr	r3, [pc, #412]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4a66      	ldr	r2, [pc, #408]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	6213      	str	r3, [r2, #32]
 80040ea:	4b64      	ldr	r3, [pc, #400]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d015      	beq.n	800412a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fe:	f7fe fc1b 	bl	8002938 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	e00a      	b.n	800411c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f7fe fc17 	bl	8002938 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f241 3288 	movw	r2, #5000	; 0x1388
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e0ab      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	4b57      	ldr	r3, [pc, #348]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ee      	beq.n	8004106 <HAL_RCC_OscConfig+0x37e>
 8004128:	e014      	b.n	8004154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412a:	f7fe fc05 	bl	8002938 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004130:	e00a      	b.n	8004148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fe fc01 	bl	8002938 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e095      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004148:	4b4c      	ldr	r3, [pc, #304]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ee      	bne.n	8004132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4b48      	ldr	r3, [pc, #288]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4a47      	ldr	r2, [pc, #284]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8081 	beq.w	8004272 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004170:	4b42      	ldr	r3, [pc, #264]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	2b08      	cmp	r3, #8
 800417a:	d061      	beq.n	8004240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d146      	bne.n	8004212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004184:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x4fc>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7fe fbd5 	bl	8002938 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004192:	f7fe fbd1 	bl	8002938 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e067      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a4:	4b35      	ldr	r3, [pc, #212]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b8:	d108      	bne.n	80041cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	492d      	ldr	r1, [pc, #180]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041cc:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a19      	ldr	r1, [r3, #32]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	430b      	orrs	r3, r1
 80041de:	4927      	ldr	r1, [pc, #156]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCC_OscConfig+0x4fc>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ea:	f7fe fba5 	bl	8002938 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f2:	f7fe fba1 	bl	8002938 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e037      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x46a>
 8004210:	e02f      	b.n	8004272 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_RCC_OscConfig+0x4fc>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fe fb8e 	bl	8002938 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fe fb8a 	bl	8002938 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e020      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x498>
 800423e:	e018      	b.n	8004272 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e013      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	429a      	cmp	r2, r3
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	40007000 	.word	0x40007000
 8004284:	42420060 	.word	0x42420060

08004288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0d0      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b6a      	ldr	r3, [pc, #424]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d910      	bls.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 0207 	bic.w	r2, r3, #7
 80042b2:	4965      	ldr	r1, [pc, #404]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a58      	ldr	r2, [pc, #352]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d040      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d115      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e073      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06b      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f023 0203 	bic.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4936      	ldr	r1, [pc, #216]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004378:	f7fe fade 	bl	8002938 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	e00a      	b.n	8004396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fe fada 	bl	8002938 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e053      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 020c 	and.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d1eb      	bne.n	8004380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d210      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 0207 	bic.w	r2, r3, #7
 80043be:	4922      	ldr	r1, [pc, #136]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4601      	mov	r1, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	fa21 f303 	lsr.w	r3, r1, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1cc>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x1d0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fa3c 	bl	80028b4 <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40022000 	.word	0x40022000
 800444c:	40021000 	.word	0x40021000
 8004450:	080058cc 	.word	0x080058cc
 8004454:	20000000 	.word	0x20000000
 8004458:	20000004 	.word	0x20000004

0800445c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	b490      	push	{r4, r7}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004464:	1d3c      	adds	r4, r7, #4
 8004466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800446c:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HAL_RCC_GetSysClockFreq+0xb4>)
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	2300      	movs	r3, #0
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004486:	4b23      	ldr	r3, [pc, #140]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b04      	cmp	r3, #4
 8004494:	d002      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x40>
 8004496:	2b08      	cmp	r3, #8
 8004498:	d003      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x46>
 800449a:	e02d      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800449c:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <HAL_RCC_GetSysClockFreq+0xbc>)
 800449e:	623b      	str	r3, [r7, #32]
      break;
 80044a0:	e02d      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	0c9b      	lsrs	r3, r3, #18
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044ae:	4413      	add	r3, r2
 80044b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d013      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044c0:	4b14      	ldr	r3, [pc, #80]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	0c5b      	lsrs	r3, r3, #17
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044ce:	4413      	add	r3, r2
 80044d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044da:	fb02 f203 	mul.w	r2, r2, r3
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	e004      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <HAL_RCC_GetSysClockFreq+0xc0>)
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	623b      	str	r3, [r7, #32]
      break;
 80044f6:	e002      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044fa:	623b      	str	r3, [r7, #32]
      break;
 80044fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bc90      	pop	{r4, r7}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	080058b8 	.word	0x080058b8
 8004510:	080058c8 	.word	0x080058c8
 8004514:	40021000 	.word	0x40021000
 8004518:	007a1200 	.word	0x007a1200
 800451c:	003d0900 	.word	0x003d0900

08004520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004524:	4b02      	ldr	r3, [pc, #8]	; (8004530 <HAL_RCC_GetHCLKFreq+0x10>)
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	20000000 	.word	0x20000000

08004534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004538:	f7ff fff2 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 800453c:	4601      	mov	r1, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4a03      	ldr	r2, [pc, #12]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800454a:	5cd3      	ldrb	r3, [r2, r3]
 800454c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	080058dc 	.word	0x080058dc

0800455c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004560:	f7ff ffde 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004564:	4601      	mov	r1, r0
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	0adb      	lsrs	r3, r3, #11
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4a03      	ldr	r2, [pc, #12]	; (8004580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004572:	5cd3      	ldrb	r3, [r2, r3]
 8004574:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	080058dc 	.word	0x080058dc

08004584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <RCC_Delay+0x34>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <RCC_Delay+0x38>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	0a5b      	lsrs	r3, r3, #9
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045a0:	bf00      	nop
  }
  while (Delay --);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1e5a      	subs	r2, r3, #1
 80045a6:	60fa      	str	r2, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f9      	bne.n	80045a0 <RCC_Delay+0x1c>
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000
 80045bc:	10624dd3 	.word	0x10624dd3

080045c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e03f      	b.n	8004652 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fe f81a 	bl	8002620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f9b1 	bl	800496c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b088      	sub	sp, #32
 800465e:	af02      	add	r7, sp, #8
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b20      	cmp	r3, #32
 8004678:	f040 8083 	bne.w	8004782 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_UART_Transmit+0x2e>
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e07b      	b.n	8004784 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_UART_Transmit+0x40>
 8004696:	2302      	movs	r3, #2
 8004698:	e074      	b.n	8004784 <HAL_UART_Transmit+0x12a>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2221      	movs	r2, #33	; 0x21
 80046ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046b0:	f7fe f942 	bl	8002938 <HAL_GetTick>
 80046b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	88fa      	ldrh	r2, [r7, #6]
 80046c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046c2:	e042      	b.n	800474a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	d122      	bne.n	8004722 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f8f6 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e046      	b.n	8004784 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004708:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3302      	adds	r3, #2
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	e017      	b.n	800474a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3301      	adds	r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	e013      	b.n	800474a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f8d3 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e023      	b.n	8004784 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	60ba      	str	r2, [r7, #8]
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1b7      	bne.n	80046c4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	2140      	movs	r1, #64	; 0x40
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f8ba 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e00a      	b.n	8004784 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	f040 8090 	bne.w	80048ce <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <HAL_UART_Receive+0x2e>
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e088      	b.n	80048d0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Receive+0x40>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e081      	b.n	80048d0 <HAL_UART_Receive+0x144>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2222      	movs	r2, #34	; 0x22
 80047de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047e2:	f7fe f8a9 	bl	8002938 <HAL_GetTick>
 80047e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047f4:	e05c      	b.n	80048b0 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d12b      	bne.n	8004866 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	2120      	movs	r1, #32
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f85d 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e053      	b.n	80048d0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10c      	bne.n	800484e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004840:	b29a      	uxth	r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	3302      	adds	r3, #2
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	e030      	b.n	80048b0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	b29b      	uxth	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	b29a      	uxth	r2, r3
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3301      	adds	r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	e024      	b.n	80048b0 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	2120      	movs	r1, #32
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f831 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e027      	b.n	80048d0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d108      	bne.n	800489a <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6859      	ldr	r1, [r3, #4]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	60ba      	str	r2, [r7, #8]
 8004894:	b2ca      	uxtb	r2, r1
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	e00a      	b.n	80048b0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	1c59      	adds	r1, r3, #1
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d19d      	bne.n	80047f6 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	e02c      	b.n	8004944 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d028      	beq.n	8004944 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f8:	f7fe f81e 	bl	8002938 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	429a      	cmp	r2, r3
 8004906:	d21d      	bcs.n	8004944 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004916:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e00f      	b.n	8004964 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4013      	ands	r3, r2
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	429a      	cmp	r2, r3
 8004960:	d0c3      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049a6:	f023 030c 	bic.w	r3, r3, #12
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	430b      	orrs	r3, r1
 80049b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <UART_SetConfig+0x1ac>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d14e      	bne.n	8004a72 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049d4:	f7ff fdc2 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 80049d8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009a      	lsls	r2, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	4a4a      	ldr	r2, [pc, #296]	; (8004b1c <UART_SetConfig+0x1b0>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	0119      	lsls	r1, r3, #4
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009a      	lsls	r2, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a10:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <UART_SetConfig+0x1b0>)
 8004a12:	fba3 0302 	umull	r0, r3, r3, r2
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2064      	movs	r0, #100	; 0x64
 8004a1a:	fb00 f303 	mul.w	r3, r0, r3
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	3332      	adds	r3, #50	; 0x32
 8004a24:	4a3d      	ldr	r2, [pc, #244]	; (8004b1c <UART_SetConfig+0x1b0>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a30:	4419      	add	r1, r3
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009a      	lsls	r2, r3, #2
 8004a3c:	441a      	add	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a48:	4b34      	ldr	r3, [pc, #208]	; (8004b1c <UART_SetConfig+0x1b0>)
 8004a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2064      	movs	r0, #100	; 0x64
 8004a52:	fb00 f303 	mul.w	r3, r0, r3
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	3332      	adds	r3, #50	; 0x32
 8004a5c:	4a2f      	ldr	r2, [pc, #188]	; (8004b1c <UART_SetConfig+0x1b0>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004a70:	e04d      	b.n	8004b0e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a72:	f7ff fd5f 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 8004a76:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009a      	lsls	r2, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	4a23      	ldr	r2, [pc, #140]	; (8004b1c <UART_SetConfig+0x1b0>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	0119      	lsls	r1, r3, #4
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <UART_SetConfig+0x1b0>)
 8004ab0:	fba3 0302 	umull	r0, r3, r3, r2
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	2064      	movs	r0, #100	; 0x64
 8004ab8:	fb00 f303 	mul.w	r3, r0, r3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	3332      	adds	r3, #50	; 0x32
 8004ac2:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <UART_SetConfig+0x1b0>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ace:	4419      	add	r1, r3
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009a      	lsls	r2, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <UART_SetConfig+0x1b0>)
 8004ae8:	fba3 0302 	umull	r0, r3, r3, r2
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	2064      	movs	r0, #100	; 0x64
 8004af0:	fb00 f303 	mul.w	r3, r0, r3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	3332      	adds	r3, #50	; 0x32
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <UART_SetConfig+0x1b0>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	51eb851f 	.word	0x51eb851f

08004b20 <__errno>:
 8004b20:	4b01      	ldr	r3, [pc, #4]	; (8004b28 <__errno+0x8>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	2000000c 	.word	0x2000000c

08004b2c <__libc_init_array>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	2500      	movs	r5, #0
 8004b30:	4e0c      	ldr	r6, [pc, #48]	; (8004b64 <__libc_init_array+0x38>)
 8004b32:	4c0d      	ldr	r4, [pc, #52]	; (8004b68 <__libc_init_array+0x3c>)
 8004b34:	1ba4      	subs	r4, r4, r6
 8004b36:	10a4      	asrs	r4, r4, #2
 8004b38:	42a5      	cmp	r5, r4
 8004b3a:	d109      	bne.n	8004b50 <__libc_init_array+0x24>
 8004b3c:	f000 fc72 	bl	8005424 <_init>
 8004b40:	2500      	movs	r5, #0
 8004b42:	4e0a      	ldr	r6, [pc, #40]	; (8004b6c <__libc_init_array+0x40>)
 8004b44:	4c0a      	ldr	r4, [pc, #40]	; (8004b70 <__libc_init_array+0x44>)
 8004b46:	1ba4      	subs	r4, r4, r6
 8004b48:	10a4      	asrs	r4, r4, #2
 8004b4a:	42a5      	cmp	r5, r4
 8004b4c:	d105      	bne.n	8004b5a <__libc_init_array+0x2e>
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b54:	4798      	blx	r3
 8004b56:	3501      	adds	r5, #1
 8004b58:	e7ee      	b.n	8004b38 <__libc_init_array+0xc>
 8004b5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b5e:	4798      	blx	r3
 8004b60:	3501      	adds	r5, #1
 8004b62:	e7f2      	b.n	8004b4a <__libc_init_array+0x1e>
 8004b64:	08005920 	.word	0x08005920
 8004b68:	08005920 	.word	0x08005920
 8004b6c:	08005920 	.word	0x08005920
 8004b70:	08005924 	.word	0x08005924

08004b74 <memset>:
 8004b74:	4603      	mov	r3, r0
 8004b76:	4402      	add	r2, r0
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d100      	bne.n	8004b7e <memset+0xa>
 8004b7c:	4770      	bx	lr
 8004b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b82:	e7f9      	b.n	8004b78 <memset+0x4>

08004b84 <siprintf>:
 8004b84:	b40e      	push	{r1, r2, r3}
 8004b86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b8a:	b500      	push	{lr}
 8004b8c:	b09c      	sub	sp, #112	; 0x70
 8004b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b90:	9002      	str	r0, [sp, #8]
 8004b92:	9006      	str	r0, [sp, #24]
 8004b94:	9107      	str	r1, [sp, #28]
 8004b96:	9104      	str	r1, [sp, #16]
 8004b98:	4808      	ldr	r0, [pc, #32]	; (8004bbc <siprintf+0x38>)
 8004b9a:	4909      	ldr	r1, [pc, #36]	; (8004bc0 <siprintf+0x3c>)
 8004b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba0:	9105      	str	r1, [sp, #20]
 8004ba2:	6800      	ldr	r0, [r0, #0]
 8004ba4:	a902      	add	r1, sp, #8
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	f000 f880 	bl	8004cac <_svfiprintf_r>
 8004bac:	2200      	movs	r2, #0
 8004bae:	9b02      	ldr	r3, [sp, #8]
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	b01c      	add	sp, #112	; 0x70
 8004bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bb8:	b003      	add	sp, #12
 8004bba:	4770      	bx	lr
 8004bbc:	2000000c 	.word	0x2000000c
 8004bc0:	ffff0208 	.word	0xffff0208

08004bc4 <strstr>:
 8004bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc6:	7803      	ldrb	r3, [r0, #0]
 8004bc8:	b17b      	cbz	r3, 8004bea <strstr+0x26>
 8004bca:	4604      	mov	r4, r0
 8004bcc:	7823      	ldrb	r3, [r4, #0]
 8004bce:	4620      	mov	r0, r4
 8004bd0:	1c66      	adds	r6, r4, #1
 8004bd2:	b17b      	cbz	r3, 8004bf4 <strstr+0x30>
 8004bd4:	1e4a      	subs	r2, r1, #1
 8004bd6:	1e63      	subs	r3, r4, #1
 8004bd8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004bdc:	b14d      	cbz	r5, 8004bf2 <strstr+0x2e>
 8004bde:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004be2:	4634      	mov	r4, r6
 8004be4:	42af      	cmp	r7, r5
 8004be6:	d0f7      	beq.n	8004bd8 <strstr+0x14>
 8004be8:	e7f0      	b.n	8004bcc <strstr+0x8>
 8004bea:	780b      	ldrb	r3, [r1, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf18      	it	ne
 8004bf0:	2000      	movne	r0, #0
 8004bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	e7fc      	b.n	8004bf2 <strstr+0x2e>

08004bf8 <__ssputs_r>:
 8004bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	688e      	ldr	r6, [r1, #8]
 8004bfe:	4682      	mov	sl, r0
 8004c00:	429e      	cmp	r6, r3
 8004c02:	460c      	mov	r4, r1
 8004c04:	4690      	mov	r8, r2
 8004c06:	4699      	mov	r9, r3
 8004c08:	d837      	bhi.n	8004c7a <__ssputs_r+0x82>
 8004c0a:	898a      	ldrh	r2, [r1, #12]
 8004c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c10:	d031      	beq.n	8004c76 <__ssputs_r+0x7e>
 8004c12:	2302      	movs	r3, #2
 8004c14:	6825      	ldr	r5, [r4, #0]
 8004c16:	6909      	ldr	r1, [r1, #16]
 8004c18:	1a6f      	subs	r7, r5, r1
 8004c1a:	6965      	ldr	r5, [r4, #20]
 8004c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c20:	fb95 f5f3 	sdiv	r5, r5, r3
 8004c24:	f109 0301 	add.w	r3, r9, #1
 8004c28:	443b      	add	r3, r7
 8004c2a:	429d      	cmp	r5, r3
 8004c2c:	bf38      	it	cc
 8004c2e:	461d      	movcc	r5, r3
 8004c30:	0553      	lsls	r3, r2, #21
 8004c32:	d530      	bpl.n	8004c96 <__ssputs_r+0x9e>
 8004c34:	4629      	mov	r1, r5
 8004c36:	f000 fb37 	bl	80052a8 <_malloc_r>
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	b950      	cbnz	r0, 8004c54 <__ssputs_r+0x5c>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	f8ca 3000 	str.w	r3, [sl]
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c54:	463a      	mov	r2, r7
 8004c56:	6921      	ldr	r1, [r4, #16]
 8004c58:	f000 fab6 	bl	80051c8 <memcpy>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	81a3      	strh	r3, [r4, #12]
 8004c68:	6126      	str	r6, [r4, #16]
 8004c6a:	443e      	add	r6, r7
 8004c6c:	6026      	str	r6, [r4, #0]
 8004c6e:	464e      	mov	r6, r9
 8004c70:	6165      	str	r5, [r4, #20]
 8004c72:	1bed      	subs	r5, r5, r7
 8004c74:	60a5      	str	r5, [r4, #8]
 8004c76:	454e      	cmp	r6, r9
 8004c78:	d900      	bls.n	8004c7c <__ssputs_r+0x84>
 8004c7a:	464e      	mov	r6, r9
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	4641      	mov	r1, r8
 8004c80:	6820      	ldr	r0, [r4, #0]
 8004c82:	f000 faac 	bl	80051de <memmove>
 8004c86:	68a3      	ldr	r3, [r4, #8]
 8004c88:	2000      	movs	r0, #0
 8004c8a:	1b9b      	subs	r3, r3, r6
 8004c8c:	60a3      	str	r3, [r4, #8]
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	441e      	add	r6, r3
 8004c92:	6026      	str	r6, [r4, #0]
 8004c94:	e7dc      	b.n	8004c50 <__ssputs_r+0x58>
 8004c96:	462a      	mov	r2, r5
 8004c98:	f000 fb60 	bl	800535c <_realloc_r>
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d1e2      	bne.n	8004c68 <__ssputs_r+0x70>
 8004ca2:	6921      	ldr	r1, [r4, #16]
 8004ca4:	4650      	mov	r0, sl
 8004ca6:	f000 fab3 	bl	8005210 <_free_r>
 8004caa:	e7c8      	b.n	8004c3e <__ssputs_r+0x46>

08004cac <_svfiprintf_r>:
 8004cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb0:	461d      	mov	r5, r3
 8004cb2:	898b      	ldrh	r3, [r1, #12]
 8004cb4:	b09d      	sub	sp, #116	; 0x74
 8004cb6:	061f      	lsls	r7, r3, #24
 8004cb8:	4680      	mov	r8, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	4616      	mov	r6, r2
 8004cbe:	d50f      	bpl.n	8004ce0 <_svfiprintf_r+0x34>
 8004cc0:	690b      	ldr	r3, [r1, #16]
 8004cc2:	b96b      	cbnz	r3, 8004ce0 <_svfiprintf_r+0x34>
 8004cc4:	2140      	movs	r1, #64	; 0x40
 8004cc6:	f000 faef 	bl	80052a8 <_malloc_r>
 8004cca:	6020      	str	r0, [r4, #0]
 8004ccc:	6120      	str	r0, [r4, #16]
 8004cce:	b928      	cbnz	r0, 8004cdc <_svfiprintf_r+0x30>
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	f8c8 3000 	str.w	r3, [r8]
 8004cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cda:	e0c8      	b.n	8004e6e <_svfiprintf_r+0x1c2>
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	6163      	str	r3, [r4, #20]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cea:	2330      	movs	r3, #48	; 0x30
 8004cec:	f04f 0b01 	mov.w	fp, #1
 8004cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cf4:	9503      	str	r5, [sp, #12]
 8004cf6:	4637      	mov	r7, r6
 8004cf8:	463d      	mov	r5, r7
 8004cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004cfe:	b10b      	cbz	r3, 8004d04 <_svfiprintf_r+0x58>
 8004d00:	2b25      	cmp	r3, #37	; 0x25
 8004d02:	d13e      	bne.n	8004d82 <_svfiprintf_r+0xd6>
 8004d04:	ebb7 0a06 	subs.w	sl, r7, r6
 8004d08:	d00b      	beq.n	8004d22 <_svfiprintf_r+0x76>
 8004d0a:	4653      	mov	r3, sl
 8004d0c:	4632      	mov	r2, r6
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4640      	mov	r0, r8
 8004d12:	f7ff ff71 	bl	8004bf8 <__ssputs_r>
 8004d16:	3001      	adds	r0, #1
 8004d18:	f000 80a4 	beq.w	8004e64 <_svfiprintf_r+0x1b8>
 8004d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d1e:	4453      	add	r3, sl
 8004d20:	9309      	str	r3, [sp, #36]	; 0x24
 8004d22:	783b      	ldrb	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 809d 	beq.w	8004e64 <_svfiprintf_r+0x1b8>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	9307      	str	r3, [sp, #28]
 8004d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d3e:	462f      	mov	r7, r5
 8004d40:	2205      	movs	r2, #5
 8004d42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004d46:	4850      	ldr	r0, [pc, #320]	; (8004e88 <_svfiprintf_r+0x1dc>)
 8004d48:	f000 fa30 	bl	80051ac <memchr>
 8004d4c:	9b04      	ldr	r3, [sp, #16]
 8004d4e:	b9d0      	cbnz	r0, 8004d86 <_svfiprintf_r+0xda>
 8004d50:	06d9      	lsls	r1, r3, #27
 8004d52:	bf44      	itt	mi
 8004d54:	2220      	movmi	r2, #32
 8004d56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d5a:	071a      	lsls	r2, r3, #28
 8004d5c:	bf44      	itt	mi
 8004d5e:	222b      	movmi	r2, #43	; 0x2b
 8004d60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d64:	782a      	ldrb	r2, [r5, #0]
 8004d66:	2a2a      	cmp	r2, #42	; 0x2a
 8004d68:	d015      	beq.n	8004d96 <_svfiprintf_r+0xea>
 8004d6a:	462f      	mov	r7, r5
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	250a      	movs	r5, #10
 8004d70:	9a07      	ldr	r2, [sp, #28]
 8004d72:	4639      	mov	r1, r7
 8004d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d78:	3b30      	subs	r3, #48	; 0x30
 8004d7a:	2b09      	cmp	r3, #9
 8004d7c:	d94d      	bls.n	8004e1a <_svfiprintf_r+0x16e>
 8004d7e:	b1b8      	cbz	r0, 8004db0 <_svfiprintf_r+0x104>
 8004d80:	e00f      	b.n	8004da2 <_svfiprintf_r+0xf6>
 8004d82:	462f      	mov	r7, r5
 8004d84:	e7b8      	b.n	8004cf8 <_svfiprintf_r+0x4c>
 8004d86:	4a40      	ldr	r2, [pc, #256]	; (8004e88 <_svfiprintf_r+0x1dc>)
 8004d88:	463d      	mov	r5, r7
 8004d8a:	1a80      	subs	r0, r0, r2
 8004d8c:	fa0b f000 	lsl.w	r0, fp, r0
 8004d90:	4318      	orrs	r0, r3
 8004d92:	9004      	str	r0, [sp, #16]
 8004d94:	e7d3      	b.n	8004d3e <_svfiprintf_r+0x92>
 8004d96:	9a03      	ldr	r2, [sp, #12]
 8004d98:	1d11      	adds	r1, r2, #4
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	9103      	str	r1, [sp, #12]
 8004d9e:	2a00      	cmp	r2, #0
 8004da0:	db01      	blt.n	8004da6 <_svfiprintf_r+0xfa>
 8004da2:	9207      	str	r2, [sp, #28]
 8004da4:	e004      	b.n	8004db0 <_svfiprintf_r+0x104>
 8004da6:	4252      	negs	r2, r2
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	9207      	str	r2, [sp, #28]
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	783b      	ldrb	r3, [r7, #0]
 8004db2:	2b2e      	cmp	r3, #46	; 0x2e
 8004db4:	d10c      	bne.n	8004dd0 <_svfiprintf_r+0x124>
 8004db6:	787b      	ldrb	r3, [r7, #1]
 8004db8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dba:	d133      	bne.n	8004e24 <_svfiprintf_r+0x178>
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	3702      	adds	r7, #2
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	9203      	str	r2, [sp, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bfb8      	it	lt
 8004dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	4d2e      	ldr	r5, [pc, #184]	; (8004e8c <_svfiprintf_r+0x1e0>)
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	7839      	ldrb	r1, [r7, #0]
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 f9e8 	bl	80051ac <memchr>
 8004ddc:	b138      	cbz	r0, 8004dee <_svfiprintf_r+0x142>
 8004dde:	2340      	movs	r3, #64	; 0x40
 8004de0:	1b40      	subs	r0, r0, r5
 8004de2:	fa03 f000 	lsl.w	r0, r3, r0
 8004de6:	9b04      	ldr	r3, [sp, #16]
 8004de8:	3701      	adds	r7, #1
 8004dea:	4303      	orrs	r3, r0
 8004dec:	9304      	str	r3, [sp, #16]
 8004dee:	7839      	ldrb	r1, [r7, #0]
 8004df0:	2206      	movs	r2, #6
 8004df2:	4827      	ldr	r0, [pc, #156]	; (8004e90 <_svfiprintf_r+0x1e4>)
 8004df4:	1c7e      	adds	r6, r7, #1
 8004df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dfa:	f000 f9d7 	bl	80051ac <memchr>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d038      	beq.n	8004e74 <_svfiprintf_r+0x1c8>
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <_svfiprintf_r+0x1e8>)
 8004e04:	bb13      	cbnz	r3, 8004e4c <_svfiprintf_r+0x1a0>
 8004e06:	9b03      	ldr	r3, [sp, #12]
 8004e08:	3307      	adds	r3, #7
 8004e0a:	f023 0307 	bic.w	r3, r3, #7
 8004e0e:	3308      	adds	r3, #8
 8004e10:	9303      	str	r3, [sp, #12]
 8004e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e14:	444b      	add	r3, r9
 8004e16:	9309      	str	r3, [sp, #36]	; 0x24
 8004e18:	e76d      	b.n	8004cf6 <_svfiprintf_r+0x4a>
 8004e1a:	fb05 3202 	mla	r2, r5, r2, r3
 8004e1e:	2001      	movs	r0, #1
 8004e20:	460f      	mov	r7, r1
 8004e22:	e7a6      	b.n	8004d72 <_svfiprintf_r+0xc6>
 8004e24:	2300      	movs	r3, #0
 8004e26:	250a      	movs	r5, #10
 8004e28:	4619      	mov	r1, r3
 8004e2a:	3701      	adds	r7, #1
 8004e2c:	9305      	str	r3, [sp, #20]
 8004e2e:	4638      	mov	r0, r7
 8004e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e34:	3a30      	subs	r2, #48	; 0x30
 8004e36:	2a09      	cmp	r2, #9
 8004e38:	d903      	bls.n	8004e42 <_svfiprintf_r+0x196>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0c8      	beq.n	8004dd0 <_svfiprintf_r+0x124>
 8004e3e:	9105      	str	r1, [sp, #20]
 8004e40:	e7c6      	b.n	8004dd0 <_svfiprintf_r+0x124>
 8004e42:	fb05 2101 	mla	r1, r5, r1, r2
 8004e46:	2301      	movs	r3, #1
 8004e48:	4607      	mov	r7, r0
 8004e4a:	e7f0      	b.n	8004e2e <_svfiprintf_r+0x182>
 8004e4c:	ab03      	add	r3, sp, #12
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	4622      	mov	r2, r4
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <_svfiprintf_r+0x1ec>)
 8004e54:	a904      	add	r1, sp, #16
 8004e56:	4640      	mov	r0, r8
 8004e58:	f3af 8000 	nop.w
 8004e5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e60:	4681      	mov	r9, r0
 8004e62:	d1d6      	bne.n	8004e12 <_svfiprintf_r+0x166>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	065b      	lsls	r3, r3, #25
 8004e68:	f53f af35 	bmi.w	8004cd6 <_svfiprintf_r+0x2a>
 8004e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e6e:	b01d      	add	sp, #116	; 0x74
 8004e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e74:	ab03      	add	r3, sp, #12
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4622      	mov	r2, r4
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <_svfiprintf_r+0x1ec>)
 8004e7c:	a904      	add	r1, sp, #16
 8004e7e:	4640      	mov	r0, r8
 8004e80:	f000 f882 	bl	8004f88 <_printf_i>
 8004e84:	e7ea      	b.n	8004e5c <_svfiprintf_r+0x1b0>
 8004e86:	bf00      	nop
 8004e88:	080058e4 	.word	0x080058e4
 8004e8c:	080058ea 	.word	0x080058ea
 8004e90:	080058ee 	.word	0x080058ee
 8004e94:	00000000 	.word	0x00000000
 8004e98:	08004bf9 	.word	0x08004bf9

08004e9c <_printf_common>:
 8004e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea0:	4691      	mov	r9, r2
 8004ea2:	461f      	mov	r7, r3
 8004ea4:	688a      	ldr	r2, [r1, #8]
 8004ea6:	690b      	ldr	r3, [r1, #16]
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	bfb8      	it	lt
 8004eae:	4613      	movlt	r3, r2
 8004eb0:	f8c9 3000 	str.w	r3, [r9]
 8004eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eb8:	460c      	mov	r4, r1
 8004eba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ebe:	b112      	cbz	r2, 8004ec6 <_printf_common+0x2a>
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	f8c9 3000 	str.w	r3, [r9]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	0699      	lsls	r1, r3, #26
 8004eca:	bf42      	ittt	mi
 8004ecc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ed0:	3302      	addmi	r3, #2
 8004ed2:	f8c9 3000 	strmi.w	r3, [r9]
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	f015 0506 	ands.w	r5, r5, #6
 8004edc:	d107      	bne.n	8004eee <_printf_common+0x52>
 8004ede:	f104 0a19 	add.w	sl, r4, #25
 8004ee2:	68e3      	ldr	r3, [r4, #12]
 8004ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	42ab      	cmp	r3, r5
 8004eec:	dc29      	bgt.n	8004f42 <_printf_common+0xa6>
 8004eee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ef2:	6822      	ldr	r2, [r4, #0]
 8004ef4:	3300      	adds	r3, #0
 8004ef6:	bf18      	it	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	0692      	lsls	r2, r2, #26
 8004efc:	d42e      	bmi.n	8004f5c <_printf_common+0xc0>
 8004efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f02:	4639      	mov	r1, r7
 8004f04:	4630      	mov	r0, r6
 8004f06:	47c0      	blx	r8
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d021      	beq.n	8004f50 <_printf_common+0xb4>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	68e5      	ldr	r5, [r4, #12]
 8004f10:	f003 0306 	and.w	r3, r3, #6
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	bf18      	it	ne
 8004f18:	2500      	movne	r5, #0
 8004f1a:	f8d9 2000 	ldr.w	r2, [r9]
 8004f1e:	f04f 0900 	mov.w	r9, #0
 8004f22:	bf08      	it	eq
 8004f24:	1aad      	subeq	r5, r5, r2
 8004f26:	68a3      	ldr	r3, [r4, #8]
 8004f28:	6922      	ldr	r2, [r4, #16]
 8004f2a:	bf08      	it	eq
 8004f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f30:	4293      	cmp	r3, r2
 8004f32:	bfc4      	itt	gt
 8004f34:	1a9b      	subgt	r3, r3, r2
 8004f36:	18ed      	addgt	r5, r5, r3
 8004f38:	341a      	adds	r4, #26
 8004f3a:	454d      	cmp	r5, r9
 8004f3c:	d11a      	bne.n	8004f74 <_printf_common+0xd8>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e008      	b.n	8004f54 <_printf_common+0xb8>
 8004f42:	2301      	movs	r3, #1
 8004f44:	4652      	mov	r2, sl
 8004f46:	4639      	mov	r1, r7
 8004f48:	4630      	mov	r0, r6
 8004f4a:	47c0      	blx	r8
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d103      	bne.n	8004f58 <_printf_common+0xbc>
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f58:	3501      	adds	r5, #1
 8004f5a:	e7c2      	b.n	8004ee2 <_printf_common+0x46>
 8004f5c:	2030      	movs	r0, #48	; 0x30
 8004f5e:	18e1      	adds	r1, r4, r3
 8004f60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f6a:	4422      	add	r2, r4
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f72:	e7c4      	b.n	8004efe <_printf_common+0x62>
 8004f74:	2301      	movs	r3, #1
 8004f76:	4622      	mov	r2, r4
 8004f78:	4639      	mov	r1, r7
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	47c0      	blx	r8
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d0e6      	beq.n	8004f50 <_printf_common+0xb4>
 8004f82:	f109 0901 	add.w	r9, r9, #1
 8004f86:	e7d8      	b.n	8004f3a <_printf_common+0x9e>

08004f88 <_printf_i>:
 8004f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f90:	460c      	mov	r4, r1
 8004f92:	7e09      	ldrb	r1, [r1, #24]
 8004f94:	b085      	sub	sp, #20
 8004f96:	296e      	cmp	r1, #110	; 0x6e
 8004f98:	4617      	mov	r7, r2
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	4698      	mov	r8, r3
 8004f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fa0:	f000 80b3 	beq.w	800510a <_printf_i+0x182>
 8004fa4:	d822      	bhi.n	8004fec <_printf_i+0x64>
 8004fa6:	2963      	cmp	r1, #99	; 0x63
 8004fa8:	d036      	beq.n	8005018 <_printf_i+0x90>
 8004faa:	d80a      	bhi.n	8004fc2 <_printf_i+0x3a>
 8004fac:	2900      	cmp	r1, #0
 8004fae:	f000 80b9 	beq.w	8005124 <_printf_i+0x19c>
 8004fb2:	2958      	cmp	r1, #88	; 0x58
 8004fb4:	f000 8083 	beq.w	80050be <_printf_i+0x136>
 8004fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004fc0:	e032      	b.n	8005028 <_printf_i+0xa0>
 8004fc2:	2964      	cmp	r1, #100	; 0x64
 8004fc4:	d001      	beq.n	8004fca <_printf_i+0x42>
 8004fc6:	2969      	cmp	r1, #105	; 0x69
 8004fc8:	d1f6      	bne.n	8004fb8 <_printf_i+0x30>
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	6813      	ldr	r3, [r2, #0]
 8004fce:	0605      	lsls	r5, r0, #24
 8004fd0:	f103 0104 	add.w	r1, r3, #4
 8004fd4:	d52a      	bpl.n	800502c <_printf_i+0xa4>
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6011      	str	r1, [r2, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da03      	bge.n	8004fe6 <_printf_i+0x5e>
 8004fde:	222d      	movs	r2, #45	; 0x2d
 8004fe0:	425b      	negs	r3, r3
 8004fe2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fe6:	486f      	ldr	r0, [pc, #444]	; (80051a4 <_printf_i+0x21c>)
 8004fe8:	220a      	movs	r2, #10
 8004fea:	e039      	b.n	8005060 <_printf_i+0xd8>
 8004fec:	2973      	cmp	r1, #115	; 0x73
 8004fee:	f000 809d 	beq.w	800512c <_printf_i+0x1a4>
 8004ff2:	d808      	bhi.n	8005006 <_printf_i+0x7e>
 8004ff4:	296f      	cmp	r1, #111	; 0x6f
 8004ff6:	d020      	beq.n	800503a <_printf_i+0xb2>
 8004ff8:	2970      	cmp	r1, #112	; 0x70
 8004ffa:	d1dd      	bne.n	8004fb8 <_printf_i+0x30>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	f043 0320 	orr.w	r3, r3, #32
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	e003      	b.n	800500e <_printf_i+0x86>
 8005006:	2975      	cmp	r1, #117	; 0x75
 8005008:	d017      	beq.n	800503a <_printf_i+0xb2>
 800500a:	2978      	cmp	r1, #120	; 0x78
 800500c:	d1d4      	bne.n	8004fb8 <_printf_i+0x30>
 800500e:	2378      	movs	r3, #120	; 0x78
 8005010:	4865      	ldr	r0, [pc, #404]	; (80051a8 <_printf_i+0x220>)
 8005012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005016:	e055      	b.n	80050c4 <_printf_i+0x13c>
 8005018:	6813      	ldr	r3, [r2, #0]
 800501a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800501e:	1d19      	adds	r1, r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6011      	str	r1, [r2, #0]
 8005024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005028:	2301      	movs	r3, #1
 800502a:	e08c      	b.n	8005146 <_printf_i+0x1be>
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005032:	6011      	str	r1, [r2, #0]
 8005034:	bf18      	it	ne
 8005036:	b21b      	sxthne	r3, r3
 8005038:	e7cf      	b.n	8004fda <_printf_i+0x52>
 800503a:	6813      	ldr	r3, [r2, #0]
 800503c:	6825      	ldr	r5, [r4, #0]
 800503e:	1d18      	adds	r0, r3, #4
 8005040:	6010      	str	r0, [r2, #0]
 8005042:	0628      	lsls	r0, r5, #24
 8005044:	d501      	bpl.n	800504a <_printf_i+0xc2>
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	e002      	b.n	8005050 <_printf_i+0xc8>
 800504a:	0668      	lsls	r0, r5, #25
 800504c:	d5fb      	bpl.n	8005046 <_printf_i+0xbe>
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	296f      	cmp	r1, #111	; 0x6f
 8005052:	bf14      	ite	ne
 8005054:	220a      	movne	r2, #10
 8005056:	2208      	moveq	r2, #8
 8005058:	4852      	ldr	r0, [pc, #328]	; (80051a4 <_printf_i+0x21c>)
 800505a:	2100      	movs	r1, #0
 800505c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005060:	6865      	ldr	r5, [r4, #4]
 8005062:	2d00      	cmp	r5, #0
 8005064:	60a5      	str	r5, [r4, #8]
 8005066:	f2c0 8095 	blt.w	8005194 <_printf_i+0x20c>
 800506a:	6821      	ldr	r1, [r4, #0]
 800506c:	f021 0104 	bic.w	r1, r1, #4
 8005070:	6021      	str	r1, [r4, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d13d      	bne.n	80050f2 <_printf_i+0x16a>
 8005076:	2d00      	cmp	r5, #0
 8005078:	f040 808e 	bne.w	8005198 <_printf_i+0x210>
 800507c:	4665      	mov	r5, ip
 800507e:	2a08      	cmp	r2, #8
 8005080:	d10b      	bne.n	800509a <_printf_i+0x112>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	07db      	lsls	r3, r3, #31
 8005086:	d508      	bpl.n	800509a <_printf_i+0x112>
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	6862      	ldr	r2, [r4, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	bfde      	ittt	le
 8005090:	2330      	movle	r3, #48	; 0x30
 8005092:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005096:	f105 35ff 	addle.w	r5, r5, #4294967295
 800509a:	ebac 0305 	sub.w	r3, ip, r5
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	f8cd 8000 	str.w	r8, [sp]
 80050a4:	463b      	mov	r3, r7
 80050a6:	aa03      	add	r2, sp, #12
 80050a8:	4621      	mov	r1, r4
 80050aa:	4630      	mov	r0, r6
 80050ac:	f7ff fef6 	bl	8004e9c <_printf_common>
 80050b0:	3001      	adds	r0, #1
 80050b2:	d14d      	bne.n	8005150 <_printf_i+0x1c8>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	b005      	add	sp, #20
 80050ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050be:	4839      	ldr	r0, [pc, #228]	; (80051a4 <_printf_i+0x21c>)
 80050c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050c4:	6813      	ldr	r3, [r2, #0]
 80050c6:	6821      	ldr	r1, [r4, #0]
 80050c8:	1d1d      	adds	r5, r3, #4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6015      	str	r5, [r2, #0]
 80050ce:	060a      	lsls	r2, r1, #24
 80050d0:	d50b      	bpl.n	80050ea <_printf_i+0x162>
 80050d2:	07ca      	lsls	r2, r1, #31
 80050d4:	bf44      	itt	mi
 80050d6:	f041 0120 	orrmi.w	r1, r1, #32
 80050da:	6021      	strmi	r1, [r4, #0]
 80050dc:	b91b      	cbnz	r3, 80050e6 <_printf_i+0x15e>
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	f022 0220 	bic.w	r2, r2, #32
 80050e4:	6022      	str	r2, [r4, #0]
 80050e6:	2210      	movs	r2, #16
 80050e8:	e7b7      	b.n	800505a <_printf_i+0xd2>
 80050ea:	064d      	lsls	r5, r1, #25
 80050ec:	bf48      	it	mi
 80050ee:	b29b      	uxthmi	r3, r3
 80050f0:	e7ef      	b.n	80050d2 <_printf_i+0x14a>
 80050f2:	4665      	mov	r5, ip
 80050f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80050f8:	fb02 3311 	mls	r3, r2, r1, r3
 80050fc:	5cc3      	ldrb	r3, [r0, r3]
 80050fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005102:	460b      	mov	r3, r1
 8005104:	2900      	cmp	r1, #0
 8005106:	d1f5      	bne.n	80050f4 <_printf_i+0x16c>
 8005108:	e7b9      	b.n	800507e <_printf_i+0xf6>
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	6825      	ldr	r5, [r4, #0]
 800510e:	1d18      	adds	r0, r3, #4
 8005110:	6961      	ldr	r1, [r4, #20]
 8005112:	6010      	str	r0, [r2, #0]
 8005114:	0628      	lsls	r0, r5, #24
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	d501      	bpl.n	800511e <_printf_i+0x196>
 800511a:	6019      	str	r1, [r3, #0]
 800511c:	e002      	b.n	8005124 <_printf_i+0x19c>
 800511e:	066a      	lsls	r2, r5, #25
 8005120:	d5fb      	bpl.n	800511a <_printf_i+0x192>
 8005122:	8019      	strh	r1, [r3, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	4665      	mov	r5, ip
 8005128:	6123      	str	r3, [r4, #16]
 800512a:	e7b9      	b.n	80050a0 <_printf_i+0x118>
 800512c:	6813      	ldr	r3, [r2, #0]
 800512e:	1d19      	adds	r1, r3, #4
 8005130:	6011      	str	r1, [r2, #0]
 8005132:	681d      	ldr	r5, [r3, #0]
 8005134:	6862      	ldr	r2, [r4, #4]
 8005136:	2100      	movs	r1, #0
 8005138:	4628      	mov	r0, r5
 800513a:	f000 f837 	bl	80051ac <memchr>
 800513e:	b108      	cbz	r0, 8005144 <_printf_i+0x1bc>
 8005140:	1b40      	subs	r0, r0, r5
 8005142:	6060      	str	r0, [r4, #4]
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	2300      	movs	r3, #0
 800514a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800514e:	e7a7      	b.n	80050a0 <_printf_i+0x118>
 8005150:	6923      	ldr	r3, [r4, #16]
 8005152:	462a      	mov	r2, r5
 8005154:	4639      	mov	r1, r7
 8005156:	4630      	mov	r0, r6
 8005158:	47c0      	blx	r8
 800515a:	3001      	adds	r0, #1
 800515c:	d0aa      	beq.n	80050b4 <_printf_i+0x12c>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	079b      	lsls	r3, r3, #30
 8005162:	d413      	bmi.n	800518c <_printf_i+0x204>
 8005164:	68e0      	ldr	r0, [r4, #12]
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	4298      	cmp	r0, r3
 800516a:	bfb8      	it	lt
 800516c:	4618      	movlt	r0, r3
 800516e:	e7a3      	b.n	80050b8 <_printf_i+0x130>
 8005170:	2301      	movs	r3, #1
 8005172:	464a      	mov	r2, r9
 8005174:	4639      	mov	r1, r7
 8005176:	4630      	mov	r0, r6
 8005178:	47c0      	blx	r8
 800517a:	3001      	adds	r0, #1
 800517c:	d09a      	beq.n	80050b4 <_printf_i+0x12c>
 800517e:	3501      	adds	r5, #1
 8005180:	68e3      	ldr	r3, [r4, #12]
 8005182:	9a03      	ldr	r2, [sp, #12]
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	42ab      	cmp	r3, r5
 8005188:	dcf2      	bgt.n	8005170 <_printf_i+0x1e8>
 800518a:	e7eb      	b.n	8005164 <_printf_i+0x1dc>
 800518c:	2500      	movs	r5, #0
 800518e:	f104 0919 	add.w	r9, r4, #25
 8005192:	e7f5      	b.n	8005180 <_printf_i+0x1f8>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ac      	bne.n	80050f2 <_printf_i+0x16a>
 8005198:	7803      	ldrb	r3, [r0, #0]
 800519a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800519e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a2:	e76c      	b.n	800507e <_printf_i+0xf6>
 80051a4:	080058f5 	.word	0x080058f5
 80051a8:	08005906 	.word	0x08005906

080051ac <memchr>:
 80051ac:	b510      	push	{r4, lr}
 80051ae:	b2c9      	uxtb	r1, r1
 80051b0:	4402      	add	r2, r0
 80051b2:	4290      	cmp	r0, r2
 80051b4:	4603      	mov	r3, r0
 80051b6:	d101      	bne.n	80051bc <memchr+0x10>
 80051b8:	2300      	movs	r3, #0
 80051ba:	e003      	b.n	80051c4 <memchr+0x18>
 80051bc:	781c      	ldrb	r4, [r3, #0]
 80051be:	3001      	adds	r0, #1
 80051c0:	428c      	cmp	r4, r1
 80051c2:	d1f6      	bne.n	80051b2 <memchr+0x6>
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd10      	pop	{r4, pc}

080051c8 <memcpy>:
 80051c8:	b510      	push	{r4, lr}
 80051ca:	1e43      	subs	r3, r0, #1
 80051cc:	440a      	add	r2, r1
 80051ce:	4291      	cmp	r1, r2
 80051d0:	d100      	bne.n	80051d4 <memcpy+0xc>
 80051d2:	bd10      	pop	{r4, pc}
 80051d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051dc:	e7f7      	b.n	80051ce <memcpy+0x6>

080051de <memmove>:
 80051de:	4288      	cmp	r0, r1
 80051e0:	b510      	push	{r4, lr}
 80051e2:	eb01 0302 	add.w	r3, r1, r2
 80051e6:	d807      	bhi.n	80051f8 <memmove+0x1a>
 80051e8:	1e42      	subs	r2, r0, #1
 80051ea:	4299      	cmp	r1, r3
 80051ec:	d00a      	beq.n	8005204 <memmove+0x26>
 80051ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80051f6:	e7f8      	b.n	80051ea <memmove+0xc>
 80051f8:	4283      	cmp	r3, r0
 80051fa:	d9f5      	bls.n	80051e8 <memmove+0xa>
 80051fc:	1881      	adds	r1, r0, r2
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	42d3      	cmn	r3, r2
 8005202:	d100      	bne.n	8005206 <memmove+0x28>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800520a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800520e:	e7f7      	b.n	8005200 <memmove+0x22>

08005210 <_free_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4605      	mov	r5, r0
 8005214:	2900      	cmp	r1, #0
 8005216:	d043      	beq.n	80052a0 <_free_r+0x90>
 8005218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521c:	1f0c      	subs	r4, r1, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfb8      	it	lt
 8005222:	18e4      	addlt	r4, r4, r3
 8005224:	f000 f8d0 	bl	80053c8 <__malloc_lock>
 8005228:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <_free_r+0x94>)
 800522a:	6813      	ldr	r3, [r2, #0]
 800522c:	4610      	mov	r0, r2
 800522e:	b933      	cbnz	r3, 800523e <_free_r+0x2e>
 8005230:	6063      	str	r3, [r4, #4]
 8005232:	6014      	str	r4, [r2, #0]
 8005234:	4628      	mov	r0, r5
 8005236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800523a:	f000 b8c6 	b.w	80053ca <__malloc_unlock>
 800523e:	42a3      	cmp	r3, r4
 8005240:	d90b      	bls.n	800525a <_free_r+0x4a>
 8005242:	6821      	ldr	r1, [r4, #0]
 8005244:	1862      	adds	r2, r4, r1
 8005246:	4293      	cmp	r3, r2
 8005248:	bf01      	itttt	eq
 800524a:	681a      	ldreq	r2, [r3, #0]
 800524c:	685b      	ldreq	r3, [r3, #4]
 800524e:	1852      	addeq	r2, r2, r1
 8005250:	6022      	streq	r2, [r4, #0]
 8005252:	6063      	str	r3, [r4, #4]
 8005254:	6004      	str	r4, [r0, #0]
 8005256:	e7ed      	b.n	8005234 <_free_r+0x24>
 8005258:	4613      	mov	r3, r2
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	b10a      	cbz	r2, 8005262 <_free_r+0x52>
 800525e:	42a2      	cmp	r2, r4
 8005260:	d9fa      	bls.n	8005258 <_free_r+0x48>
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	1858      	adds	r0, r3, r1
 8005266:	42a0      	cmp	r0, r4
 8005268:	d10b      	bne.n	8005282 <_free_r+0x72>
 800526a:	6820      	ldr	r0, [r4, #0]
 800526c:	4401      	add	r1, r0
 800526e:	1858      	adds	r0, r3, r1
 8005270:	4282      	cmp	r2, r0
 8005272:	6019      	str	r1, [r3, #0]
 8005274:	d1de      	bne.n	8005234 <_free_r+0x24>
 8005276:	6810      	ldr	r0, [r2, #0]
 8005278:	6852      	ldr	r2, [r2, #4]
 800527a:	4401      	add	r1, r0
 800527c:	6019      	str	r1, [r3, #0]
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	e7d8      	b.n	8005234 <_free_r+0x24>
 8005282:	d902      	bls.n	800528a <_free_r+0x7a>
 8005284:	230c      	movs	r3, #12
 8005286:	602b      	str	r3, [r5, #0]
 8005288:	e7d4      	b.n	8005234 <_free_r+0x24>
 800528a:	6820      	ldr	r0, [r4, #0]
 800528c:	1821      	adds	r1, r4, r0
 800528e:	428a      	cmp	r2, r1
 8005290:	bf01      	itttt	eq
 8005292:	6811      	ldreq	r1, [r2, #0]
 8005294:	6852      	ldreq	r2, [r2, #4]
 8005296:	1809      	addeq	r1, r1, r0
 8005298:	6021      	streq	r1, [r4, #0]
 800529a:	6062      	str	r2, [r4, #4]
 800529c:	605c      	str	r4, [r3, #4]
 800529e:	e7c9      	b.n	8005234 <_free_r+0x24>
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
 80052a2:	bf00      	nop
 80052a4:	20000090 	.word	0x20000090

080052a8 <_malloc_r>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	1ccd      	adds	r5, r1, #3
 80052ac:	f025 0503 	bic.w	r5, r5, #3
 80052b0:	3508      	adds	r5, #8
 80052b2:	2d0c      	cmp	r5, #12
 80052b4:	bf38      	it	cc
 80052b6:	250c      	movcc	r5, #12
 80052b8:	2d00      	cmp	r5, #0
 80052ba:	4606      	mov	r6, r0
 80052bc:	db01      	blt.n	80052c2 <_malloc_r+0x1a>
 80052be:	42a9      	cmp	r1, r5
 80052c0:	d903      	bls.n	80052ca <_malloc_r+0x22>
 80052c2:	230c      	movs	r3, #12
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	2000      	movs	r0, #0
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
 80052ca:	f000 f87d 	bl	80053c8 <__malloc_lock>
 80052ce:	4a21      	ldr	r2, [pc, #132]	; (8005354 <_malloc_r+0xac>)
 80052d0:	6814      	ldr	r4, [r2, #0]
 80052d2:	4621      	mov	r1, r4
 80052d4:	b991      	cbnz	r1, 80052fc <_malloc_r+0x54>
 80052d6:	4c20      	ldr	r4, [pc, #128]	; (8005358 <_malloc_r+0xb0>)
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	b91b      	cbnz	r3, 80052e4 <_malloc_r+0x3c>
 80052dc:	4630      	mov	r0, r6
 80052de:	f000 f863 	bl	80053a8 <_sbrk_r>
 80052e2:	6020      	str	r0, [r4, #0]
 80052e4:	4629      	mov	r1, r5
 80052e6:	4630      	mov	r0, r6
 80052e8:	f000 f85e 	bl	80053a8 <_sbrk_r>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d124      	bne.n	800533a <_malloc_r+0x92>
 80052f0:	230c      	movs	r3, #12
 80052f2:	4630      	mov	r0, r6
 80052f4:	6033      	str	r3, [r6, #0]
 80052f6:	f000 f868 	bl	80053ca <__malloc_unlock>
 80052fa:	e7e4      	b.n	80052c6 <_malloc_r+0x1e>
 80052fc:	680b      	ldr	r3, [r1, #0]
 80052fe:	1b5b      	subs	r3, r3, r5
 8005300:	d418      	bmi.n	8005334 <_malloc_r+0x8c>
 8005302:	2b0b      	cmp	r3, #11
 8005304:	d90f      	bls.n	8005326 <_malloc_r+0x7e>
 8005306:	600b      	str	r3, [r1, #0]
 8005308:	18cc      	adds	r4, r1, r3
 800530a:	50cd      	str	r5, [r1, r3]
 800530c:	4630      	mov	r0, r6
 800530e:	f000 f85c 	bl	80053ca <__malloc_unlock>
 8005312:	f104 000b 	add.w	r0, r4, #11
 8005316:	1d23      	adds	r3, r4, #4
 8005318:	f020 0007 	bic.w	r0, r0, #7
 800531c:	1ac3      	subs	r3, r0, r3
 800531e:	d0d3      	beq.n	80052c8 <_malloc_r+0x20>
 8005320:	425a      	negs	r2, r3
 8005322:	50e2      	str	r2, [r4, r3]
 8005324:	e7d0      	b.n	80052c8 <_malloc_r+0x20>
 8005326:	684b      	ldr	r3, [r1, #4]
 8005328:	428c      	cmp	r4, r1
 800532a:	bf16      	itet	ne
 800532c:	6063      	strne	r3, [r4, #4]
 800532e:	6013      	streq	r3, [r2, #0]
 8005330:	460c      	movne	r4, r1
 8005332:	e7eb      	b.n	800530c <_malloc_r+0x64>
 8005334:	460c      	mov	r4, r1
 8005336:	6849      	ldr	r1, [r1, #4]
 8005338:	e7cc      	b.n	80052d4 <_malloc_r+0x2c>
 800533a:	1cc4      	adds	r4, r0, #3
 800533c:	f024 0403 	bic.w	r4, r4, #3
 8005340:	42a0      	cmp	r0, r4
 8005342:	d005      	beq.n	8005350 <_malloc_r+0xa8>
 8005344:	1a21      	subs	r1, r4, r0
 8005346:	4630      	mov	r0, r6
 8005348:	f000 f82e 	bl	80053a8 <_sbrk_r>
 800534c:	3001      	adds	r0, #1
 800534e:	d0cf      	beq.n	80052f0 <_malloc_r+0x48>
 8005350:	6025      	str	r5, [r4, #0]
 8005352:	e7db      	b.n	800530c <_malloc_r+0x64>
 8005354:	20000090 	.word	0x20000090
 8005358:	20000094 	.word	0x20000094

0800535c <_realloc_r>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	4607      	mov	r7, r0
 8005360:	4614      	mov	r4, r2
 8005362:	460e      	mov	r6, r1
 8005364:	b921      	cbnz	r1, 8005370 <_realloc_r+0x14>
 8005366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800536a:	4611      	mov	r1, r2
 800536c:	f7ff bf9c 	b.w	80052a8 <_malloc_r>
 8005370:	b922      	cbnz	r2, 800537c <_realloc_r+0x20>
 8005372:	f7ff ff4d 	bl	8005210 <_free_r>
 8005376:	4625      	mov	r5, r4
 8005378:	4628      	mov	r0, r5
 800537a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800537c:	f000 f826 	bl	80053cc <_malloc_usable_size_r>
 8005380:	42a0      	cmp	r0, r4
 8005382:	d20f      	bcs.n	80053a4 <_realloc_r+0x48>
 8005384:	4621      	mov	r1, r4
 8005386:	4638      	mov	r0, r7
 8005388:	f7ff ff8e 	bl	80052a8 <_malloc_r>
 800538c:	4605      	mov	r5, r0
 800538e:	2800      	cmp	r0, #0
 8005390:	d0f2      	beq.n	8005378 <_realloc_r+0x1c>
 8005392:	4631      	mov	r1, r6
 8005394:	4622      	mov	r2, r4
 8005396:	f7ff ff17 	bl	80051c8 <memcpy>
 800539a:	4631      	mov	r1, r6
 800539c:	4638      	mov	r0, r7
 800539e:	f7ff ff37 	bl	8005210 <_free_r>
 80053a2:	e7e9      	b.n	8005378 <_realloc_r+0x1c>
 80053a4:	4635      	mov	r5, r6
 80053a6:	e7e7      	b.n	8005378 <_realloc_r+0x1c>

080053a8 <_sbrk_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	2300      	movs	r3, #0
 80053ac:	4c05      	ldr	r4, [pc, #20]	; (80053c4 <_sbrk_r+0x1c>)
 80053ae:	4605      	mov	r5, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	f7fd f9e2 	bl	800277c <_sbrk>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_sbrk_r+0x1a>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_sbrk_r+0x1a>
 80053c0:	602b      	str	r3, [r5, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20000ab4 	.word	0x20000ab4

080053c8 <__malloc_lock>:
 80053c8:	4770      	bx	lr

080053ca <__malloc_unlock>:
 80053ca:	4770      	bx	lr

080053cc <_malloc_usable_size_r>:
 80053cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d0:	1f18      	subs	r0, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bfbc      	itt	lt
 80053d6:	580b      	ldrlt	r3, [r1, r0]
 80053d8:	18c0      	addlt	r0, r0, r3
 80053da:	4770      	bx	lr

080053dc <roundf>:
 80053dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80053e0:	3b7f      	subs	r3, #127	; 0x7f
 80053e2:	2b16      	cmp	r3, #22
 80053e4:	b510      	push	{r4, lr}
 80053e6:	4601      	mov	r1, r0
 80053e8:	dc14      	bgt.n	8005414 <roundf+0x38>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da07      	bge.n	80053fe <roundf+0x22>
 80053ee:	3301      	adds	r3, #1
 80053f0:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80053f4:	d101      	bne.n	80053fa <roundf+0x1e>
 80053f6:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80053fa:	4608      	mov	r0, r1
 80053fc:	bd10      	pop	{r4, pc}
 80053fe:	4a08      	ldr	r2, [pc, #32]	; (8005420 <roundf+0x44>)
 8005400:	411a      	asrs	r2, r3
 8005402:	4210      	tst	r0, r2
 8005404:	d0f9      	beq.n	80053fa <roundf+0x1e>
 8005406:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800540a:	4119      	asrs	r1, r3
 800540c:	4401      	add	r1, r0
 800540e:	ea21 0102 	bic.w	r1, r1, r2
 8005412:	e7f2      	b.n	80053fa <roundf+0x1e>
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d1f0      	bne.n	80053fa <roundf+0x1e>
 8005418:	f7fb fac6 	bl	80009a8 <__addsf3>
 800541c:	4601      	mov	r1, r0
 800541e:	e7ec      	b.n	80053fa <roundf+0x1e>
 8005420:	007fffff 	.word	0x007fffff

08005424 <_init>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	bf00      	nop
 8005428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542a:	bc08      	pop	{r3}
 800542c:	469e      	mov	lr, r3
 800542e:	4770      	bx	lr

08005430 <_fini>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	bf00      	nop
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr
