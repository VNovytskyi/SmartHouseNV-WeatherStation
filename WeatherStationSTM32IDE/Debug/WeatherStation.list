
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08008f88  08008f88  00018f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095d0  080095d0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095d8  080095d8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095d8  080095d8  000195d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080095e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001dc  080097bc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  080097bc  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d067  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020a5  00000000  00000000  0002d26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  0002f318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  00030098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001552f  00000000  00000000  00030d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a96b  00000000  00000000  0004625f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075bb0  00000000  00000000  00050bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c677a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004338  00000000  00000000  000c67f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f6c 	.word	0x08008f6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008f6c 	.word	0x08008f6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <__aeabi_ldivmod>:
 8001030:	b97b      	cbnz	r3, 8001052 <__aeabi_ldivmod+0x22>
 8001032:	b972      	cbnz	r2, 8001052 <__aeabi_ldivmod+0x22>
 8001034:	2900      	cmp	r1, #0
 8001036:	bfbe      	ittt	lt
 8001038:	2000      	movlt	r0, #0
 800103a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800103e:	e006      	blt.n	800104e <__aeabi_ldivmod+0x1e>
 8001040:	bf08      	it	eq
 8001042:	2800      	cmpeq	r0, #0
 8001044:	bf1c      	itt	ne
 8001046:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800104a:	f04f 30ff 	movne.w	r0, #4294967295
 800104e:	f000 b9a7 	b.w	80013a0 <__aeabi_idiv0>
 8001052:	f1ad 0c08 	sub.w	ip, sp, #8
 8001056:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800105a:	2900      	cmp	r1, #0
 800105c:	db09      	blt.n	8001072 <__aeabi_ldivmod+0x42>
 800105e:	2b00      	cmp	r3, #0
 8001060:	db1a      	blt.n	8001098 <__aeabi_ldivmod+0x68>
 8001062:	f000 f835 	bl	80010d0 <__udivmoddi4>
 8001066:	f8dd e004 	ldr.w	lr, [sp, #4]
 800106a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800106e:	b004      	add	sp, #16
 8001070:	4770      	bx	lr
 8001072:	4240      	negs	r0, r0
 8001074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	db1b      	blt.n	80010b4 <__aeabi_ldivmod+0x84>
 800107c:	f000 f828 	bl	80010d0 <__udivmoddi4>
 8001080:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001088:	b004      	add	sp, #16
 800108a:	4240      	negs	r0, r0
 800108c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001090:	4252      	negs	r2, r2
 8001092:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001096:	4770      	bx	lr
 8001098:	4252      	negs	r2, r2
 800109a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800109e:	f000 f817 	bl	80010d0 <__udivmoddi4>
 80010a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010aa:	b004      	add	sp, #16
 80010ac:	4240      	negs	r0, r0
 80010ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b2:	4770      	bx	lr
 80010b4:	4252      	negs	r2, r2
 80010b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ba:	f000 f809 	bl	80010d0 <__udivmoddi4>
 80010be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c6:	b004      	add	sp, #16
 80010c8:	4252      	negs	r2, r2
 80010ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	468c      	mov	ip, r1
 80010d6:	4604      	mov	r4, r0
 80010d8:	9e08      	ldr	r6, [sp, #32]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d14b      	bne.n	8001176 <__udivmoddi4+0xa6>
 80010de:	428a      	cmp	r2, r1
 80010e0:	4615      	mov	r5, r2
 80010e2:	d967      	bls.n	80011b4 <__udivmoddi4+0xe4>
 80010e4:	fab2 f282 	clz	r2, r2
 80010e8:	b14a      	cbz	r2, 80010fe <__udivmoddi4+0x2e>
 80010ea:	f1c2 0720 	rsb	r7, r2, #32
 80010ee:	fa01 f302 	lsl.w	r3, r1, r2
 80010f2:	fa20 f707 	lsr.w	r7, r0, r7
 80010f6:	4095      	lsls	r5, r2
 80010f8:	ea47 0c03 	orr.w	ip, r7, r3
 80010fc:	4094      	lsls	r4, r2
 80010fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001102:	fbbc f7fe 	udiv	r7, ip, lr
 8001106:	fa1f f885 	uxth.w	r8, r5
 800110a:	fb0e c317 	mls	r3, lr, r7, ip
 800110e:	fb07 f908 	mul.w	r9, r7, r8
 8001112:	0c21      	lsrs	r1, r4, #16
 8001114:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001118:	4599      	cmp	r9, r3
 800111a:	d909      	bls.n	8001130 <__udivmoddi4+0x60>
 800111c:	18eb      	adds	r3, r5, r3
 800111e:	f107 31ff 	add.w	r1, r7, #4294967295
 8001122:	f080 811c 	bcs.w	800135e <__udivmoddi4+0x28e>
 8001126:	4599      	cmp	r9, r3
 8001128:	f240 8119 	bls.w	800135e <__udivmoddi4+0x28e>
 800112c:	3f02      	subs	r7, #2
 800112e:	442b      	add	r3, r5
 8001130:	eba3 0309 	sub.w	r3, r3, r9
 8001134:	fbb3 f0fe 	udiv	r0, r3, lr
 8001138:	fb0e 3310 	mls	r3, lr, r0, r3
 800113c:	fb00 f108 	mul.w	r1, r0, r8
 8001140:	b2a4      	uxth	r4, r4
 8001142:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001146:	42a1      	cmp	r1, r4
 8001148:	d909      	bls.n	800115e <__udivmoddi4+0x8e>
 800114a:	192c      	adds	r4, r5, r4
 800114c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001150:	f080 8107 	bcs.w	8001362 <__udivmoddi4+0x292>
 8001154:	42a1      	cmp	r1, r4
 8001156:	f240 8104 	bls.w	8001362 <__udivmoddi4+0x292>
 800115a:	3802      	subs	r0, #2
 800115c:	442c      	add	r4, r5
 800115e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001162:	2700      	movs	r7, #0
 8001164:	1a64      	subs	r4, r4, r1
 8001166:	b11e      	cbz	r6, 8001170 <__udivmoddi4+0xa0>
 8001168:	2300      	movs	r3, #0
 800116a:	40d4      	lsrs	r4, r2
 800116c:	e9c6 4300 	strd	r4, r3, [r6]
 8001170:	4639      	mov	r1, r7
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d909      	bls.n	800118e <__udivmoddi4+0xbe>
 800117a:	2e00      	cmp	r6, #0
 800117c:	f000 80ec 	beq.w	8001358 <__udivmoddi4+0x288>
 8001180:	2700      	movs	r7, #0
 8001182:	e9c6 0100 	strd	r0, r1, [r6]
 8001186:	4638      	mov	r0, r7
 8001188:	4639      	mov	r1, r7
 800118a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118e:	fab3 f783 	clz	r7, r3
 8001192:	2f00      	cmp	r7, #0
 8001194:	d148      	bne.n	8001228 <__udivmoddi4+0x158>
 8001196:	428b      	cmp	r3, r1
 8001198:	d302      	bcc.n	80011a0 <__udivmoddi4+0xd0>
 800119a:	4282      	cmp	r2, r0
 800119c:	f200 80fb 	bhi.w	8001396 <__udivmoddi4+0x2c6>
 80011a0:	1a84      	subs	r4, r0, r2
 80011a2:	eb61 0303 	sbc.w	r3, r1, r3
 80011a6:	2001      	movs	r0, #1
 80011a8:	469c      	mov	ip, r3
 80011aa:	2e00      	cmp	r6, #0
 80011ac:	d0e0      	beq.n	8001170 <__udivmoddi4+0xa0>
 80011ae:	e9c6 4c00 	strd	r4, ip, [r6]
 80011b2:	e7dd      	b.n	8001170 <__udivmoddi4+0xa0>
 80011b4:	b902      	cbnz	r2, 80011b8 <__udivmoddi4+0xe8>
 80011b6:	deff      	udf	#255	; 0xff
 80011b8:	fab2 f282 	clz	r2, r2
 80011bc:	2a00      	cmp	r2, #0
 80011be:	f040 808f 	bne.w	80012e0 <__udivmoddi4+0x210>
 80011c2:	2701      	movs	r7, #1
 80011c4:	1b49      	subs	r1, r1, r5
 80011c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80011ca:	fa1f f985 	uxth.w	r9, r5
 80011ce:	fbb1 fef8 	udiv	lr, r1, r8
 80011d2:	fb08 111e 	mls	r1, r8, lr, r1
 80011d6:	fb09 f00e 	mul.w	r0, r9, lr
 80011da:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80011de:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d907      	bls.n	80011f6 <__udivmoddi4+0x126>
 80011e6:	18eb      	adds	r3, r5, r3
 80011e8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80011ec:	d202      	bcs.n	80011f4 <__udivmoddi4+0x124>
 80011ee:	4298      	cmp	r0, r3
 80011f0:	f200 80cd 	bhi.w	800138e <__udivmoddi4+0x2be>
 80011f4:	468e      	mov	lr, r1
 80011f6:	1a1b      	subs	r3, r3, r0
 80011f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80011fc:	fb08 3310 	mls	r3, r8, r0, r3
 8001200:	fb09 f900 	mul.w	r9, r9, r0
 8001204:	b2a4      	uxth	r4, r4
 8001206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800120a:	45a1      	cmp	r9, r4
 800120c:	d907      	bls.n	800121e <__udivmoddi4+0x14e>
 800120e:	192c      	adds	r4, r5, r4
 8001210:	f100 33ff 	add.w	r3, r0, #4294967295
 8001214:	d202      	bcs.n	800121c <__udivmoddi4+0x14c>
 8001216:	45a1      	cmp	r9, r4
 8001218:	f200 80b6 	bhi.w	8001388 <__udivmoddi4+0x2b8>
 800121c:	4618      	mov	r0, r3
 800121e:	eba4 0409 	sub.w	r4, r4, r9
 8001222:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001226:	e79e      	b.n	8001166 <__udivmoddi4+0x96>
 8001228:	f1c7 0520 	rsb	r5, r7, #32
 800122c:	40bb      	lsls	r3, r7
 800122e:	fa22 fc05 	lsr.w	ip, r2, r5
 8001232:	ea4c 0c03 	orr.w	ip, ip, r3
 8001236:	fa21 f405 	lsr.w	r4, r1, r5
 800123a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800123e:	fbb4 f9fe 	udiv	r9, r4, lr
 8001242:	fa1f f88c 	uxth.w	r8, ip
 8001246:	fb0e 4419 	mls	r4, lr, r9, r4
 800124a:	fa20 f305 	lsr.w	r3, r0, r5
 800124e:	40b9      	lsls	r1, r7
 8001250:	fb09 fa08 	mul.w	sl, r9, r8
 8001254:	4319      	orrs	r1, r3
 8001256:	0c0b      	lsrs	r3, r1, #16
 8001258:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800125c:	45a2      	cmp	sl, r4
 800125e:	fa02 f207 	lsl.w	r2, r2, r7
 8001262:	fa00 f307 	lsl.w	r3, r0, r7
 8001266:	d90b      	bls.n	8001280 <__udivmoddi4+0x1b0>
 8001268:	eb1c 0404 	adds.w	r4, ip, r4
 800126c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001270:	f080 8088 	bcs.w	8001384 <__udivmoddi4+0x2b4>
 8001274:	45a2      	cmp	sl, r4
 8001276:	f240 8085 	bls.w	8001384 <__udivmoddi4+0x2b4>
 800127a:	f1a9 0902 	sub.w	r9, r9, #2
 800127e:	4464      	add	r4, ip
 8001280:	eba4 040a 	sub.w	r4, r4, sl
 8001284:	fbb4 f0fe 	udiv	r0, r4, lr
 8001288:	fb0e 4410 	mls	r4, lr, r0, r4
 800128c:	fb00 fa08 	mul.w	sl, r0, r8
 8001290:	b289      	uxth	r1, r1
 8001292:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001296:	45a2      	cmp	sl, r4
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x1dc>
 800129a:	eb1c 0404 	adds.w	r4, ip, r4
 800129e:	f100 31ff 	add.w	r1, r0, #4294967295
 80012a2:	d26b      	bcs.n	800137c <__udivmoddi4+0x2ac>
 80012a4:	45a2      	cmp	sl, r4
 80012a6:	d969      	bls.n	800137c <__udivmoddi4+0x2ac>
 80012a8:	3802      	subs	r0, #2
 80012aa:	4464      	add	r4, ip
 80012ac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012b0:	fba0 8902 	umull	r8, r9, r0, r2
 80012b4:	eba4 040a 	sub.w	r4, r4, sl
 80012b8:	454c      	cmp	r4, r9
 80012ba:	4641      	mov	r1, r8
 80012bc:	46ce      	mov	lr, r9
 80012be:	d354      	bcc.n	800136a <__udivmoddi4+0x29a>
 80012c0:	d051      	beq.n	8001366 <__udivmoddi4+0x296>
 80012c2:	2e00      	cmp	r6, #0
 80012c4:	d069      	beq.n	800139a <__udivmoddi4+0x2ca>
 80012c6:	1a5a      	subs	r2, r3, r1
 80012c8:	eb64 040e 	sbc.w	r4, r4, lr
 80012cc:	fa04 f505 	lsl.w	r5, r4, r5
 80012d0:	fa22 f307 	lsr.w	r3, r2, r7
 80012d4:	40fc      	lsrs	r4, r7
 80012d6:	431d      	orrs	r5, r3
 80012d8:	e9c6 5400 	strd	r5, r4, [r6]
 80012dc:	2700      	movs	r7, #0
 80012de:	e747      	b.n	8001170 <__udivmoddi4+0xa0>
 80012e0:	4095      	lsls	r5, r2
 80012e2:	f1c2 0320 	rsb	r3, r2, #32
 80012e6:	fa21 f003 	lsr.w	r0, r1, r3
 80012ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012ee:	fbb0 f7f8 	udiv	r7, r0, r8
 80012f2:	fa1f f985 	uxth.w	r9, r5
 80012f6:	fb08 0017 	mls	r0, r8, r7, r0
 80012fa:	fa24 f303 	lsr.w	r3, r4, r3
 80012fe:	4091      	lsls	r1, r2
 8001300:	fb07 fc09 	mul.w	ip, r7, r9
 8001304:	430b      	orrs	r3, r1
 8001306:	0c19      	lsrs	r1, r3, #16
 8001308:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800130c:	458c      	cmp	ip, r1
 800130e:	fa04 f402 	lsl.w	r4, r4, r2
 8001312:	d907      	bls.n	8001324 <__udivmoddi4+0x254>
 8001314:	1869      	adds	r1, r5, r1
 8001316:	f107 30ff 	add.w	r0, r7, #4294967295
 800131a:	d231      	bcs.n	8001380 <__udivmoddi4+0x2b0>
 800131c:	458c      	cmp	ip, r1
 800131e:	d92f      	bls.n	8001380 <__udivmoddi4+0x2b0>
 8001320:	3f02      	subs	r7, #2
 8001322:	4429      	add	r1, r5
 8001324:	eba1 010c 	sub.w	r1, r1, ip
 8001328:	fbb1 f0f8 	udiv	r0, r1, r8
 800132c:	fb08 1c10 	mls	ip, r8, r0, r1
 8001330:	fb00 fe09 	mul.w	lr, r0, r9
 8001334:	b299      	uxth	r1, r3
 8001336:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800133a:	458e      	cmp	lr, r1
 800133c:	d907      	bls.n	800134e <__udivmoddi4+0x27e>
 800133e:	1869      	adds	r1, r5, r1
 8001340:	f100 33ff 	add.w	r3, r0, #4294967295
 8001344:	d218      	bcs.n	8001378 <__udivmoddi4+0x2a8>
 8001346:	458e      	cmp	lr, r1
 8001348:	d916      	bls.n	8001378 <__udivmoddi4+0x2a8>
 800134a:	3802      	subs	r0, #2
 800134c:	4429      	add	r1, r5
 800134e:	eba1 010e 	sub.w	r1, r1, lr
 8001352:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001356:	e73a      	b.n	80011ce <__udivmoddi4+0xfe>
 8001358:	4637      	mov	r7, r6
 800135a:	4630      	mov	r0, r6
 800135c:	e708      	b.n	8001170 <__udivmoddi4+0xa0>
 800135e:	460f      	mov	r7, r1
 8001360:	e6e6      	b.n	8001130 <__udivmoddi4+0x60>
 8001362:	4618      	mov	r0, r3
 8001364:	e6fb      	b.n	800115e <__udivmoddi4+0x8e>
 8001366:	4543      	cmp	r3, r8
 8001368:	d2ab      	bcs.n	80012c2 <__udivmoddi4+0x1f2>
 800136a:	ebb8 0102 	subs.w	r1, r8, r2
 800136e:	eb69 020c 	sbc.w	r2, r9, ip
 8001372:	3801      	subs	r0, #1
 8001374:	4696      	mov	lr, r2
 8001376:	e7a4      	b.n	80012c2 <__udivmoddi4+0x1f2>
 8001378:	4618      	mov	r0, r3
 800137a:	e7e8      	b.n	800134e <__udivmoddi4+0x27e>
 800137c:	4608      	mov	r0, r1
 800137e:	e795      	b.n	80012ac <__udivmoddi4+0x1dc>
 8001380:	4607      	mov	r7, r0
 8001382:	e7cf      	b.n	8001324 <__udivmoddi4+0x254>
 8001384:	4681      	mov	r9, r0
 8001386:	e77b      	b.n	8001280 <__udivmoddi4+0x1b0>
 8001388:	3802      	subs	r0, #2
 800138a:	442c      	add	r4, r5
 800138c:	e747      	b.n	800121e <__udivmoddi4+0x14e>
 800138e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001392:	442b      	add	r3, r5
 8001394:	e72f      	b.n	80011f6 <__udivmoddi4+0x126>
 8001396:	4638      	mov	r0, r7
 8001398:	e707      	b.n	80011aa <__udivmoddi4+0xda>
 800139a:	4637      	mov	r7, r6
 800139c:	e6e8      	b.n	8001170 <__udivmoddi4+0xa0>
 800139e:	bf00      	nop

080013a0 <__aeabi_idiv0>:
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop

080013a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013a8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <__NVIC_SystemReset+0x20>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013b4:	4903      	ldr	r1, [pc, #12]	; (80013c4 <__NVIC_SystemReset+0x20>)
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_SystemReset+0x24>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	60cb      	str	r3, [r1, #12]
 80013bc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <__NVIC_SystemReset+0x1c>
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	05fa0004 	.word	0x05fa0004

080013cc <BME280_Error>:
BME280_CalibData CalibData;
int32_t temper_int;
BME280_WeatherData BME280_CurrentWeatherData;
//------------------------------------------------
void BME280_Error(char *errorMessage)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
    PC_Send(errorMessage);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 ffb1 	bl	800233c <PC_Send>
    
    while (1)
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <BME280_Error+0x20>)
 80013e0:	f002 fda2 	bl	8003f28 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f001 fe05 	bl	8002ff4 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013ea:	e7f6      	b.n	80013da <BME280_Error+0xe>
 80013ec:	40011000 	.word	0x40011000

080013f0 <I2Cx_WriteData>:
    }
}
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
 80013fa:	460b      	mov	r3, r1
 80013fc:	717b      	strb	r3, [r7, #5]
 80013fe:	4613      	mov	r3, r2
 8001400:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8001406:	797b      	ldrb	r3, [r7, #5]
 8001408:	b29a      	uxth	r2, r3
 800140a:	88f9      	ldrh	r1, [r7, #6]
 800140c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2301      	movs	r3, #1
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	4807      	ldr	r0, [pc, #28]	; (800143c <I2Cx_WriteData+0x4c>)
 800141e:	f002 fec3 	bl	80041a8 <HAL_I2C_Mem_Write>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
  
    if(status != HAL_OK) 
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <I2Cx_WriteData+0x42>
        BME280_Error("[ ERROR ] I2Cx_WriteData: HAL_I2C_Mem_Write\n");
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <I2Cx_WriteData+0x50>)
 800142e:	f7ff ffcd 	bl	80013cc <BME280_Error>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000230 	.word	0x20000230
 8001440:	08008f88 	.word	0x08008f88

08001444 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af04      	add	r7, sp, #16
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 800145c:	797b      	ldrb	r3, [r7, #5]
 800145e:	b29a      	uxth	r2, r3
 8001460:	88f9      	ldrh	r1, [r7, #6]
 8001462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	2301      	movs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	f107 030e 	add.w	r3, r7, #14
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	4808      	ldr	r0, [pc, #32]	; (8001498 <I2Cx_ReadData+0x54>)
 8001476:	f002 ff91 	bl	800439c <HAL_I2C_Mem_Read>
 800147a:	4603      	mov	r3, r0
 800147c:	73fb      	strb	r3, [r7, #15]
  
  if(status != HAL_OK) 
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <I2Cx_ReadData+0x4a>
  {
      BME280_Error("[ ERROR ] I2Cx_ReadData: HAL_I2C_Mem_Read");
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <I2Cx_ReadData+0x58>)
 8001486:	f7ff ffa1 	bl	80013cc <BME280_Error>
      return 0;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <I2Cx_ReadData+0x4c>
  }
  
  return value;
 800148e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000230 	.word	0x20000230
 800149c:	08008fb8 	.word	0x08008fb8

080014a0 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af04      	add	r7, sp, #16
 80014a6:	4603      	mov	r3, r0
 80014a8:	603a      	str	r2, [r7, #0]
 80014aa:	80fb      	strh	r3, [r7, #6]
 80014ac:	460b      	mov	r3, r1
 80014ae:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 80014b4:	797b      	ldrb	r3, [r7, #5]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	88f9      	ldrh	r1, [r7, #6]
 80014ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	2302      	movs	r3, #2
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <I2Cx_ReadData16+0x48>)
 80014cc:	f002 ff66 	bl	800439c <HAL_I2C_Mem_Read>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
  
  if(status != HAL_OK) 
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <I2Cx_ReadData16+0x40>
  {
      BME280_Error("[ ERROR ] I2Cx_ReadData16: HAL_I2C_Mem_Read");
 80014da:	4804      	ldr	r0, [pc, #16]	; (80014ec <I2Cx_ReadData16+0x4c>)
 80014dc:	f7ff ff76 	bl	80013cc <BME280_Error>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000230 	.word	0x20000230
 80014ec:	08008fe4 	.word	0x08008fe4

080014f0 <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af04      	add	r7, sp, #16
 80014f6:	4603      	mov	r3, r0
 80014f8:	603a      	str	r2, [r7, #0]
 80014fa:	80fb      	strh	r3, [r7, #6]
 80014fc:	460b      	mov	r3, r1
 80014fe:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	b29a      	uxth	r2, r3
 8001508:	88f9      	ldrh	r1, [r7, #6]
 800150a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2303      	movs	r3, #3
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <I2Cx_ReadData24+0x48>)
 800151c:	f002 ff3e 	bl	800439c <HAL_I2C_Mem_Read>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
  
  if(status != HAL_OK) 
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <I2Cx_ReadData24+0x40>
  {
      BME280_Error("[ ERROR ] I2Cx_ReadData24: HAL_I2C_Mem_Read");
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <I2Cx_ReadData24+0x4c>)
 800152c:	f7ff ff4e 	bl	80013cc <BME280_Error>
  }
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000230 	.word	0x20000230
 800153c:	08009010 	.word	0x08009010

08001540 <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8001550:	79ba      	ldrb	r2, [r7, #6]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4619      	mov	r1, r3
 8001556:	20ec      	movs	r0, #236	; 0xec
 8001558:	f7ff ff4a 	bl	80013f0 <I2Cx_WriteData>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4619      	mov	r1, r3
 8001572:	20ec      	movs	r0, #236	; 0xec
 8001574:	f7ff ff66 	bl	8001444 <I2Cx_ReadData>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
  return res;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	6039      	str	r1, [r7, #0]
 8001590:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	20ec      	movs	r0, #236	; 0xec
 800159a:	f7ff ff81 	bl	80014a0 <I2Cx_ReadData16>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	6039      	str	r1, [r7, #0]
 80015b0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	20ec      	movs	r0, #236	; 0xec
 80015ba:	f7ff ff71 	bl	80014a0 <I2Cx_ReadData16>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	6039      	str	r1, [r7, #0]
 80015d0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	20ec      	movs	r0, #236	; 0xec
 80015da:	f7ff ff61 	bl	80014a0 <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	801a      	strh	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	6039      	str	r1, [r7, #0]
 800160c:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	20ec      	movs	r0, #236	; 0xec
 8001616:	f7ff ff6b 	bl	80014f0 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0c1b      	lsrs	r3, r3, #16
 8001620:	b2da      	uxtb	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800162a:	431a      	orrs	r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001636:	4313      	orrs	r3, r2
 8001638:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 800164e:	20f3      	movs	r0, #243	; 0xf3
 8001650:	f7ff ff88 	bl	8001564 <BME280_ReadReg>
 8001654:	4603      	mov	r3, r0
 8001656:	f003 0309 	and.w	r3, r3, #9
 800165a:	71fb      	strb	r3, [r7, #7]
  return res;
 800165c:	79fb      	ldrb	r3, [r7, #7]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8001668:	b598      	push	{r3, r4, r7, lr}
 800166a:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1); 
 800166c:	4937      	ldr	r1, [pc, #220]	; (800174c <BME280_ReadCoefficients+0xe4>)
 800166e:	2088      	movs	r0, #136	; 0x88
 8001670:	f7ff ff89 	bl	8001586 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);  
 8001674:	4936      	ldr	r1, [pc, #216]	; (8001750 <BME280_ReadCoefficients+0xe8>)
 8001676:	208a      	movs	r0, #138	; 0x8a
 8001678:	f7ff ff95 	bl	80015a6 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);  
 800167c:	4935      	ldr	r1, [pc, #212]	; (8001754 <BME280_ReadCoefficients+0xec>)
 800167e:	208c      	movs	r0, #140	; 0x8c
 8001680:	f7ff ff91 	bl	80015a6 <BME280_ReadReg_S16>
  
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1); 
 8001684:	4934      	ldr	r1, [pc, #208]	; (8001758 <BME280_ReadCoefficients+0xf0>)
 8001686:	208e      	movs	r0, #142	; 0x8e
 8001688:	f7ff ff7d 	bl	8001586 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);  
 800168c:	4933      	ldr	r1, [pc, #204]	; (800175c <BME280_ReadCoefficients+0xf4>)
 800168e:	2090      	movs	r0, #144	; 0x90
 8001690:	f7ff ff89 	bl	80015a6 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);  
 8001694:	4932      	ldr	r1, [pc, #200]	; (8001760 <BME280_ReadCoefficients+0xf8>)
 8001696:	2092      	movs	r0, #146	; 0x92
 8001698:	f7ff ff85 	bl	80015a6 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4); 
 800169c:	4931      	ldr	r1, [pc, #196]	; (8001764 <BME280_ReadCoefficients+0xfc>)
 800169e:	2094      	movs	r0, #148	; 0x94
 80016a0:	f7ff ff81 	bl	80015a6 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);  
 80016a4:	4930      	ldr	r1, [pc, #192]	; (8001768 <BME280_ReadCoefficients+0x100>)
 80016a6:	2096      	movs	r0, #150	; 0x96
 80016a8:	f7ff ff7d 	bl	80015a6 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);  
 80016ac:	492f      	ldr	r1, [pc, #188]	; (800176c <BME280_ReadCoefficients+0x104>)
 80016ae:	2098      	movs	r0, #152	; 0x98
 80016b0:	f7ff ff79 	bl	80015a6 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 80016b4:	492e      	ldr	r1, [pc, #184]	; (8001770 <BME280_ReadCoefficients+0x108>)
 80016b6:	209a      	movs	r0, #154	; 0x9a
 80016b8:	f7ff ff75 	bl	80015a6 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 80016bc:	492d      	ldr	r1, [pc, #180]	; (8001774 <BME280_ReadCoefficients+0x10c>)
 80016be:	209c      	movs	r0, #156	; 0x9c
 80016c0:	f7ff ff71 	bl	80015a6 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 80016c4:	492c      	ldr	r1, [pc, #176]	; (8001778 <BME280_ReadCoefficients+0x110>)
 80016c6:	209e      	movs	r0, #158	; 0x9e
 80016c8:	f7ff ff6d 	bl	80015a6 <BME280_ReadReg_S16>
  
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 80016cc:	20a1      	movs	r0, #161	; 0xa1
 80016ce:	f7ff ff49 	bl	8001564 <BME280_ReadReg>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <BME280_ReadCoefficients+0xe4>)
 80016d8:	761a      	strb	r2, [r3, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2, &CalibData.dig_H2);
 80016da:	4928      	ldr	r1, [pc, #160]	; (800177c <BME280_ReadCoefficients+0x114>)
 80016dc:	20e1      	movs	r0, #225	; 0xe1
 80016de:	f7ff ff62 	bl	80015a6 <BME280_ReadReg_S16>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 80016e2:	20e3      	movs	r0, #227	; 0xe3
 80016e4:	f7ff ff3e 	bl	8001564 <BME280_ReadReg>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <BME280_ReadCoefficients+0xe4>)
 80016ee:	771a      	strb	r2, [r3, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 80016f0:	20e4      	movs	r0, #228	; 0xe4
 80016f2:	f7ff ff37 	bl	8001564 <BME280_ReadReg>
 80016f6:	4603      	mov	r3, r0
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	b21c      	sxth	r4, r3
 80016fc:	20e5      	movs	r0, #229	; 0xe5
 80016fe:	f7ff ff31 	bl	8001564 <BME280_ReadReg>
 8001702:	4603      	mov	r3, r0
 8001704:	b21b      	sxth	r3, r3
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	b21b      	sxth	r3, r3
 800170c:	4323      	orrs	r3, r4
 800170e:	b21a      	sxth	r2, r3
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <BME280_ReadCoefficients+0xe4>)
 8001712:	83da      	strh	r2, [r3, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8001714:	20e6      	movs	r0, #230	; 0xe6
 8001716:	f7ff ff25 	bl	8001564 <BME280_ReadReg>
 800171a:	4603      	mov	r3, r0
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	b21c      	sxth	r4, r3
 8001720:	20e5      	movs	r0, #229	; 0xe5
 8001722:	f7ff ff1f 	bl	8001564 <BME280_ReadReg>
 8001726:	4603      	mov	r3, r0
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	b2db      	uxtb	r3, r3
 800172c:	b21b      	sxth	r3, r3
 800172e:	4323      	orrs	r3, r4
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <BME280_ReadCoefficients+0xe4>)
 8001734:	841a      	strh	r2, [r3, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001736:	20e7      	movs	r0, #231	; 0xe7
 8001738:	f7ff ff14 	bl	8001564 <BME280_ReadReg>
 800173c:	4603      	mov	r3, r0
 800173e:	b25a      	sxtb	r2, r3
 8001740:	4b02      	ldr	r3, [pc, #8]	; (800174c <BME280_ReadCoefficients+0xe4>)
 8001742:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001746:	bf00      	nop
 8001748:	bd98      	pop	{r3, r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000388 	.word	0x20000388
 8001750:	2000038a 	.word	0x2000038a
 8001754:	2000038c 	.word	0x2000038c
 8001758:	2000038e 	.word	0x2000038e
 800175c:	20000390 	.word	0x20000390
 8001760:	20000392 	.word	0x20000392
 8001764:	20000394 	.word	0x20000394
 8001768:	20000396 	.word	0x20000396
 800176c:	20000398 	.word	0x20000398
 8001770:	2000039a 	.word	0x2000039a
 8001774:	2000039c 	.word	0x2000039c
 8001778:	2000039e 	.word	0x2000039e
 800177c:	200003a2 	.word	0x200003a2

08001780 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 800178a:	20f5      	movs	r0, #245	; 0xf5
 800178c:	f7ff feea 	bl	8001564 <BME280_ReadReg>
 8001790:	4603      	mov	r3, r0
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	f023 031f 	bic.w	r3, r3, #31
 80017a0:	b25a      	sxtb	r2, r3
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	4619      	mov	r1, r3
 80017b0:	20f5      	movs	r0, #245	; 0xf5
 80017b2:	f7ff fec5 	bl	8001540 <BME280_WriteReg>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 80017c8:	20f5      	movs	r0, #245	; 0xf5
 80017ca:	f7ff fecb 	bl	8001564 <BME280_ReadReg>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f023 031c 	bic.w	r3, r3, #28
 80017d4:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	f003 031c 	and.w	r3, r3, #28
 80017de:	b25a      	sxtb	r2, r3
 80017e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	4619      	mov	r1, r3
 80017ee:	20f5      	movs	r0, #245	; 0xf5
 80017f0:	f7ff fea6 	bl	8001540 <BME280_WriteReg>
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001806:	20f4      	movs	r0, #244	; 0xf4
 8001808:	f7ff feac 	bl	8001564 <BME280_ReadReg>
 800180c:	4603      	mov	r3, r0
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	f023 031f 	bic.w	r3, r3, #31
 800181c:	b25a      	sxtb	r2, r3
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4313      	orrs	r3, r2
 8001824:	b25b      	sxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	4619      	mov	r1, r3
 800182c:	20f4      	movs	r0, #244	; 0xf4
 800182e:	f7ff fe87 	bl	8001540 <BME280_WriteReg>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8001844:	20f4      	movs	r0, #244	; 0xf4
 8001846:	f7ff fe8d 	bl	8001564 <BME280_ReadReg>
 800184a:	4603      	mov	r3, r0
 800184c:	f023 031c 	bic.w	r3, r3, #28
 8001850:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	f003 031c 	and.w	r3, r3, #28
 800185a:	b25a      	sxtb	r2, r3
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001860:	4313      	orrs	r3, r2
 8001862:	b25b      	sxtb	r3, r3
 8001864:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	4619      	mov	r1, r3
 800186a:	20f4      	movs	r0, #244	; 0xf4
 800186c:	f7ff fe68 	bl	8001540 <BME280_WriteReg>
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8001882:	20f2      	movs	r0, #242	; 0xf2
 8001884:	f7ff fe6e 	bl	8001564 <BME280_ReadReg>
 8001888:	4603      	mov	r3, r0
 800188a:	f023 0307 	bic.w	r3, r3, #7
 800188e:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	b25a      	sxtb	r2, r3
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4313      	orrs	r3, r2
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	4619      	mov	r1, r3
 80018a8:	20f2      	movs	r0, #242	; 0xf2
 80018aa:	f7ff fe49 	bl	8001540 <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80018ae:	20f4      	movs	r0, #244	; 0xf4
 80018b0:	f7ff fe58 	bl	8001564 <BME280_ReadReg>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	4619      	mov	r1, r3
 80018bc:	20f4      	movs	r0, #244	; 0xf4
 80018be:	f7ff fe3f 	bl	8001540 <BME280_WriteReg>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 80018d4:	20f4      	movs	r0, #244	; 0xf4
 80018d6:	f7ff fe45 	bl	8001564 <BME280_ReadReg>
 80018da:	4603      	mov	r3, r0
 80018dc:	f023 0303 	bic.w	r3, r3, #3
 80018e0:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	b25a      	sxtb	r2, r3
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	4619      	mov	r1, r3
 80018fa:	20f4      	movs	r0, #244	; 0xf4
 80018fc:	f7ff fe20 	bl	8001540 <BME280_WriteReg>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	20fa      	movs	r0, #250	; 0xfa
 800191a:	f7ff fe72 	bl	8001602 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	08db      	lsrs	r3, r3, #3
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <BME280_ReadTemperature+0x98>)
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	0052      	lsls	r2, r2, #1
 800192e:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.dig_T2)) >> 11;
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <BME280_ReadTemperature+0x98>)
 8001932:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001936:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 800193a:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800193c:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <BME280_ReadTemperature+0x98>)
 8001944:	8812      	ldrh	r2, [r2, #0]
 8001946:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	0912      	lsrs	r2, r2, #4
 800194c:	4914      	ldr	r1, [pc, #80]	; (80019a0 <BME280_ReadTemperature+0x98>)
 800194e:	8809      	ldrh	r1, [r1, #0]
 8001950:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001952:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001956:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8001958:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <BME280_ReadTemperature+0x98>)
 800195a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800195e:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 8001962:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001964:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <BME280_ReadTemperature+0x9c>)
 800196e:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <BME280_ReadTemperature+0x9c>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3380      	adds	r3, #128	; 0x80
 800197c:	121b      	asrs	r3, r3, #8
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f98c 	bl	8000c9c <__aeabi_i2f>
 8001984:	4603      	mov	r3, r0
 8001986:	60fb      	str	r3, [r7, #12]
	temper_float /= 100.0f;
 8001988:	4907      	ldr	r1, [pc, #28]	; (80019a8 <BME280_ReadTemperature+0xa0>)
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff fa8e 	bl	8000eac <__aeabi_fdiv>
 8001990:	4603      	mov	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]
  return temper_float;
 8001994:	68fb      	ldr	r3, [r7, #12]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000388 	.word	0x20000388
 80019a4:	200003e4 	.word	0x200003e4
 80019a8:	42c80000 	.word	0x42c80000

080019ac <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 80019ac:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80019b0:	b08a      	sub	sp, #40	; 0x28
 80019b2:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 80019ba:	f7ff ffa5 	bl	8001908 <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 80019be:	463b      	mov	r3, r7
 80019c0:	4619      	mov	r1, r3
 80019c2:	20f7      	movs	r0, #247	; 0xf7
 80019c4:	f7ff fe1d 	bl	8001602 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	603b      	str	r3, [r7, #0]
	val1 = ((int64_t) temper_int) - 128000;
 80019ce:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <BME280_ReadPressure+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80019d8:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80019dc:	f142 34ff 	adc.w	r4, r2, #4294967295
 80019e0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	fb02 f203 	mul.w	r2, r2, r3
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	441a      	add	r2, r3
 80019f6:	69b9      	ldr	r1, [r7, #24]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fba1 3403 	umull	r3, r4, r1, r3
 80019fe:	4422      	add	r2, r4
 8001a00:	4614      	mov	r4, r2
 8001a02:	4a59      	ldr	r2, [pc, #356]	; (8001b68 <BME280_ReadPressure+0x1bc>)
 8001a04:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001a08:	b211      	sxth	r1, r2
 8001a0a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a0e:	fb01 f504 	mul.w	r5, r1, r4
 8001a12:	fb03 f002 	mul.w	r0, r3, r2
 8001a16:	4428      	add	r0, r5
 8001a18:	fba3 3401 	umull	r3, r4, r3, r1
 8001a1c:	1902      	adds	r2, r0, r4
 8001a1e:	4614      	mov	r4, r2
 8001a20:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001a24:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8001a28:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <BME280_ReadPressure+0x1bc>)
 8001a2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	fb04 f102 	mul.w	r1, r4, r2
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	fb03 f202 	mul.w	r2, r3, r2
 8001a40:	1888      	adds	r0, r1, r2
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	fba2 1203 	umull	r1, r2, r2, r3
 8001a48:	1883      	adds	r3, r0, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f04f 0500 	mov.w	r5, #0
 8001a50:	f04f 0600 	mov.w	r6, #0
 8001a54:	0456      	lsls	r6, r2, #17
 8001a56:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001a5a:	044d      	lsls	r5, r1, #17
 8001a5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a60:	186b      	adds	r3, r5, r1
 8001a62:	eb46 0402 	adc.w	r4, r6, r2
 8001a66:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <BME280_ReadPressure+0x1bc>)
 8001a6c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a70:	b219      	sxth	r1, r3
 8001a72:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a76:	f04f 0500 	mov.w	r5, #0
 8001a7a:	f04f 0600 	mov.w	r6, #0
 8001a7e:	00ce      	lsls	r6, r1, #3
 8001a80:	2500      	movs	r5, #0
 8001a82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a86:	186b      	adds	r3, r5, r1
 8001a88:	eb46 0402 	adc.w	r4, r6, r2
 8001a8c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	fb02 f203 	mul.w	r2, r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	69b9      	ldr	r1, [r7, #24]
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	441a      	add	r2, r3
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fba1 3403 	umull	r3, r4, r1, r3
 8001aaa:	4422      	add	r2, r4
 8001aac:	4614      	mov	r4, r2
 8001aae:	4a2e      	ldr	r2, [pc, #184]	; (8001b68 <BME280_ReadPressure+0x1bc>)
 8001ab0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001ab4:	b211      	sxth	r1, r2
 8001ab6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001aba:	fb01 f504 	mul.w	r5, r1, r4
 8001abe:	fb03 f002 	mul.w	r0, r3, r2
 8001ac2:	4428      	add	r0, r5
 8001ac4:	fba3 3401 	umull	r3, r4, r3, r1
 8001ac8:	1902      	adds	r2, r0, r4
 8001aca:	4614      	mov	r4, r2
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	0a19      	lsrs	r1, r3, #8
 8001ad6:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001ada:	1222      	asrs	r2, r4, #8
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <BME280_ReadPressure+0x1bc>)
 8001ade:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001ae8:	69b8      	ldr	r0, [r7, #24]
 8001aea:	fb04 f500 	mul.w	r5, r4, r0
 8001aee:	69f8      	ldr	r0, [r7, #28]
 8001af0:	fb03 f000 	mul.w	r0, r3, r0
 8001af4:	4428      	add	r0, r5
 8001af6:	69bd      	ldr	r5, [r7, #24]
 8001af8:	fba5 5603 	umull	r5, r6, r5, r3
 8001afc:	1983      	adds	r3, r0, r6
 8001afe:	461e      	mov	r6, r3
 8001b00:	f04f 0b00 	mov.w	fp, #0
 8001b04:	f04f 0c00 	mov.w	ip, #0
 8001b08:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001b0c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001b10:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8001b14:	eb1b 0301 	adds.w	r3, fp, r1
 8001b18:	eb4c 0402 	adc.w	r4, ip, r2
 8001b1c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 8001b20:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001b24:	1c19      	adds	r1, r3, #0
 8001b26:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <BME280_ReadPressure+0x1bc>)
 8001b2c:	88db      	ldrh	r3, [r3, #6]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f04f 0400 	mov.w	r4, #0
 8001b34:	fb03 f502 	mul.w	r5, r3, r2
 8001b38:	fb01 f004 	mul.w	r0, r1, r4
 8001b3c:	4428      	add	r0, r5
 8001b3e:	fba1 3403 	umull	r3, r4, r1, r3
 8001b42:	1902      	adds	r2, r0, r4
 8001b44:	4614      	mov	r4, r2
 8001b46:	f04f 0100 	mov.w	r1, #0
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	1061      	asrs	r1, r4, #1
 8001b50:	17e2      	asrs	r2, r4, #31
 8001b52:	e9c7 1206 	strd	r1, r2, [r7, #24]
	if (val1 == 0) {
 8001b56:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001b5a:	4323      	orrs	r3, r4
 8001b5c:	d106      	bne.n	8001b6c <BME280_ReadPressure+0x1c0>
		return 0; // avoid exception caused by division by zero
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e110      	b.n	8001d86 <BME280_ReadPressure+0x3da>
 8001b64:	200003e4 	.word	0x200003e4
 8001b68:	20000388 	.word	0x20000388
	}
	p = 1048576 - press_raw;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p = (((p << 31) - val2) * 3125) / val1;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	ea4f 0953 	mov.w	r9, r3, lsr #1
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001b86:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b8a:	4645      	mov	r5, r8
 8001b8c:	464e      	mov	r6, r9
 8001b8e:	1aed      	subs	r5, r5, r3
 8001b90:	eb66 0604 	sbc.w	r6, r6, r4
 8001b94:	46a8      	mov	r8, r5
 8001b96:	46b1      	mov	r9, r6
 8001b98:	eb18 0308 	adds.w	r3, r8, r8
 8001b9c:	eb49 0409 	adc.w	r4, r9, r9
 8001ba0:	4698      	mov	r8, r3
 8001ba2:	46a1      	mov	r9, r4
 8001ba4:	eb18 0805 	adds.w	r8, r8, r5
 8001ba8:	eb49 0906 	adc.w	r9, r9, r6
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001bb8:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001bbc:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001bc0:	eb18 0801 	adds.w	r8, r8, r1
 8001bc4:	eb49 0902 	adc.w	r9, r9, r2
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001bd4:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001bd8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001bdc:	4688      	mov	r8, r1
 8001bde:	4691      	mov	r9, r2
 8001be0:	eb18 0805 	adds.w	r8, r8, r5
 8001be4:	eb49 0906 	adc.w	r9, r9, r6
 8001be8:	f04f 0100 	mov.w	r1, #0
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001bf4:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001bf8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001bfc:	4688      	mov	r8, r1
 8001bfe:	4691      	mov	r9, r2
 8001c00:	eb18 0005 	adds.w	r0, r8, r5
 8001c04:	eb49 0106 	adc.w	r1, r9, r6
 8001c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c0c:	f7ff fa10 	bl	8001030 <__aeabi_ldivmod>
 8001c10:	4603      	mov	r3, r0
 8001c12:	460c      	mov	r4, r1
 8001c14:	e9c7 3402 	strd	r3, r4, [r7, #8]
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001c18:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <BME280_ReadPressure+0x3e4>)
 8001c1a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c24:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	f04f 0400 	mov.w	r4, #0
 8001c30:	0b6b      	lsrs	r3, r5, #13
 8001c32:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001c36:	1374      	asrs	r4, r6, #13
 8001c38:	fb03 f502 	mul.w	r5, r3, r2
 8001c3c:	fb01 f004 	mul.w	r0, r1, r4
 8001c40:	4428      	add	r0, r5
 8001c42:	fba1 1203 	umull	r1, r2, r1, r3
 8001c46:	1883      	adds	r3, r0, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	f04f 0400 	mov.w	r4, #0
 8001c56:	0b6b      	lsrs	r3, r5, #13
 8001c58:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001c5c:	1374      	asrs	r4, r6, #13
 8001c5e:	fb03 f502 	mul.w	r5, r3, r2
 8001c62:	fb01 f004 	mul.w	r0, r1, r4
 8001c66:	4428      	add	r0, r5
 8001c68:	fba1 1203 	umull	r1, r2, r1, r3
 8001c6c:	1883      	adds	r3, r0, r2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	f04f 0400 	mov.w	r4, #0
 8001c78:	0e4b      	lsrs	r3, r1, #25
 8001c7a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001c7e:	1654      	asrs	r4, r2, #25
 8001c80:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8001c84:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <BME280_ReadPressure+0x3e4>)
 8001c86:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	fb04 f102 	mul.w	r1, r4, r2
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	fb03 f202 	mul.w	r2, r3, r2
 8001c9c:	1888      	adds	r0, r1, r2
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	fba2 1203 	umull	r1, r2, r2, r3
 8001ca4:	1883      	adds	r3, r0, r2
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	f04f 0400 	mov.w	r4, #0
 8001cb0:	0ccb      	lsrs	r3, r1, #19
 8001cb2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001cb6:	14d4      	asrs	r4, r2, #19
 8001cb8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8001cbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001cc0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001cc4:	eb11 0803 	adds.w	r8, r1, r3
 8001cc8:	eb42 0904 	adc.w	r9, r2, r4
 8001ccc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001cd0:	eb13 0508 	adds.w	r5, r3, r8
 8001cd4:	eb44 0609 	adc.w	r6, r4, r9
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	0a29      	lsrs	r1, r5, #8
 8001ce2:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001ce6:	1232      	asrs	r2, r6, #8
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <BME280_ReadPressure+0x3e4>)
 8001cea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001cee:	b21d      	sxth	r5, r3
 8001cf0:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001cf4:	f04f 0800 	mov.w	r8, #0
 8001cf8:	f04f 0900 	mov.w	r9, #0
 8001cfc:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001d00:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001d04:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001d08:	eb18 0301 	adds.w	r3, r8, r1
 8001d0c:	eb49 0402 	adc.w	r4, r9, r2
 8001d10:	e9c7 3402 	strd	r3, r4, [r7, #8]
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8001d14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	f04f 0400 	mov.w	r4, #0
 8001d20:	0a0b      	lsrs	r3, r1, #8
 8001d22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d26:	1214      	asrs	r4, r2, #8
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	fb03 f502 	mul.w	r5, r3, r2
 8001d32:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d36:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	ea03 0801 	and.w	r8, r3, r1
 8001d42:	ea04 0902 	and.w	r9, r4, r2
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <BME280_ReadPressure+0x3e8>)
 8001d48:	fb02 f109 	mul.w	r1, r2, r9
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	fb02 f208 	mul.w	r2, r2, r8
 8001d52:	440a      	add	r2, r1
 8001d54:	490f      	ldr	r1, [pc, #60]	; (8001d94 <BME280_ReadPressure+0x3e8>)
 8001d56:	fba8 0101 	umull	r0, r1, r8, r1
 8001d5a:	1853      	adds	r3, r2, r1
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <BME280_ReadPressure+0x3ec>)
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	f7ff f964 	bl	8001030 <__aeabi_ldivmod>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	442b      	add	r3, r5
 8001d6e:	607b      	str	r3, [r7, #4]
	press_float = pres_int / 100.0f;
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe ff8f 	bl	8000c94 <__aeabi_ui2f>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4908      	ldr	r1, [pc, #32]	; (8001d9c <BME280_ReadPressure+0x3f0>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f896 	bl	8000eac <__aeabi_fdiv>
 8001d80:	4603      	mov	r3, r0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  return press_float;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8001d90:	20000388 	.word	0x20000388
 8001d94:	0005f5e1 	.word	0x0005f5e1
 8001d98:	000186a0 	.word	0x000186a0
 8001d9c:	42c80000 	.word	0x42c80000

08001da0 <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
	int16_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001dac:	f7ff fdac 	bl	8001908 <BME280_ReadTemperature>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 8001db0:	1cbb      	adds	r3, r7, #2
 8001db2:	4619      	mov	r1, r3
 8001db4:	20fd      	movs	r0, #253	; 0xfd
 8001db6:	f7ff fc06 	bl	80015c6 <BME280_ReadReg_BE_S16>
	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8001dba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	60bb      	str	r3, [r7, #8]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 8001dc2:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <BME280_ReadHumidity+0xec>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001dca:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	039a      	lsls	r2, r3, #14
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <BME280_ReadHumidity+0xf0>)
 8001dd2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001dd6:	051b      	lsls	r3, r3, #20
 8001dd8:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <BME280_ReadHumidity+0xf0>)
 8001ddc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001de0:	4619      	mov	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	fb03 f301 	mul.w	r3, r3, r1
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001de8:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001dea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001dee:	13db      	asrs	r3, r3, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001df0:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <BME280_ReadHumidity+0xf0>)
 8001df2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001df6:	4611      	mov	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	fb02 f201 	mul.w	r2, r2, r1
 8001dfe:	1292      	asrs	r2, r2, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001e00:	4923      	ldr	r1, [pc, #140]	; (8001e90 <BME280_ReadHumidity+0xf0>)
 8001e02:	7f09      	ldrb	r1, [r1, #28]
 8001e04:	4608      	mov	r0, r1
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	fb01 f100 	mul.w	r1, r1, r0
 8001e0c:	12c9      	asrs	r1, r1, #11
 8001e0e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001e12:	fb01 f202 	mul.w	r2, r1, r2
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001e16:	1292      	asrs	r2, r2, #10
 8001e18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 8001e1c:	491c      	ldr	r1, [pc, #112]	; (8001e90 <BME280_ReadHumidity+0xf0>)
 8001e1e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001e22:	fb01 f202 	mul.w	r2, r1, r2
 8001e26:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001e2a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	13db      	asrs	r3, r3, #15
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	13d2      	asrs	r2, r2, #15
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 8001e40:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <BME280_ReadHumidity+0xf0>)
 8001e42:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_H1)) >> 4));
 8001e48:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e56:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001e5e:	bfa8      	it	ge
 8001e60:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001e64:	607b      	str	r3, [r7, #4]
	hum_float = (v_x1_u32r>>12);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	131b      	asrs	r3, r3, #12
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ff16 	bl	8000c9c <__aeabi_i2f>
 8001e70:	4603      	mov	r3, r0
 8001e72:	60fb      	str	r3, [r7, #12]
	hum_float /= 1024.0f;
 8001e74:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff f817 	bl	8000eac <__aeabi_fdiv>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60fb      	str	r3, [r7, #12]
  return hum_float;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200003e4 	.word	0x200003e4
 8001e90:	20000388 	.word	0x20000388

08001e94 <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71fb      	strb	r3, [r7, #7]
    uint32_t value32 = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
	value = BME280_ReadReg(BME280_REG_ID);
 8001ea2:	20d0      	movs	r0, #208	; 0xd0
 8001ea4:	f7ff fb5e 	bl	8001564 <BME280_ReadReg>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
	
	if(value != BME280_ID)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2b60      	cmp	r3, #96	; 0x60
 8001eb0:	d003      	beq.n	8001eba <BME280_Init+0x26>
	{
		BME280_Error("[ ERROR ] BME280 Init: Invalid ID\n");
 8001eb2:	4820      	ldr	r0, [pc, #128]	; (8001f34 <BME280_Init+0xa0>)
 8001eb4:	f7ff fa8a 	bl	80013cc <BME280_Error>
		return;
 8001eb8:	e039      	b.n	8001f2e <BME280_Init+0x9a>
	}
    
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8001eba:	21b6      	movs	r1, #182	; 0xb6
 8001ebc:	20e0      	movs	r0, #224	; 0xe0
 8001ebe:	f7ff fb3f 	bl	8001540 <BME280_WriteReg>
	
    while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE);
 8001ec2:	bf00      	nop
 8001ec4:	f7ff fbc0 	bl	8001648 <BME280_ReadStatus>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f8      	bne.n	8001ec4 <BME280_Init+0x30>
	
    BME280_ReadCoefficients();
 8001ed2:	f7ff fbc9 	bl	8001668 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 8001ed6:	20a0      	movs	r0, #160	; 0xa0
 8001ed8:	f7ff fc52 	bl	8001780 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8001edc:	2008      	movs	r0, #8
 8001ede:	f7ff fc6e 	bl	80017be <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001ee2:	2060      	movs	r0, #96	; 0x60
 8001ee4:	f7ff fc8a 	bl	80017fc <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8001ee8:	2008      	movs	r0, #8
 8001eea:	f7ff fca6 	bl	800183a <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7ff fcc2 	bl	8001878 <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001ef4:	20f4      	movs	r0, #244	; 0xf4
 8001ef6:	f7ff fb35 	bl	8001564 <BME280_ReadReg>
 8001efa:	4603      	mov	r3, r0
 8001efc:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8001efe:	20f2      	movs	r0, #242	; 0xf2
 8001f00:	f7ff fb30 	bl	8001564 <BME280_ReadReg>
 8001f04:	4603      	mov	r3, r0
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	461a      	mov	r2, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	603b      	str	r3, [r7, #0]
	
	BME280_SetMode(BME280_MODE_NORMAL);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f7ff fcda 	bl	80018ca <BME280_SetMode>
    
    BME280_CurrentWeatherData.humidity = 0;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <BME280_Init+0xa4>)
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
    BME280_CurrentWeatherData.pressure = 0;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <BME280_Init+0xa4>)
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
    BME280_CurrentWeatherData.temperature = 0;
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <BME280_Init+0xa4>)
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
}
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	0800903c 	.word	0x0800903c
 8001f38:	2000021c 	.word	0x2000021c
 8001f3c:	00000000 	.word	0x00000000

08001f40 <BME280_GetWeatherData>:
//------------------------------------------------
BME280_WeatherData *BME280_GetWeatherData()
{
 8001f40:	b598      	push	{r3, r4, r7, lr}
 8001f42:	af00      	add	r7, sp, #0
    BME280_CurrentWeatherData.humidity = roundf(BME280_ReadHumidity());
 8001f44:	f7ff ff2c 	bl	8001da0 <BME280_ReadHumidity>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f006 ffea 	bl	8008f24 <roundf>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <BME280_GetWeatherData+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
    BME280_CurrentWeatherData.pressure = roundf(BME280_ReadPressure() * 0.00075);
 8001f56:	f7ff fd29 	bl	80019ac <BME280_ReadPressure>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa63 	bl	8000428 <__aeabi_f2d>
 8001f62:	a30f      	add	r3, pc, #60	; (adr r3, 8001fa0 <BME280_GetWeatherData+0x60>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fab6 	bl	80004d8 <__aeabi_dmul>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	460c      	mov	r4, r1
 8001f70:	4618      	mov	r0, r3
 8001f72:	4621      	mov	r1, r4
 8001f74:	f7fe fd88 	bl	8000a88 <__aeabi_d2f>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f006 ffd2 	bl	8008f24 <roundf>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <BME280_GetWeatherData+0x68>)
 8001f84:	605a      	str	r2, [r3, #4]
    BME280_CurrentWeatherData.temperature = roundf(BME280_ReadTemperature());
 8001f86:	f7ff fcbf 	bl	8001908 <BME280_ReadTemperature>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f006 ffc9 	bl	8008f24 <roundf>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <BME280_GetWeatherData+0x68>)
 8001f96:	609a      	str	r2, [r3, #8]
    
    return &BME280_CurrentWeatherData;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <BME280_GetWeatherData+0x68>)
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd98      	pop	{r3, r4, r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	bc6a7efa 	.word	0xbc6a7efa
 8001fa4:	3f489374 	.word	0x3f489374
 8001fa8:	2000021c 	.word	0x2000021c

08001fac <ESP8266_Init>:
UART_HandleTypeDef *ESP8266_huart;
GPIO_TypeDef *ESP8266_PinPort;
uint32_t ESP8266_PinNum;

void ESP8266_Init(UART_HandleTypeDef *huart, GPIO_TypeDef *pinPort, uint32_t pinNum)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
    ESP8266_PinPort = pinPort;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <ESP8266_Init+0x28>)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	6013      	str	r3, [r2, #0]
    ESP8266_PinNum = pinNum;
 8001fbe:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <ESP8266_Init+0x2c>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6013      	str	r3, [r2, #0]
    ESP8266_huart = huart;
 8001fc4:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <ESP8266_Init+0x30>)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6013      	str	r3, [r2, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	200004c8 	.word	0x200004c8
 8001fd8:	20000484 	.word	0x20000484
 8001fdc:	2000022c 	.word	0x2000022c

08001fe0 <ESP8266_ON>:

void ESP8266_ON()
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ESP8266_PinPort, ESP8266_PinNum, GPIO_PIN_SET);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <ESP8266_ON+0x1c>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <ESP8266_ON+0x20>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f001 ff81 	bl	8003ef8 <HAL_GPIO_WritePin>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200004c8 	.word	0x200004c8
 8002000:	20000484 	.word	0x20000484

08002004 <ESP8266_OFF>:

void ESP8266_OFF()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ESP8266_PinPort, ESP8266_PinNum, GPIO_PIN_RESET);
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <ESP8266_OFF+0x1c>)
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <ESP8266_OFF+0x20>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	2200      	movs	r2, #0
 8002014:	4619      	mov	r1, r3
 8002016:	f001 ff6f 	bl	8003ef8 <HAL_GPIO_WritePin>
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200004c8 	.word	0x200004c8
 8002024:	20000484 	.word	0x20000484

08002028 <ESP8266_Restart>:

bool ESP8266_Restart()
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
    return ESP8266_Send("AT+RST\r\n") && ESP8266_Recv("OK");
 800202c:	4809      	ldr	r0, [pc, #36]	; (8002054 <ESP8266_Restart+0x2c>)
 800202e:	f000 f8d3 	bl	80021d8 <ESP8266_Send>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <ESP8266_Restart+0x20>
 8002038:	4807      	ldr	r0, [pc, #28]	; (8002058 <ESP8266_Restart+0x30>)
 800203a:	f000 f8e9 	bl	8002210 <ESP8266_Recv>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <ESP8266_Restart+0x20>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <ESP8266_Restart+0x22>
 8002048:	2300      	movs	r3, #0
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	08009060 	.word	0x08009060
 8002058:	0800906c 	.word	0x0800906c

0800205c <ESP8266_DisconnectFromWifi>:
{
    return ESP8266_Send("ATE0\r\n") && ESP8266_Recv("OK");
}

bool ESP8266_DisconnectFromWifi()
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	return ESP8266_Send("AT+CWQAP\r\n") && ESP8266_Recv("OK");
 8002060:	4809      	ldr	r0, [pc, #36]	; (8002088 <ESP8266_DisconnectFromWifi+0x2c>)
 8002062:	f000 f8b9 	bl	80021d8 <ESP8266_Send>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <ESP8266_DisconnectFromWifi+0x20>
 800206c:	4807      	ldr	r0, [pc, #28]	; (800208c <ESP8266_DisconnectFromWifi+0x30>)
 800206e:	f000 f8cf 	bl	8002210 <ESP8266_Recv>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <ESP8266_DisconnectFromWifi+0x20>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <ESP8266_DisconnectFromWifi+0x22>
 800207c:	2300      	movs	r3, #0
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}
 8002088:	08009088 	.word	0x08009088
 800208c:	0800906c 	.word	0x0800906c

08002090 <ESP8266_SendRequest>:

bool ESP8266_SendRequest(char *type, char *ip, uint8_t port, char *request)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	71fb      	strb	r3, [r7, #7]
	return ESP8266_AT_CIPSTART(type, ip, port) && ESP8266_AT_CIPSEND(strlen(request) + 2) && ESP8266_AT_SendData(request);
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f81e 	bl	80020e8 <ESP8266_AT_CIPSTART>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <ESP8266_SendRequest+0x48>
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f7fe f84c 	bl	8000150 <strlen>
 80020b8:	4603      	mov	r3, r0
 80020ba:	3302      	adds	r3, #2
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f83f 	bl	8002140 <ESP8266_AT_CIPSEND>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <ESP8266_SendRequest+0x48>
 80020c8:	6838      	ldr	r0, [r7, #0]
 80020ca:	f000 f85f 	bl	800218c <ESP8266_AT_SendData>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <ESP8266_SendRequest+0x48>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <ESP8266_SendRequest+0x4a>
 80020d8:	2300      	movs	r3, #0
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <ESP8266_AT_CIPSTART>:

bool ESP8266_AT_CIPSTART(char *type, char *ip, uint8_t port)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	71fb      	strb	r3, [r7, #7]
    sprintf(ESP_TX_buff, "AT+CIPSTART=\"%s\",\"%s\",%d\r\n", type, ip, port);
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <ESP8266_AT_CIPSTART+0x4c>)
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <ESP8266_AT_CIPSTART+0x50>)
 8002102:	f005 fb09 	bl	8007718 <siprintf>
    return ESP8266_Send(ESP_TX_buff) && ESP8266_Recv("OK");
 8002106:	480c      	ldr	r0, [pc, #48]	; (8002138 <ESP8266_AT_CIPSTART+0x50>)
 8002108:	f000 f866 	bl	80021d8 <ESP8266_Send>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <ESP8266_AT_CIPSTART+0x3a>
 8002112:	480a      	ldr	r0, [pc, #40]	; (800213c <ESP8266_AT_CIPSTART+0x54>)
 8002114:	f000 f87c 	bl	8002210 <ESP8266_Recv>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <ESP8266_AT_CIPSTART+0x3a>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <ESP8266_AT_CIPSTART+0x3c>
 8002122:	2300      	movs	r3, #0
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	08009094 	.word	0x08009094
 8002138:	20000444 	.word	0x20000444
 800213c:	0800906c 	.word	0x0800906c

08002140 <ESP8266_AT_CIPSEND>:

bool ESP8266_AT_CIPSEND(int requestLength)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    sprintf(ESP_TX_buff, "AT+CIPSEND=%d\r\n", requestLength);
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	490d      	ldr	r1, [pc, #52]	; (8002180 <ESP8266_AT_CIPSEND+0x40>)
 800214c:	480d      	ldr	r0, [pc, #52]	; (8002184 <ESP8266_AT_CIPSEND+0x44>)
 800214e:	f005 fae3 	bl	8007718 <siprintf>
    return ESP8266_Send(ESP_TX_buff) && ESP8266_Recv("OK");
 8002152:	480c      	ldr	r0, [pc, #48]	; (8002184 <ESP8266_AT_CIPSEND+0x44>)
 8002154:	f000 f840 	bl	80021d8 <ESP8266_Send>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <ESP8266_AT_CIPSEND+0x2e>
 800215e:	480a      	ldr	r0, [pc, #40]	; (8002188 <ESP8266_AT_CIPSEND+0x48>)
 8002160:	f000 f856 	bl	8002210 <ESP8266_Recv>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <ESP8266_AT_CIPSEND+0x2e>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <ESP8266_AT_CIPSEND+0x30>
 800216e:	2300      	movs	r3, #0
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	080090b0 	.word	0x080090b0
 8002184:	20000444 	.word	0x20000444
 8002188:	0800906c 	.word	0x0800906c

0800218c <ESP8266_AT_SendData>:

bool ESP8266_AT_SendData(char *request)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    sprintf(ESP_TX_buff, "%s\r\n", request);
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	490d      	ldr	r1, [pc, #52]	; (80021cc <ESP8266_AT_SendData+0x40>)
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <ESP8266_AT_SendData+0x44>)
 800219a:	f005 fabd 	bl	8007718 <siprintf>
    return ESP8266_Send(ESP_TX_buff) && ESP8266_Recv("OK");
 800219e:	480c      	ldr	r0, [pc, #48]	; (80021d0 <ESP8266_AT_SendData+0x44>)
 80021a0:	f000 f81a 	bl	80021d8 <ESP8266_Send>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <ESP8266_AT_SendData+0x2e>
 80021aa:	480a      	ldr	r0, [pc, #40]	; (80021d4 <ESP8266_AT_SendData+0x48>)
 80021ac:	f000 f830 	bl	8002210 <ESP8266_Recv>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <ESP8266_AT_SendData+0x2e>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <ESP8266_AT_SendData+0x30>
 80021ba:	2300      	movs	r3, #0
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	080090c0 	.word	0x080090c0
 80021d0:	20000444 	.word	0x20000444
 80021d4:	0800906c 	.word	0x0800906c

080021d8 <ESP8266_Send>:

bool ESP8266_Send(char *command)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	}

	return false;
	*/

	return  HAL_UART_Transmit(ESP8266_huart,(uint8_t*)command, strlen(command), 100) == HAL_OK? true: false;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <ESP8266_Send+0x34>)
 80021e2:	681c      	ldr	r4, [r3, #0]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7fd ffb3 	bl	8000150 <strlen>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	2364      	movs	r3, #100	; 0x64
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4620      	mov	r0, r4
 80021f4:	f004 f983 	bl	80064fe <HAL_UART_Transmit>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf0c      	ite	eq
 80021fe:	2301      	moveq	r3, #1
 8002200:	2300      	movne	r3, #0
 8002202:	b2db      	uxtb	r3, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	2000022c 	.word	0x2000022c

08002210 <ESP8266_Recv>:
/*
 * Receiving methods
 */

bool ESP8266_Recv(char *correctAnswer)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	ESP8266_ClearRecvBuff();
 8002218:	f000 f826 	bl	8002268 <ESP8266_ClearRecvBuff>

	uint32_t time = HAL_GetTick();
 800221c:	f000 fee0 	bl	8002fe0 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]
	uint32_t maxDelayTime = 10000;
 8002222:	f242 7310 	movw	r3, #10000	; 0x2710
 8002226:	60bb      	str	r3, [r7, #8]

	while(HAL_GetTick() - time < maxDelayTime)
 8002228:	e00d      	b.n	8002246 <ESP8266_Recv+0x36>
	{
		if(strstr(ESP_RX_buff, correctAnswer) != NULL)
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <ESP8266_Recv+0x50>)
 800222e:	f005 fa93 	bl	8007758 <strstr>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <ESP8266_Recv+0x36>
		{
			HAL_UART_AbortReceive(ESP8266_huart);
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <ESP8266_Recv+0x54>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f004 fa4b 	bl	80066d8 <HAL_UART_AbortReceive>
			return true;
 8002242:	2301      	movs	r3, #1
 8002244:	e008      	b.n	8002258 <ESP8266_Recv+0x48>
	while(HAL_GetTick() - time < maxDelayTime)
 8002246:	f000 fecb 	bl	8002fe0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	d8e9      	bhi.n	800222a <ESP8266_Recv+0x1a>
		}

	}


	return false;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000308 	.word	0x20000308
 8002264:	2000022c 	.word	0x2000022c

08002268 <ESP8266_ClearRecvBuff>:

void ESP8266_ClearRecvBuff()
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	memset(ESP_RX_buff, 0, ESP_RX_buff_size);
 800226c:	2280      	movs	r2, #128	; 0x80
 800226e:	2100      	movs	r1, #0
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <ESP8266_ClearRecvBuff+0x28>)
 8002272:	f004 fdf9 	bl	8006e68 <memset>
	ESP_RX_buff_index = 0;
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <ESP8266_ClearRecvBuff+0x2c>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(ESP8266_huart, &recvByte, (uint16_t)1);
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <ESP8266_ClearRecvBuff+0x30>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4906      	ldr	r1, [pc, #24]	; (800229c <ESP8266_ClearRecvBuff+0x34>)
 8002284:	4618      	mov	r0, r3
 8002286:	f004 f9d3 	bl	8006630 <HAL_UART_Receive_IT>
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000308 	.word	0x20000308
 8002294:	200001f8 	.word	0x200001f8
 8002298:	2000022c 	.word	0x2000022c
 800229c:	20000228 	.word	0x20000228

080022a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	if(huart == ESP8266_huart)
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_UART_RxCpltCallback+0x3c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d110      	bne.n	80022d4 <HAL_UART_RxCpltCallback+0x34>
	{
		ESP_RX_buff[ESP_RX_buff_index++] = recvByte;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_UART_RxCpltCallback+0x40>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	4909      	ldr	r1, [pc, #36]	; (80022e0 <HAL_UART_RxCpltCallback+0x40>)
 80022ba:	600a      	str	r2, [r1, #0]
 80022bc:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_UART_RxCpltCallback+0x44>)
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	b2d1      	uxtb	r1, r2
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <HAL_UART_RxCpltCallback+0x48>)
 80022c4:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(ESP8266_huart, &recvByte, (uint16_t)1);
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_UART_RxCpltCallback+0x3c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4905      	ldr	r1, [pc, #20]	; (80022e4 <HAL_UART_RxCpltCallback+0x44>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 f9ae 	bl	8006630 <HAL_UART_Receive_IT>
	}
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000022c 	.word	0x2000022c
 80022e0:	200001f8 	.word	0x200001f8
 80022e4:	20000228 	.word	0x20000228
 80022e8:	20000308 	.word	0x20000308

080022ec <ESP8266_ConnectTo>:

/*
 *  Connection methods
 */
bool ESP8266_ConnectTo(char *wifiName, char *password)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
	sprintf(ESP_TX_buff, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", wifiName, password);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	490d      	ldr	r1, [pc, #52]	; (8002330 <ESP8266_ConnectTo+0x44>)
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <ESP8266_ConnectTo+0x48>)
 80022fe:	f005 fa0b 	bl	8007718 <siprintf>
	return ESP8266_Send(ESP_TX_buff) && ESP8266_Recv("OK");
 8002302:	480c      	ldr	r0, [pc, #48]	; (8002334 <ESP8266_ConnectTo+0x48>)
 8002304:	f7ff ff68 	bl	80021d8 <ESP8266_Send>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <ESP8266_ConnectTo+0x32>
 800230e:	480a      	ldr	r0, [pc, #40]	; (8002338 <ESP8266_ConnectTo+0x4c>)
 8002310:	f7ff ff7e 	bl	8002210 <ESP8266_Recv>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <ESP8266_ConnectTo+0x32>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <ESP8266_ConnectTo+0x34>
 800231e:	2300      	movs	r3, #0
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	080090c8 	.word	0x080090c8
 8002334:	20000444 	.word	0x20000444
 8002338:	0800906c 	.word	0x0800906c

0800233c <PC_Send>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
void PC_Send(char *str)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7fd ff03 	bl	8000150 <strlen>
 800234a:	4603      	mov	r3, r0
 800234c:	b29a      	uxth	r2, r3
 800234e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4803      	ldr	r0, [pc, #12]	; (8002364 <PC_Send+0x28>)
 8002356:	f004 f8d2 	bl	80064fe <HAL_UART_Transmit>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200003ec 	.word	0x200003ec

08002368 <getBatteryVoltage>:

float getBatteryVoltage()
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800236e:	481a      	ldr	r0, [pc, #104]	; (80023d8 <getBatteryVoltage+0x70>)
 8002370:	f000 ff3a 	bl	80031e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8002374:	2164      	movs	r1, #100	; 0x64
 8002376:	4818      	ldr	r0, [pc, #96]	; (80023d8 <getBatteryVoltage+0x70>)
 8002378:	f001 f810 	bl	800339c <HAL_ADC_PollForConversion>
	uint32_t adcResult = HAL_ADC_GetValue(&hadc1);
 800237c:	4816      	ldr	r0, [pc, #88]	; (80023d8 <getBatteryVoltage+0x70>)
 800237e:	f001 f907 	bl	8003590 <HAL_ADC_GetValue>
 8002382:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8002384:	4814      	ldr	r0, [pc, #80]	; (80023d8 <getBatteryVoltage+0x70>)
 8002386:	f000 ffdd 	bl	8003344 <HAL_ADC_Stop>

	float realVoltage = adcResult / 1085.0 /0.48;
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe f82a 	bl	80003e4 <__aeabi_ui2d>
 8002390:	a30d      	add	r3, pc, #52	; (adr r3, 80023c8 <getBatteryVoltage+0x60>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe f9c9 	bl	800072c <__aeabi_ddiv>
 800239a:	4603      	mov	r3, r0
 800239c:	460c      	mov	r4, r1
 800239e:	4618      	mov	r0, r3
 80023a0:	4621      	mov	r1, r4
 80023a2:	a30b      	add	r3, pc, #44	; (adr r3, 80023d0 <getBatteryVoltage+0x68>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f9c0 	bl	800072c <__aeabi_ddiv>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	4618      	mov	r0, r3
 80023b2:	4621      	mov	r1, r4
 80023b4:	f7fe fb68 	bl	8000a88 <__aeabi_d2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	603b      	str	r3, [r7, #0]

	return realVoltage;
 80023bc:	683b      	ldr	r3, [r7, #0]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	00000000 	.word	0x00000000
 80023cc:	4090f400 	.word	0x4090f400
 80023d0:	eb851eb8 	.word	0xeb851eb8
 80023d4:	3fdeb851 	.word	0x3fdeb851
 80023d8:	200003ac 	.word	0x200003ac

080023dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e0:	b088      	sub	sp, #32
 80023e2:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e4:	f000 fda4 	bl	8002f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e8:	f000 f970 	bl	80026cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ec:	f000 face 	bl	800298c <MX_GPIO_Init>
  MX_ADC1_Init();
 80023f0:	f000 f9c2 	bl	8002778 <MX_ADC1_Init>
  MX_I2C1_Init();
 80023f4:	f000 f9fe 	bl	80027f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80023f8:	f000 fa74 	bl	80028e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023fc:	f000 fa9c 	bl	8002938 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002400:	f000 fa26 	bl	8002850 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  PC_Send("****************************** Start ******************************\n");
 8002404:	4890      	ldr	r0, [pc, #576]	; (8002648 <main+0x26c>)
 8002406:	f7ff ff99 	bl	800233c <PC_Send>

		  HAL_Delay(100);
	  }
  #endif

  BME280_Init();
 800240a:	f7ff fd43 	bl	8001e94 <BME280_Init>
  ESP8266_Init(&huart2, GPIOB, GPIO_PIN_10);
 800240e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002412:	498e      	ldr	r1, [pc, #568]	; (800264c <main+0x270>)
 8002414:	488e      	ldr	r0, [pc, #568]	; (8002650 <main+0x274>)
 8002416:	f7ff fdc9 	bl	8001fac <ESP8266_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  PC_Send("\nBegin\n");
 800241a:	488e      	ldr	r0, [pc, #568]	; (8002654 <main+0x278>)
 800241c:	f7ff ff8e 	bl	800233c <PC_Send>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  #endif

	  request = false;
 8002420:	4b8d      	ldr	r3, [pc, #564]	; (8002658 <main+0x27c>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
	  connect = false;
 8002426:	4b8d      	ldr	r3, [pc, #564]	; (800265c <main+0x280>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
	  disconnect = false;
 800242c:	4b8c      	ldr	r3, [pc, #560]	; (8002660 <main+0x284>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]

	  for(int i = 0; i < 3; ++i)
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	e02c      	b.n	8002492 <main+0xb6>
	  {
		  ESP8266_ON();
 8002438:	f7ff fdd2 	bl	8001fe0 <ESP8266_ON>
		  HAL_Delay(2000);
 800243c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002440:	f000 fdd8 	bl	8002ff4 <HAL_Delay>

		  connect = ESP8266_ConnectTo("Snapy", "31055243167vlad");
 8002444:	4987      	ldr	r1, [pc, #540]	; (8002664 <main+0x288>)
 8002446:	4888      	ldr	r0, [pc, #544]	; (8002668 <main+0x28c>)
 8002448:	f7ff ff50 	bl	80022ec <ESP8266_ConnectTo>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	4b82      	ldr	r3, [pc, #520]	; (800265c <main+0x280>)
 8002452:	701a      	strb	r2, [r3, #0]

	      if(connect)
 8002454:	4b81      	ldr	r3, [pc, #516]	; (800265c <main+0x280>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <main+0x88>
	      {
	    	  PC_Send("[ OK ] Connect to access point\n");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <main+0x290>)
 800245e:	f7ff ff6d 	bl	800233c <PC_Send>
	    	  break;
 8002462:	e019      	b.n	8002498 <main+0xbc>
	      }

	      PC_Send("[ WARNING ] Connect to access point failed! ESP Restart\n");
 8002464:	4882      	ldr	r0, [pc, #520]	; (8002670 <main+0x294>)
 8002466:	f7ff ff69 	bl	800233c <PC_Send>
	      restart = ESP8266_Restart();
 800246a:	f7ff fddd 	bl	8002028 <ESP8266_Restart>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	4b80      	ldr	r3, [pc, #512]	; (8002674 <main+0x298>)
 8002474:	701a      	strb	r2, [r3, #0]

	      if(restart)
 8002476:	4b7f      	ldr	r3, [pc, #508]	; (8002674 <main+0x298>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <main+0xaa>
	      	  PC_Send("[ OK ] ESP Restart\n");
 800247e:	487e      	ldr	r0, [pc, #504]	; (8002678 <main+0x29c>)
 8002480:	f7ff ff5c 	bl	800233c <PC_Send>
 8002484:	e002      	b.n	800248c <main+0xb0>
	      else
	          PC_Send("[ ERROR ] ESP Restart\n");
 8002486:	487d      	ldr	r0, [pc, #500]	; (800267c <main+0x2a0>)
 8002488:	f7ff ff58 	bl	800233c <PC_Send>
	  for(int i = 0; i < 3; ++i)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3301      	adds	r3, #1
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	ddcf      	ble.n	8002438 <main+0x5c>
	  }

	  if(!connect)
 8002498:	4b70      	ldr	r3, [pc, #448]	; (800265c <main+0x280>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	f083 0301 	eor.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01a      	beq.n	80024dc <main+0x100>
	  {
		  PC_Send("[ ERROR ] Connect to access point\n");
 80024a6:	4876      	ldr	r0, [pc, #472]	; (8002680 <main+0x2a4>)
 80024a8:	f7ff ff48 	bl	800233c <PC_Send>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80024ac:	2201      	movs	r2, #1
 80024ae:	2120      	movs	r1, #32
 80024b0:	4874      	ldr	r0, [pc, #464]	; (8002684 <main+0x2a8>)
 80024b2:	f001 fd21 	bl	8003ef8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2101      	movs	r1, #1
 80024ba:	4864      	ldr	r0, [pc, #400]	; (800264c <main+0x270>)
 80024bc:	f001 fd1c 	bl	8003ef8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2102      	movs	r1, #2
 80024c4:	4861      	ldr	r0, [pc, #388]	; (800264c <main+0x270>)
 80024c6:	f001 fd17 	bl	8003ef8 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80024ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024ce:	f000 fd91 	bl	8002ff4 <HAL_Delay>
		  PC_Send("**************** System restart ****************\n");
 80024d2:	486d      	ldr	r0, [pc, #436]	; (8002688 <main+0x2ac>)
 80024d4:	f7ff ff32 	bl	800233c <PC_Send>
	      NVIC_SystemReset();
 80024d8:	f7fe ff64 	bl	80013a4 <__NVIC_SystemReset>
	  }

	  currentWeather = BME280_GetWeatherData();
 80024dc:	f7ff fd30 	bl	8001f40 <BME280_GetWeatherData>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b6a      	ldr	r3, [pc, #424]	; (800268c <main+0x2b0>)
 80024e4:	601a      	str	r2, [r3, #0]
	  currentBatteryVoltage = getBatteryVoltage();
 80024e6:	f7ff ff3f 	bl	8002368 <getBatteryVoltage>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b68      	ldr	r3, [pc, #416]	; (8002690 <main+0x2b4>)
 80024ee:	601a      	str	r2, [r3, #0]

	  sprintf(buff, "GET /weatherStation/addWeather.php?t=%d&h=%d&p=%d&v=%2.2f", (int)currentWeather->temperature, (int)currentWeather->humidity, (int)currentWeather->pressure, currentBatteryVoltage);
 80024f0:	4b66      	ldr	r3, [pc, #408]	; (800268c <main+0x2b0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fd74 	bl	8000fe4 <__aeabi_f2iz>
 80024fc:	4606      	mov	r6, r0
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <main+0x2b0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fd6d 	bl	8000fe4 <__aeabi_f2iz>
 800250a:	4680      	mov	r8, r0
 800250c:	4b5f      	ldr	r3, [pc, #380]	; (800268c <main+0x2b0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fd66 	bl	8000fe4 <__aeabi_f2iz>
 8002518:	4605      	mov	r5, r0
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <main+0x2b4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd ff82 	bl	8000428 <__aeabi_f2d>
 8002524:	4603      	mov	r3, r0
 8002526:	460c      	mov	r4, r1
 8002528:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800252c:	9500      	str	r5, [sp, #0]
 800252e:	4643      	mov	r3, r8
 8002530:	4632      	mov	r2, r6
 8002532:	4958      	ldr	r1, [pc, #352]	; (8002694 <main+0x2b8>)
 8002534:	4858      	ldr	r0, [pc, #352]	; (8002698 <main+0x2bc>)
 8002536:	f005 f8ef 	bl	8007718 <siprintf>
	  request = ESP8266_SendRequest("TCP", "192.168.1.102", 80, buff);
 800253a:	4b57      	ldr	r3, [pc, #348]	; (8002698 <main+0x2bc>)
 800253c:	2250      	movs	r2, #80	; 0x50
 800253e:	4957      	ldr	r1, [pc, #348]	; (800269c <main+0x2c0>)
 8002540:	4857      	ldr	r0, [pc, #348]	; (80026a0 <main+0x2c4>)
 8002542:	f7ff fda5 	bl	8002090 <ESP8266_SendRequest>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <main+0x27c>)
 800254c:	701a      	strb	r2, [r3, #0]

	  if(!request)
 800254e:	4b42      	ldr	r3, [pc, #264]	; (8002658 <main+0x27c>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	f083 0301 	eor.w	r3, r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d010      	beq.n	800257e <main+0x1a2>
	  {
		  PC_Send("[ ERROR ] request = false;\n");
 800255c:	4851      	ldr	r0, [pc, #324]	; (80026a4 <main+0x2c8>)
 800255e:	f7ff feed 	bl	800233c <PC_Send>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002562:	2201      	movs	r2, #1
 8002564:	2120      	movs	r1, #32
 8002566:	4847      	ldr	r0, [pc, #284]	; (8002684 <main+0x2a8>)
 8002568:	f001 fcc6 	bl	8003ef8 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800256c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002570:	f000 fd40 	bl	8002ff4 <HAL_Delay>
		  PC_Send("**************** System restart ****************\n");
 8002574:	4844      	ldr	r0, [pc, #272]	; (8002688 <main+0x2ac>)
 8002576:	f7ff fee1 	bl	800233c <PC_Send>
	      NVIC_SystemReset();
 800257a:	f7fe ff13 	bl	80013a4 <__NVIC_SystemReset>
	  }
	  else
	  {
		  PC_Send("[ OK ] Request\n");
 800257e:	484a      	ldr	r0, [pc, #296]	; (80026a8 <main+0x2cc>)
 8002580:	f7ff fedc 	bl	800233c <PC_Send>
	  }

	  disconnect = ESP8266_DisconnectFromWifi();
 8002584:	f7ff fd6a 	bl	800205c <ESP8266_DisconnectFromWifi>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <main+0x284>)
 800258e:	701a      	strb	r2, [r3, #0]

	  if(!disconnect)
 8002590:	4b33      	ldr	r3, [pc, #204]	; (8002660 <main+0x284>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01a      	beq.n	80025d4 <main+0x1f8>
	  {
		  PC_Send("[ ERROR ] disconnect = false;\n");
 800259e:	4843      	ldr	r0, [pc, #268]	; (80026ac <main+0x2d0>)
 80025a0:	f7ff fecc 	bl	800233c <PC_Send>
		  PC_Send("**************** System restart ****************\n");
 80025a4:	4838      	ldr	r0, [pc, #224]	; (8002688 <main+0x2ac>)
 80025a6:	f7ff fec9 	bl	800233c <PC_Send>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80025aa:	2201      	movs	r2, #1
 80025ac:	2120      	movs	r1, #32
 80025ae:	4835      	ldr	r0, [pc, #212]	; (8002684 <main+0x2a8>)
 80025b0:	f001 fca2 	bl	8003ef8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2101      	movs	r1, #1
 80025b8:	4824      	ldr	r0, [pc, #144]	; (800264c <main+0x270>)
 80025ba:	f001 fc9d 	bl	8003ef8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	2102      	movs	r1, #2
 80025c2:	4822      	ldr	r0, [pc, #136]	; (800264c <main+0x270>)
 80025c4:	f001 fc98 	bl	8003ef8 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80025c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025cc:	f000 fd12 	bl	8002ff4 <HAL_Delay>
	      NVIC_SystemReset();
 80025d0:	f7fe fee8 	bl	80013a4 <__NVIC_SystemReset>
	  }
	  else
	  {
		  PC_Send("[ OK ] Disconnect\n");
 80025d4:	4836      	ldr	r0, [pc, #216]	; (80026b0 <main+0x2d4>)
 80025d6:	f7ff feb1 	bl	800233c <PC_Send>
	  }

	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80025da:	2200      	movs	r2, #0
 80025dc:	4935      	ldr	r1, [pc, #212]	; (80026b4 <main+0x2d8>)
 80025de:	4836      	ldr	r0, [pc, #216]	; (80026b8 <main+0x2dc>)
 80025e0:	f003 fb10 	bl	8005c04 <HAL_RTC_GetTime>

	  ++counter;
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <main+0x2e0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3301      	adds	r3, #1
 80025ea:	4a34      	ldr	r2, [pc, #208]	; (80026bc <main+0x2e0>)
 80025ec:	6013      	str	r3, [r2, #0]
	  sprintf(buff, "[%d-%d-%d %d:%d:%d] %d\n",DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year, sTime.Hours, sTime.Minutes, sTime.Seconds, counter);
 80025ee:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <main+0x2e4>)
 80025f0:	789b      	ldrb	r3, [r3, #2]
 80025f2:	461d      	mov	r5, r3
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <main+0x2e4>)
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	461e      	mov	r6, r3
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <main+0x2e4>)
 80025fc:	78db      	ldrb	r3, [r3, #3]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <main+0x2d8>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <main+0x2d8>)
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	4618      	mov	r0, r3
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <main+0x2d8>)
 800260e:	789b      	ldrb	r3, [r3, #2]
 8002610:	461c      	mov	r4, r3
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <main+0x2e0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	9304      	str	r3, [sp, #16]
 8002618:	9403      	str	r4, [sp, #12]
 800261a:	9002      	str	r0, [sp, #8]
 800261c:	9101      	str	r1, [sp, #4]
 800261e:	9200      	str	r2, [sp, #0]
 8002620:	4633      	mov	r3, r6
 8002622:	462a      	mov	r2, r5
 8002624:	4927      	ldr	r1, [pc, #156]	; (80026c4 <main+0x2e8>)
 8002626:	481c      	ldr	r0, [pc, #112]	; (8002698 <main+0x2bc>)
 8002628:	f005 f876 	bl	8007718 <siprintf>
	  PC_Send(buff);
 800262c:	481a      	ldr	r0, [pc, #104]	; (8002698 <main+0x2bc>)
 800262e:	f7ff fe85 	bl	800233c <PC_Send>

	  ESP8266_OFF();
 8002632:	f7ff fce7 	bl	8002004 <ESP8266_OFF>
	  PC_Send("End\n");
 8002636:	4824      	ldr	r0, [pc, #144]	; (80026c8 <main+0x2ec>)
 8002638:	f7ff fe80 	bl	800233c <PC_Send>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  #endif

      HAL_Delay(10000);
 800263c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002640:	f000 fcd8 	bl	8002ff4 <HAL_Delay>
	  PC_Send("\nBegin\n");
 8002644:	e6e9      	b.n	800241a <main+0x3e>
 8002646:	bf00      	nop
 8002648:	0800911c 	.word	0x0800911c
 800264c:	40010c00 	.word	0x40010c00
 8002650:	20000488 	.word	0x20000488
 8002654:	08009164 	.word	0x08009164
 8002658:	2000042c 	.word	0x2000042c
 800265c:	20000218 	.word	0x20000218
 8002660:	200003e0 	.word	0x200003e0
 8002664:	0800916c 	.word	0x0800916c
 8002668:	0800917c 	.word	0x0800917c
 800266c:	08009184 	.word	0x08009184
 8002670:	080091a4 	.word	0x080091a4
 8002674:	200004cc 	.word	0x200004cc
 8002678:	080091e0 	.word	0x080091e0
 800267c:	080091f4 	.word	0x080091f4
 8002680:	0800920c 	.word	0x0800920c
 8002684:	40010800 	.word	0x40010800
 8002688:	08009230 	.word	0x08009230
 800268c:	20000208 	.word	0x20000208
 8002690:	200003dc 	.word	0x200003dc
 8002694:	08009264 	.word	0x08009264
 8002698:	20000284 	.word	0x20000284
 800269c:	080092a0 	.word	0x080092a0
 80026a0:	080092b0 	.word	0x080092b0
 80026a4:	080092b4 	.word	0x080092b4
 80026a8:	080092d0 	.word	0x080092d0
 80026ac:	080092e0 	.word	0x080092e0
 80026b0:	08009300 	.word	0x08009300
 80026b4:	200001fc 	.word	0x200001fc
 80026b8:	20000430 	.word	0x20000430
 80026bc:	20000204 	.word	0x20000204
 80026c0:	20000200 	.word	0x20000200
 80026c4:	08009314 	.word	0x08009314
 80026c8:	0800932c 	.word	0x0800932c

080026cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b094      	sub	sp, #80	; 0x50
 80026d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026d6:	2228      	movs	r2, #40	; 0x28
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 fbc4 	bl	8006e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80026fc:	230a      	movs	r3, #10
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002700:	2301      	movs	r3, #1
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002704:	2310      	movs	r3, #16
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002708:	2301      	movs	r3, #1
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800270c:	2300      	movs	r3, #0
 800270e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002710:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002714:	4618      	mov	r0, r3
 8002716:	f002 fbb9 	bl	8004e8c <HAL_RCC_OscConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002720:	f000 f9ea 	bl	8002af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002724:	230f      	movs	r3, #15
 8002726:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f002 fe24 	bl	800538c <HAL_RCC_ClockConfig>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800274a:	f000 f9d5 	bl	8002af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800274e:	2303      	movs	r3, #3
 8002750:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002756:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	4618      	mov	r0, r3
 8002760:	f002 ffb0 	bl	80056c4 <HAL_RCCEx_PeriphCLKConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800276a:	f000 f9c5 	bl	8002af8 <Error_Handler>
  }
}
 800276e:	bf00      	nop
 8002770:	3750      	adds	r7, #80	; 0x50
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <MX_ADC1_Init+0x74>)
 800278a:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <MX_ADC1_Init+0x78>)
 800278c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_ADC1_Init+0x74>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_ADC1_Init+0x74>)
 8002796:	2200      	movs	r2, #0
 8002798:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_ADC1_Init+0x74>)
 800279c:	2200      	movs	r2, #0
 800279e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <MX_ADC1_Init+0x74>)
 80027a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80027a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_ADC1_Init+0x74>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_ADC1_Init+0x74>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027b4:	480d      	ldr	r0, [pc, #52]	; (80027ec <MX_ADC1_Init+0x74>)
 80027b6:	f000 fc3f 	bl	8003038 <HAL_ADC_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80027c0:	f000 f99a 	bl	8002af8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027c8:	2301      	movs	r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_ADC1_Init+0x74>)
 80027d6:	f000 fee7 	bl	80035a8 <HAL_ADC_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80027e0:	f000 f98a 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200003ac 	.word	0x200003ac
 80027f0:	40012400 	.word	0x40012400

080027f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <MX_I2C1_Init+0x50>)
 80027fa:	4a13      	ldr	r2, [pc, #76]	; (8002848 <MX_I2C1_Init+0x54>)
 80027fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_I2C1_Init+0x50>)
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <MX_I2C1_Init+0x58>)
 8002802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <MX_I2C1_Init+0x50>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_I2C1_Init+0x50>)
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_I2C1_Init+0x50>)
 8002812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <MX_I2C1_Init+0x50>)
 800281a:	2200      	movs	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_I2C1_Init+0x50>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <MX_I2C1_Init+0x50>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_I2C1_Init+0x50>)
 800282c:	2200      	movs	r2, #0
 800282e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <MX_I2C1_Init+0x50>)
 8002832:	f001 fb91 	bl	8003f58 <HAL_I2C_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800283c:	f000 f95c 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000230 	.word	0x20000230
 8002848:	40005400 	.word	0x40005400
 800284c:	000186a0 	.word	0x000186a0

08002850 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	2100      	movs	r1, #0
 800285a:	460a      	mov	r2, r1
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	460a      	mov	r2, r1
 8002860:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002862:	2300      	movs	r3, #0
 8002864:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <MX_RTC_Init+0x8c>)
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <MX_RTC_Init+0x90>)
 800286a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <MX_RTC_Init+0x8c>)
 800286e:	f04f 32ff 	mov.w	r2, #4294967295
 8002872:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <MX_RTC_Init+0x8c>)
 8002876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800287a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800287c:	4817      	ldr	r0, [pc, #92]	; (80028dc <MX_RTC_Init+0x8c>)
 800287e:	f003 f893 	bl	80059a8 <HAL_RTC_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002888:	f000 f936 	bl	8002af8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	2200      	movs	r2, #0
 800289c:	4619      	mov	r1, r3
 800289e:	480f      	ldr	r0, [pc, #60]	; (80028dc <MX_RTC_Init+0x8c>)
 80028a0:	f003 f918 	bl	8005ad4 <HAL_RTC_SetTime>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80028aa:	f000 f925 	bl	8002af8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80028ae:	2305      	movs	r3, #5
 80028b0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80028b2:	2301      	movs	r3, #1
 80028b4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 3;
 80028b6:	2303      	movs	r3, #3
 80028b8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 20;
 80028ba:	2314      	movs	r3, #20
 80028bc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80028be:	463b      	mov	r3, r7
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	4805      	ldr	r0, [pc, #20]	; (80028dc <MX_RTC_Init+0x8c>)
 80028c6:	f003 fa75 	bl	8005db4 <HAL_RTC_SetDate>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80028d0:	f000 f912 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000430 	.word	0x20000430
 80028e0:	40002800 	.word	0x40002800

080028e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_USART1_UART_Init+0x4c>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <MX_USART1_UART_Init+0x50>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <MX_USART1_UART_Init+0x4c>)
 80028f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_USART1_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_USART1_UART_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_USART1_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_USART1_UART_Init+0x4c>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_USART1_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_USART1_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_USART1_UART_Init+0x4c>)
 800291c:	f003 fda2 	bl	8006464 <HAL_UART_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002926:	f000 f8e7 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200003ec 	.word	0x200003ec
 8002934:	40013800 	.word	0x40013800

08002938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <MX_USART2_UART_Init+0x50>)
 8002940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 800295e:	220c      	movs	r2, #12
 8002960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002970:	f003 fd78 	bl	8006464 <HAL_UART_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800297a:	f000 f8bd 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000488 	.word	0x20000488
 8002988:	40004400 	.word	0x40004400

0800298c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a0:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029a6:	f043 0310 	orr.w	r3, r3, #16
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b8:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a48      	ldr	r2, [pc, #288]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029be:	f043 0320 	orr.w	r3, r3, #32
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b46      	ldr	r3, [pc, #280]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d0:	4b43      	ldr	r3, [pc, #268]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a42      	ldr	r2, [pc, #264]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b40      	ldr	r3, [pc, #256]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e8:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a3c      	ldr	r2, [pc, #240]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <MX_GPIO_Init+0x154>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a06:	4837      	ldr	r0, [pc, #220]	; (8002ae4 <MX_GPIO_Init+0x158>)
 8002a08:	f001 fa76 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Station_error_GPIO_Port, Station_error_Pin, GPIO_PIN_RESET);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2120      	movs	r1, #32
 8002a10:	4835      	ldr	r0, [pc, #212]	; (8002ae8 <MX_GPIO_Init+0x15c>)
 8002a12:	f001 fa71 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Station_work_Pin|Station_sleep_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002a16:	2200      	movs	r2, #0
 8002a18:	f240 4103 	movw	r1, #1027	; 0x403
 8002a1c:	4833      	ldr	r0, [pc, #204]	; (8002aec <MX_GPIO_Init+0x160>)
 8002a1e:	f001 fa6b 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2302      	movs	r3, #2
 8002a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4619      	mov	r1, r3
 8002a3a:	482a      	ldr	r0, [pc, #168]	; (8002ae4 <MX_GPIO_Init+0x158>)
 8002a3c:	f001 f902 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a40:	2303      	movs	r3, #3
 8002a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a44:	2303      	movs	r3, #3
 8002a46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4828      	ldr	r0, [pc, #160]	; (8002af0 <MX_GPIO_Init+0x164>)
 8002a50:	f001 f8f8 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7 
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7 
 8002a54:	f649 13d2 	movw	r3, #39378	; 0x99d2
 8002a58:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4619      	mov	r1, r3
 8002a64:	4820      	ldr	r0, [pc, #128]	; (8002ae8 <MX_GPIO_Init+0x15c>)
 8002a66:	f001 f8ed 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Station_error_Pin */
  GPIO_InitStruct.Pin = Station_error_Pin;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a76:	2302      	movs	r3, #2
 8002a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Station_error_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4819      	ldr	r0, [pc, #100]	; (8002ae8 <MX_GPIO_Init+0x15c>)
 8002a82:	f001 f8df 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Station_work_Pin Station_sleep_Pin PB10 */
  GPIO_InitStruct.Pin = Station_work_Pin|Station_sleep_Pin|GPIO_PIN_10;
 8002a86:	f240 4303 	movw	r3, #1027	; 0x403
 8002a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2302      	movs	r3, #2
 8002a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4813      	ldr	r0, [pc, #76]	; (8002aec <MX_GPIO_Init+0x160>)
 8002aa0:	f001 f8d0 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 PB12 PB13 
                           PB14 PB15 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8002aa4:	f64f 333c 	movw	r3, #64316	; 0xfb3c
 8002aa8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480d      	ldr	r0, [pc, #52]	; (8002aec <MX_GPIO_Init+0x160>)
 8002ab6:	f001 f8c5 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_GPIO_Init+0x168>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <MX_GPIO_Init+0x168>)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	6053      	str	r3, [r2, #4]

}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	; 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40010800 	.word	0x40010800
 8002aec:	40010c00 	.word	0x40010c00
 8002af0:	40011400 	.word	0x40011400
 8002af4:	40010000 	.word	0x40010000

08002af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6193      	str	r3, [r2, #24]
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <HAL_MspInit+0x5c>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_MspInit+0x60>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_MspInit+0x60>)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010000 	.word	0x40010000

08002b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_ADC_MspInit+0x6c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d121      	bne.n	8002bcc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_ADC_MspInit+0x70>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Battery_voltage1_Pin;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Battery_voltage1_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 0310 	add.w	r3, r7, #16
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <HAL_ADC_MspInit+0x74>)
 8002bc8:	f001 f83c 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bcc:	bf00      	nop
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40012400 	.word	0x40012400
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010800 	.word	0x40010800

08002be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <HAL_I2C_MspInit+0x70>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d123      	bne.n	8002c48 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_I2C_MspInit+0x74>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <HAL_I2C_MspInit+0x74>)
 8002c06:	f043 0308 	orr.w	r3, r3, #8
 8002c0a:	6193      	str	r3, [r2, #24]
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_I2C_MspInit+0x74>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = BME280_SCL_Pin|BME280_SDA_Pin;
 8002c18:	23c0      	movs	r3, #192	; 0xc0
 8002c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c1c:	2312      	movs	r3, #18
 8002c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	4619      	mov	r1, r3
 8002c2a:	480b      	ldr	r0, [pc, #44]	; (8002c58 <HAL_I2C_MspInit+0x78>)
 8002c2c:	f001 f80a 	bl	8003c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_I2C_MspInit+0x74>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <HAL_I2C_MspInit+0x74>)
 8002c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c3a:	61d3      	str	r3, [r2, #28]
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_I2C_MspInit+0x74>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c48:	bf00      	nop
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40005400 	.word	0x40005400
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40010c00 	.word	0x40010c00

08002c5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <HAL_RTC_MspInit+0x3c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d110      	bne.n	8002c90 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002c6e:	f002 f901 	bl	8004e74 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_RTC_MspInit+0x40>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_RTC_MspInit+0x40>)
 8002c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c7c:	61d3      	str	r3, [r2, #28]
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_RTC_MspInit+0x40>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RTC_MspInit+0x44>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40002800 	.word	0x40002800
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	4242043c 	.word	0x4242043c

08002ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0318 	add.w	r3, r7, #24
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <HAL_UART_MspInit+0x108>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d132      	bne.n	8002d2a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc4:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	4a39      	ldr	r2, [pc, #228]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cce:	6193      	str	r3, [r2, #24]
 8002cd0:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cdc:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	6193      	str	r3, [r2, #24]
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0318 	add.w	r3, r7, #24
 8002d06:	4619      	mov	r1, r3
 8002d08:	482a      	ldr	r0, [pc, #168]	; (8002db4 <HAL_UART_MspInit+0x110>)
 8002d0a:	f000 ff9b 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1c:	f107 0318 	add.w	r3, r7, #24
 8002d20:	4619      	mov	r1, r3
 8002d22:	4824      	ldr	r0, [pc, #144]	; (8002db4 <HAL_UART_MspInit+0x110>)
 8002d24:	f000 ff8e 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d28:	e03c      	b.n	8002da4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <HAL_UART_MspInit+0x114>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d137      	bne.n	8002da4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d34:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3e:	61d3      	str	r3, [r2, #28]
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6193      	str	r3, [r2, #24]
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_UART_MspInit+0x10c>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8002d64:	2304      	movs	r3, #4
 8002d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8002d70:	f107 0318 	add.w	r3, r7, #24
 8002d74:	4619      	mov	r1, r3
 8002d76:	480f      	ldr	r0, [pc, #60]	; (8002db4 <HAL_UART_MspInit+0x110>)
 8002d78:	f000 ff64 	bl	8003c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 0318 	add.w	r3, r7, #24
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4809      	ldr	r0, [pc, #36]	; (8002db4 <HAL_UART_MspInit+0x110>)
 8002d90:	f000 ff58 	bl	8003c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d94:	2200      	movs	r2, #0
 8002d96:	2100      	movs	r1, #0
 8002d98:	2026      	movs	r0, #38	; 0x26
 8002d9a:	f000 fe60 	bl	8003a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d9e:	2026      	movs	r0, #38	; 0x26
 8002da0:	f000 fe79 	bl	8003a96 <HAL_NVIC_EnableIRQ>
}
 8002da4:	bf00      	nop
 8002da6:	3728      	adds	r7, #40	; 0x28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40010800 	.word	0x40010800
 8002db8:	40004400 	.word	0x40004400

08002dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <HardFault_Handler+0x4>

08002dce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <MemManage_Handler+0x4>

08002dd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <BusFault_Handler+0x4>

08002dda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <UsageFault_Handler+0x4>

08002de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e08:	f000 f8d8 	bl	8002fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <USART2_IRQHandler+0x10>)
 8002e16:	f003 fcab 	bl	8006770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000488 	.word	0x20000488

08002e24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <_sbrk+0x50>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <_sbrk+0x16>
		heap_end = &end;
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <_sbrk+0x50>)
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <_sbrk+0x54>)
 8002e38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <_sbrk+0x50>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <_sbrk+0x50>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	466a      	mov	r2, sp
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d907      	bls.n	8002e5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e4e:	f003 ffe1 	bl	8006e14 <__errno>
 8002e52:	4602      	mov	r2, r0
 8002e54:	230c      	movs	r3, #12
 8002e56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e58:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5c:	e006      	b.n	8002e6c <_sbrk+0x48>
	}

	heap_end += incr;
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <_sbrk+0x50>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	4a03      	ldr	r2, [pc, #12]	; (8002e74 <_sbrk+0x50>)
 8002e68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	2000020c 	.word	0x2000020c
 8002e78:	200004d8 	.word	0x200004d8

08002e7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e80:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <SystemInit+0x5c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <SystemInit+0x5c>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <SystemInit+0x5c>)
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	4911      	ldr	r1, [pc, #68]	; (8002ed8 <SystemInit+0x5c>)
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <SystemInit+0x60>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <SystemInit+0x5c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <SystemInit+0x5c>)
 8002e9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <SystemInit+0x5c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <SystemInit+0x5c>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <SystemInit+0x5c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <SystemInit+0x5c>)
 8002eba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002ebe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SystemInit+0x5c>)
 8002ec2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002ec6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <SystemInit+0x64>)
 8002eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ece:	609a      	str	r2, [r3, #8]
#endif 
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	f8ff0000 	.word	0xf8ff0000
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ee4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ee6:	e003      	b.n	8002ef0 <LoopCopyDataInit>

08002ee8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002eea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002eec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002eee:	3104      	adds	r1, #4

08002ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ef0:	480a      	ldr	r0, [pc, #40]	; (8002f1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ef4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ef6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ef8:	d3f6      	bcc.n	8002ee8 <CopyDataInit>
  ldr r2, =_sbss
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002efc:	e002      	b.n	8002f04 <LoopFillZerobss>

08002efe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f00:	f842 3b04 	str.w	r3, [r2], #4

08002f04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f08:	d3f9      	bcc.n	8002efe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f0a:	f7ff ffb7 	bl	8002e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f0e:	f003 ff87 	bl	8006e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f12:	f7ff fa63 	bl	80023dc <main>
  bx lr
 8002f16:	4770      	bx	lr
  ldr r3, =_sidata
 8002f18:	080095e0 	.word	0x080095e0
  ldr r0, =_sdata
 8002f1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f20:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002f24:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002f28:	200004d8 	.word	0x200004d8

08002f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC1_2_IRQHandler>
	...

08002f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_Init+0x28>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <HAL_Init+0x28>)
 8002f3a:	f043 0310 	orr.w	r3, r3, #16
 8002f3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f40:	2003      	movs	r0, #3
 8002f42:	f000 fd81 	bl	8003a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f000 f808 	bl	8002f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f4c:	f7ff fdda 	bl	8002b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40022000 	.word	0x40022000

08002f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_InitTick+0x54>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_InitTick+0x58>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fd99 	bl	8003ab2 <HAL_SYSTICK_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00e      	b.n	8002fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d80a      	bhi.n	8002fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f90:	2200      	movs	r2, #0
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f000 fd61 	bl	8003a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f9c:	4a06      	ldr	r2, [pc, #24]	; (8002fb8 <HAL_InitTick+0x5c>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	20000008 	.word	0x20000008
 8002fb8:	20000004 	.word	0x20000004

08002fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_IncTick+0x1c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_IncTick+0x20>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a03      	ldr	r2, [pc, #12]	; (8002fdc <HAL_IncTick+0x20>)
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	200004d0 	.word	0x200004d0

08002fe0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe4:	4b02      	ldr	r3, [pc, #8]	; (8002ff0 <HAL_GetTick+0x10>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	200004d0 	.word	0x200004d0

08002ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff fff0 	bl	8002fe0 <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d005      	beq.n	800301a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_Delay+0x40>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800301a:	bf00      	nop
 800301c:	f7ff ffe0 	bl	8002fe0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	429a      	cmp	r2, r3
 800302a:	d8f7      	bhi.n	800301c <HAL_Delay+0x28>
  {
  }
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000008 	.word	0x20000008

08003038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0be      	b.n	80031d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fd76 	bl	8002b68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fbdd 	bl	800383c <ADC_ConversionStop_Disable>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8099 	bne.w	80031c6 <HAL_ADC_Init+0x18e>
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 8095 	bne.w	80031c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030a4:	f023 0302 	bic.w	r3, r3, #2
 80030a8:	f043 0202 	orr.w	r2, r3, #2
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7b1b      	ldrb	r3, [r3, #12]
 80030be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d0:	d003      	beq.n	80030da <HAL_ADC_Init+0xa2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <HAL_ADC_Init+0xa8>
 80030da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030de:	e000      	b.n	80030e2 <HAL_ADC_Init+0xaa>
 80030e0:	2300      	movs	r3, #0
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7d1b      	ldrb	r3, [r3, #20]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d119      	bne.n	8003124 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7b1b      	ldrb	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	035a      	lsls	r2, r3, #13
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e00b      	b.n	8003124 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_ADC_Init+0x1a8>)
 8003140:	4013      	ands	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	430b      	orrs	r3, r1
 800314a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003154:	d003      	beq.n	800315e <HAL_ADC_Init+0x126>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d104      	bne.n	8003168 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	3b01      	subs	r3, #1
 8003164:	051b      	lsls	r3, r3, #20
 8003166:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	430a      	orrs	r2, r1
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <HAL_ADC_Init+0x1ac>)
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	d10b      	bne.n	80031a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031a2:	e018      	b.n	80031d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	f023 0312 	bic.w	r3, r3, #18
 80031ac:	f043 0210 	orr.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031c4:	e007      	b.n	80031d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	f043 0210 	orr.w	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	ffe1f7fd 	.word	0xffe1f7fd
 80031e4:	ff1f0efe 	.word	0xff1f0efe

080031e8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Start+0x1a>
 80031fe:	2302      	movs	r3, #2
 8003200:	e098      	b.n	8003334 <HAL_ADC_Start+0x14c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fac4 	bl	8003798 <ADC_Enable>
 8003210:	4603      	mov	r3, r0
 8003212:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 8087 	bne.w	800332a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a41      	ldr	r2, [pc, #260]	; (800333c <HAL_ADC_Start+0x154>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d105      	bne.n	8003246 <HAL_ADC_Start+0x5e>
 800323a:	4b41      	ldr	r3, [pc, #260]	; (8003340 <HAL_ADC_Start+0x158>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d115      	bne.n	8003272 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d026      	beq.n	80032ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003268:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003270:	e01d      	b.n	80032ae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <HAL_ADC_Start+0x158>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_ADC_Start+0xaa>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2b      	ldr	r2, [pc, #172]	; (800333c <HAL_ADC_Start+0x154>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10d      	bne.n	80032ae <HAL_ADC_Start+0xc6>
 8003292:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <HAL_ADC_Start+0x158>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d006      	beq.n	80032c8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	f023 0206 	bic.w	r2, r3, #6
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80032c6:	e002      	b.n	80032ce <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f06f 0202 	mvn.w	r2, #2
 80032de:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032ee:	d113      	bne.n	8003318 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032f4:	4a11      	ldr	r2, [pc, #68]	; (800333c <HAL_ADC_Start+0x154>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d105      	bne.n	8003306 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_ADC_Start+0x158>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003302:	2b00      	cmp	r3, #0
 8003304:	d108      	bne.n	8003318 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	e00c      	b.n	8003332 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	e003      	b.n	8003332 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40012800 	.word	0x40012800
 8003340:	40012400 	.word	0x40012400

08003344 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADC_Stop+0x1a>
 800335a:	2302      	movs	r3, #2
 800335c:	e01a      	b.n	8003394 <HAL_ADC_Stop+0x50>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa68 	bl	800383c <ADC_ConversionStop_Disable>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f043 0201 	orr.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80033b2:	f7ff fe15 	bl	8002fe0 <HAL_GetTick>
 80033b6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0c8      	b.n	8003570 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d12a      	bne.n	8003442 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d123      	bne.n	8003442 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80033fa:	e01a      	b.n	8003432 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d016      	beq.n	8003432 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_ADC_PollForConversion+0x7e>
 800340a:	f7ff fde9 	bl	8002fe0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d20b      	bcs.n	8003432 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341e:	f043 0204 	orr.w	r2, r3, #4
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e09e      	b.n	8003570 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0dd      	beq.n	80033fc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003440:	e06c      	b.n	800351c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003442:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <HAL_ADC_PollForConversion+0x1dc>)
 8003444:	681c      	ldr	r4, [r3, #0]
 8003446:	2002      	movs	r0, #2
 8003448:	f002 f9f2 	bl	8005830 <HAL_RCCEx_GetPeriphCLKFreq>
 800344c:	4603      	mov	r3, r0
 800344e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6919      	ldr	r1, [r3, #16]
 8003458:	4b48      	ldr	r3, [pc, #288]	; (800357c <HAL_ADC_PollForConversion+0x1e0>)
 800345a:	400b      	ands	r3, r1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d118      	bne.n	8003492 <HAL_ADC_PollForConversion+0xf6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68d9      	ldr	r1, [r3, #12]
 8003466:	4b46      	ldr	r3, [pc, #280]	; (8003580 <HAL_ADC_PollForConversion+0x1e4>)
 8003468:	400b      	ands	r3, r1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d111      	bne.n	8003492 <HAL_ADC_PollForConversion+0xf6>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6919      	ldr	r1, [r3, #16]
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_ADC_PollForConversion+0x1e8>)
 8003476:	400b      	ands	r3, r1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d108      	bne.n	800348e <HAL_ADC_PollForConversion+0xf2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68d9      	ldr	r1, [r3, #12]
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_ADC_PollForConversion+0x1ec>)
 8003484:	400b      	ands	r3, r1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_ADC_PollForConversion+0xf2>
 800348a:	2314      	movs	r3, #20
 800348c:	e020      	b.n	80034d0 <HAL_ADC_PollForConversion+0x134>
 800348e:	2329      	movs	r3, #41	; 0x29
 8003490:	e01e      	b.n	80034d0 <HAL_ADC_PollForConversion+0x134>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6919      	ldr	r1, [r3, #16]
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_ADC_PollForConversion+0x1e8>)
 800349a:	400b      	ands	r3, r1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <HAL_ADC_PollForConversion+0x112>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68d9      	ldr	r1, [r3, #12]
 80034a6:	4b38      	ldr	r3, [pc, #224]	; (8003588 <HAL_ADC_PollForConversion+0x1ec>)
 80034a8:	400b      	ands	r3, r1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <HAL_ADC_PollForConversion+0x12e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6919      	ldr	r1, [r3, #16]
 80034b4:	4b35      	ldr	r3, [pc, #212]	; (800358c <HAL_ADC_PollForConversion+0x1f0>)
 80034b6:	400b      	ands	r3, r1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d108      	bne.n	80034ce <HAL_ADC_PollForConversion+0x132>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68d9      	ldr	r1, [r3, #12]
 80034c2:	4b32      	ldr	r3, [pc, #200]	; (800358c <HAL_ADC_PollForConversion+0x1f0>)
 80034c4:	400b      	ands	r3, r1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_PollForConversion+0x132>
 80034ca:	2354      	movs	r3, #84	; 0x54
 80034cc:	e000      	b.n	80034d0 <HAL_ADC_PollForConversion+0x134>
 80034ce:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80034d6:	e01d      	b.n	8003514 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d016      	beq.n	800350e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_ADC_PollForConversion+0x15a>
 80034e6:	f7ff fd7b 	bl	8002fe0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d20b      	bcs.n	800350e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	f043 0204 	orr.w	r2, r3, #4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e030      	b.n	8003570 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3301      	adds	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	429a      	cmp	r2, r3
 800351a:	d8dd      	bhi.n	80034d8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0212 	mvn.w	r2, #18
 8003524:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800353c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003540:	d115      	bne.n	800356e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003546:	2b00      	cmp	r3, #0
 8003548:	d111      	bne.n	800356e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d105      	bne.n	800356e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	f043 0201 	orr.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	bd90      	pop	{r4, r7, pc}
 8003578:	20000000 	.word	0x20000000
 800357c:	24924924 	.word	0x24924924
 8003580:	00924924 	.word	0x00924924
 8003584:	12492492 	.word	0x12492492
 8003588:	00492492 	.word	0x00492492
 800358c:	00249249 	.word	0x00249249

08003590 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x20>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e0dc      	b.n	8003782 <HAL_ADC_ConfigChannel+0x1da>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b06      	cmp	r3, #6
 80035d6:	d81c      	bhi.n	8003612 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	3b05      	subs	r3, #5
 80035ea:	221f      	movs	r2, #31
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4019      	ands	r1, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b05      	subs	r3, #5
 8003604:	fa00 f203 	lsl.w	r2, r0, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	635a      	str	r2, [r3, #52]	; 0x34
 8003610:	e03c      	b.n	800368c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d81c      	bhi.n	8003654 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	3b23      	subs	r3, #35	; 0x23
 800362c:	221f      	movs	r2, #31
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	4019      	ands	r1, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	3b23      	subs	r3, #35	; 0x23
 8003646:	fa00 f203 	lsl.w	r2, r0, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
 8003652:	e01b      	b.n	800368c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	3b41      	subs	r3, #65	; 0x41
 8003666:	221f      	movs	r2, #31
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	4019      	ands	r1, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	3b41      	subs	r3, #65	; 0x41
 8003680:	fa00 f203 	lsl.w	r2, r0, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b09      	cmp	r3, #9
 8003692:	d91c      	bls.n	80036ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68d9      	ldr	r1, [r3, #12]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	3b1e      	subs	r3, #30
 80036a6:	2207      	movs	r2, #7
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	4019      	ands	r1, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6898      	ldr	r0, [r3, #8]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	3b1e      	subs	r3, #30
 80036c0:	fa00 f203 	lsl.w	r2, r0, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	e019      	b.n	8003702 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6919      	ldr	r1, [r3, #16]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	2207      	movs	r2, #7
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	4019      	ands	r1, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6898      	ldr	r0, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	fa00 f203 	lsl.w	r2, r0, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b10      	cmp	r3, #16
 8003708:	d003      	beq.n	8003712 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800370e:	2b11      	cmp	r3, #17
 8003710:	d132      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_ADC_ConfigChannel+0x1e4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d125      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d126      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003738:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b10      	cmp	r3, #16
 8003740:	d11a      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_ADC_ConfigChannel+0x1e8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <HAL_ADC_ConfigChannel+0x1ec>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	0c9a      	lsrs	r2, r3, #18
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003758:	e002      	b.n	8003760 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3b01      	subs	r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f9      	bne.n	800375a <HAL_ADC_ConfigChannel+0x1b2>
 8003766:	e007      	b.n	8003778 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40012400 	.word	0x40012400
 8003790:	20000000 	.word	0x20000000
 8003794:	431bde83 	.word	0x431bde83

08003798 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d039      	beq.n	800382a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037c6:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <ADC_Enable+0x9c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <ADC_Enable+0xa0>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	0c9b      	lsrs	r3, r3, #18
 80037d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037d4:	e002      	b.n	80037dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f9      	bne.n	80037d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037e2:	f7ff fbfd 	bl	8002fe0 <HAL_GetTick>
 80037e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037e8:	e018      	b.n	800381c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037ea:	f7ff fbf9 	bl	8002fe0 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d911      	bls.n	800381c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	f043 0210 	orr.w	r2, r3, #16
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e007      	b.n	800382c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d1df      	bne.n	80037ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000000 	.word	0x20000000
 8003838:	431bde83 	.word	0x431bde83

0800383c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d127      	bne.n	80038a6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003866:	f7ff fbbb 	bl	8002fe0 <HAL_GetTick>
 800386a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800386c:	e014      	b.n	8003898 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800386e:	f7ff fbb7 	bl	8002fe0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d90d      	bls.n	8003898 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f043 0210 	orr.w	r2, r3, #16
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f043 0201 	orr.w	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e007      	b.n	80038a8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d0e3      	beq.n	800386e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <__NVIC_SetPriorityGrouping>:
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038cc:	4013      	ands	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e2:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	60d3      	str	r3, [r2, #12]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <__NVIC_GetPriorityGrouping>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <__NVIC_GetPriorityGrouping+0x18>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	f003 0307 	and.w	r3, r3, #7
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_EnableIRQ>:
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	2b00      	cmp	r3, #0
 8003924:	db0b      	blt.n	800393e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	4906      	ldr	r1, [pc, #24]	; (8003948 <__NVIC_EnableIRQ+0x34>)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2001      	movs	r0, #1
 8003936:	fa00 f202 	lsl.w	r2, r0, r2
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	e000e100 	.word	0xe000e100

0800394c <__NVIC_SetPriority>:
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	6039      	str	r1, [r7, #0]
 8003956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	2b00      	cmp	r3, #0
 800395e:	db0a      	blt.n	8003976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	490c      	ldr	r1, [pc, #48]	; (8003998 <__NVIC_SetPriority+0x4c>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	440b      	add	r3, r1
 8003970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003974:	e00a      	b.n	800398c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4908      	ldr	r1, [pc, #32]	; (800399c <__NVIC_SetPriority+0x50>)
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	3b04      	subs	r3, #4
 8003984:	0112      	lsls	r2, r2, #4
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	440b      	add	r3, r1
 800398a:	761a      	strb	r2, [r3, #24]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <NVIC_EncodePriority>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	; 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f1c3 0307 	rsb	r3, r3, #7
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	bf28      	it	cs
 80039be:	2304      	movcs	r3, #4
 80039c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d902      	bls.n	80039d0 <NVIC_EncodePriority+0x30>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3b03      	subs	r3, #3
 80039ce:	e000      	b.n	80039d2 <NVIC_EncodePriority+0x32>
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43da      	mvns	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	401a      	ands	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43d9      	mvns	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	4313      	orrs	r3, r2
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a14:	d301      	bcc.n	8003a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00f      	b.n	8003a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <SysTick_Config+0x40>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a22:	210f      	movs	r1, #15
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f7ff ff90 	bl	800394c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <SysTick_Config+0x40>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <SysTick_Config+0x40>)
 8003a34:	2207      	movs	r2, #7
 8003a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	e000e010 	.word	0xe000e010

08003a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff2d 	bl	80038b0 <__NVIC_SetPriorityGrouping>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b086      	sub	sp, #24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a70:	f7ff ff42 	bl	80038f8 <__NVIC_GetPriorityGrouping>
 8003a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	6978      	ldr	r0, [r7, #20]
 8003a7c:	f7ff ff90 	bl	80039a0 <NVIC_EncodePriority>
 8003a80:	4602      	mov	r2, r0
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff5f 	bl	800394c <__NVIC_SetPriority>
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff35 	bl	8003914 <__NVIC_EnableIRQ>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ffa2 	bl	8003a04 <SysTick_Config>
 8003ac0:	4603      	mov	r3, r0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d008      	beq.n	8003af2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e020      	b.n	8003b34 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 020e 	bic.w	r2, r2, #14
 8003b00:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d005      	beq.n	8003b62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	e051      	b.n	8003c06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 020e 	bic.w	r2, r2, #14
 8003b70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <HAL_DMA_Abort_IT+0xd0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d029      	beq.n	8003be0 <HAL_DMA_Abort_IT+0xa0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_DMA_Abort_IT+0xd4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d022      	beq.n	8003bdc <HAL_DMA_Abort_IT+0x9c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <HAL_DMA_Abort_IT+0xd8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d01a      	beq.n	8003bd6 <HAL_DMA_Abort_IT+0x96>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_DMA_Abort_IT+0xdc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d012      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x90>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <HAL_DMA_Abort_IT+0xe0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00a      	beq.n	8003bca <HAL_DMA_Abort_IT+0x8a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_DMA_Abort_IT+0xe4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d102      	bne.n	8003bc4 <HAL_DMA_Abort_IT+0x84>
 8003bbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bc2:	e00e      	b.n	8003be2 <HAL_DMA_Abort_IT+0xa2>
 8003bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc8:	e00b      	b.n	8003be2 <HAL_DMA_Abort_IT+0xa2>
 8003bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bce:	e008      	b.n	8003be2 <HAL_DMA_Abort_IT+0xa2>
 8003bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd4:	e005      	b.n	8003be2 <HAL_DMA_Abort_IT+0xa2>
 8003bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bda:	e002      	b.n	8003be2 <HAL_DMA_Abort_IT+0xa2>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	e000      	b.n	8003be2 <HAL_DMA_Abort_IT+0xa2>
 8003be0:	2301      	movs	r3, #1
 8003be2:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <HAL_DMA_Abort_IT+0xe8>)
 8003be4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
    } 
  }
  return status;
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40020008 	.word	0x40020008
 8003c14:	4002001c 	.word	0x4002001c
 8003c18:	40020030 	.word	0x40020030
 8003c1c:	40020044 	.word	0x40020044
 8003c20:	40020058 	.word	0x40020058
 8003c24:	4002006c 	.word	0x4002006c
 8003c28:	40020000 	.word	0x40020000

08003c2c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b08b      	sub	sp, #44	; 0x2c
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c52:	2300      	movs	r3, #0
 8003c54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c56:	e127      	b.n	8003ea8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c58:	2201      	movs	r2, #1
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	f040 8116 	bne.w	8003ea2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b12      	cmp	r3, #18
 8003c7c:	d034      	beq.n	8003ce8 <HAL_GPIO_Init+0xa4>
 8003c7e:	2b12      	cmp	r3, #18
 8003c80:	d80d      	bhi.n	8003c9e <HAL_GPIO_Init+0x5a>
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d02b      	beq.n	8003cde <HAL_GPIO_Init+0x9a>
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d804      	bhi.n	8003c94 <HAL_GPIO_Init+0x50>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d031      	beq.n	8003cf2 <HAL_GPIO_Init+0xae>
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d01c      	beq.n	8003ccc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c92:	e048      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d043      	beq.n	8003d20 <HAL_GPIO_Init+0xdc>
 8003c98:	2b11      	cmp	r3, #17
 8003c9a:	d01b      	beq.n	8003cd4 <HAL_GPIO_Init+0x90>
          break;
 8003c9c:	e043      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c9e:	4a89      	ldr	r2, [pc, #548]	; (8003ec4 <HAL_GPIO_Init+0x280>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d026      	beq.n	8003cf2 <HAL_GPIO_Init+0xae>
 8003ca4:	4a87      	ldr	r2, [pc, #540]	; (8003ec4 <HAL_GPIO_Init+0x280>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d806      	bhi.n	8003cb8 <HAL_GPIO_Init+0x74>
 8003caa:	4a87      	ldr	r2, [pc, #540]	; (8003ec8 <HAL_GPIO_Init+0x284>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d020      	beq.n	8003cf2 <HAL_GPIO_Init+0xae>
 8003cb0:	4a86      	ldr	r2, [pc, #536]	; (8003ecc <HAL_GPIO_Init+0x288>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_GPIO_Init+0xae>
          break;
 8003cb6:	e036      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003cb8:	4a85      	ldr	r2, [pc, #532]	; (8003ed0 <HAL_GPIO_Init+0x28c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d019      	beq.n	8003cf2 <HAL_GPIO_Init+0xae>
 8003cbe:	4a85      	ldr	r2, [pc, #532]	; (8003ed4 <HAL_GPIO_Init+0x290>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d016      	beq.n	8003cf2 <HAL_GPIO_Init+0xae>
 8003cc4:	4a84      	ldr	r2, [pc, #528]	; (8003ed8 <HAL_GPIO_Init+0x294>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_GPIO_Init+0xae>
          break;
 8003cca:	e02c      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	623b      	str	r3, [r7, #32]
          break;
 8003cd2:	e028      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	623b      	str	r3, [r7, #32]
          break;
 8003cdc:	e023      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	623b      	str	r3, [r7, #32]
          break;
 8003ce6:	e01e      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	330c      	adds	r3, #12
 8003cee:	623b      	str	r3, [r7, #32]
          break;
 8003cf0:	e019      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	623b      	str	r3, [r7, #32]
          break;
 8003cfe:	e012      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d08:	2308      	movs	r3, #8
 8003d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	611a      	str	r2, [r3, #16]
          break;
 8003d12:	e008      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d14:	2308      	movs	r3, #8
 8003d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	615a      	str	r2, [r3, #20]
          break;
 8003d1e:	e002      	b.n	8003d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d20:	2300      	movs	r3, #0
 8003d22:	623b      	str	r3, [r7, #32]
          break;
 8003d24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2bff      	cmp	r3, #255	; 0xff
 8003d2a:	d801      	bhi.n	8003d30 <HAL_GPIO_Init+0xec>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	e001      	b.n	8003d34 <HAL_GPIO_Init+0xf0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2bff      	cmp	r3, #255	; 0xff
 8003d3a:	d802      	bhi.n	8003d42 <HAL_GPIO_Init+0xfe>
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	e002      	b.n	8003d48 <HAL_GPIO_Init+0x104>
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	3b08      	subs	r3, #8
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	210f      	movs	r1, #15
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	401a      	ands	r2, r3
 8003d5a:	6a39      	ldr	r1, [r7, #32]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	431a      	orrs	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8096 	beq.w	8003ea2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d76:	4b59      	ldr	r3, [pc, #356]	; (8003edc <HAL_GPIO_Init+0x298>)
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	4a58      	ldr	r2, [pc, #352]	; (8003edc <HAL_GPIO_Init+0x298>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	6193      	str	r3, [r2, #24]
 8003d82:	4b56      	ldr	r3, [pc, #344]	; (8003edc <HAL_GPIO_Init+0x298>)
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d8e:	4a54      	ldr	r2, [pc, #336]	; (8003ee0 <HAL_GPIO_Init+0x29c>)
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	3302      	adds	r3, #2
 8003d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4b      	ldr	r2, [pc, #300]	; (8003ee4 <HAL_GPIO_Init+0x2a0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_GPIO_Init+0x19e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ee8 <HAL_GPIO_Init+0x2a4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00d      	beq.n	8003dde <HAL_GPIO_Init+0x19a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a49      	ldr	r2, [pc, #292]	; (8003eec <HAL_GPIO_Init+0x2a8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <HAL_GPIO_Init+0x196>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a48      	ldr	r2, [pc, #288]	; (8003ef0 <HAL_GPIO_Init+0x2ac>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_GPIO_Init+0x192>
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e006      	b.n	8003de4 <HAL_GPIO_Init+0x1a0>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	e004      	b.n	8003de4 <HAL_GPIO_Init+0x1a0>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e002      	b.n	8003de4 <HAL_GPIO_Init+0x1a0>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_GPIO_Init+0x1a0>
 8003de2:	2300      	movs	r3, #0
 8003de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de6:	f002 0203 	and.w	r2, r2, #3
 8003dea:	0092      	lsls	r2, r2, #2
 8003dec:	4093      	lsls	r3, r2
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003df4:	493a      	ldr	r1, [pc, #232]	; (8003ee0 <HAL_GPIO_Init+0x29c>)
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d006      	beq.n	8003e1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e0e:	4b39      	ldr	r3, [pc, #228]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4938      	ldr	r1, [pc, #224]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
 8003e1a:	e006      	b.n	8003e2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e1c:	4b35      	ldr	r3, [pc, #212]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	4933      	ldr	r1, [pc, #204]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e36:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	492e      	ldr	r1, [pc, #184]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
 8003e42:	e006      	b.n	8003e52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	4929      	ldr	r1, [pc, #164]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d006      	beq.n	8003e6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e5e:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	4924      	ldr	r1, [pc, #144]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
 8003e6a:	e006      	b.n	8003e7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e6c:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	491f      	ldr	r1, [pc, #124]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d006      	beq.n	8003e94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	491a      	ldr	r1, [pc, #104]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60cb      	str	r3, [r1, #12]
 8003e92:	e006      	b.n	8003ea2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e94:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	4915      	ldr	r1, [pc, #84]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f47f aed0 	bne.w	8003c58 <HAL_GPIO_Init+0x14>
  }
}
 8003eb8:	bf00      	nop
 8003eba:	372c      	adds	r7, #44	; 0x2c
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	10210000 	.word	0x10210000
 8003ec8:	10110000 	.word	0x10110000
 8003ecc:	10120000 	.word	0x10120000
 8003ed0:	10310000 	.word	0x10310000
 8003ed4:	10320000 	.word	0x10320000
 8003ed8:	10220000 	.word	0x10220000
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40010800 	.word	0x40010800
 8003ee8:	40010c00 	.word	0x40010c00
 8003eec:	40011000 	.word	0x40011000
 8003ef0:	40011400 	.word	0x40011400
 8003ef4:	40010400 	.word	0x40010400

08003ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
 8003f04:	4613      	mov	r3, r2
 8003f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f08:	787b      	ldrb	r3, [r7, #1]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f14:	e003      	b.n	8003f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	041a      	lsls	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	887b      	ldrh	r3, [r7, #2]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f40:	887a      	ldrh	r2, [r7, #2]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003f46:	e002      	b.n	8003f4e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f48:	887a      	ldrh	r2, [r7, #2]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	611a      	str	r2, [r3, #16]
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e10f      	b.n	800418a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fe fe2e 	bl	8002be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f001 fb4c 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4a7b      	ldr	r2, [pc, #492]	; (8004194 <HAL_I2C_Init+0x23c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d807      	bhi.n	8003fbc <HAL_I2C_Init+0x64>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a7a      	ldr	r2, [pc, #488]	; (8004198 <HAL_I2C_Init+0x240>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	bf94      	ite	ls
 8003fb4:	2301      	movls	r3, #1
 8003fb6:	2300      	movhi	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e006      	b.n	8003fca <HAL_I2C_Init+0x72>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a77      	ldr	r2, [pc, #476]	; (800419c <HAL_I2C_Init+0x244>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	bf94      	ite	ls
 8003fc4:	2301      	movls	r3, #1
 8003fc6:	2300      	movhi	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0db      	b.n	800418a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a72      	ldr	r2, [pc, #456]	; (80041a0 <HAL_I2C_Init+0x248>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0c9b      	lsrs	r3, r3, #18
 8003fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a64      	ldr	r2, [pc, #400]	; (8004194 <HAL_I2C_Init+0x23c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d802      	bhi.n	800400c <HAL_I2C_Init+0xb4>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3301      	adds	r3, #1
 800400a:	e009      	b.n	8004020 <HAL_I2C_Init+0xc8>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	4a63      	ldr	r2, [pc, #396]	; (80041a4 <HAL_I2C_Init+0x24c>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	3301      	adds	r3, #1
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	430b      	orrs	r3, r1
 8004026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4956      	ldr	r1, [pc, #344]	; (8004194 <HAL_I2C_Init+0x23c>)
 800403c:	428b      	cmp	r3, r1
 800403e:	d80d      	bhi.n	800405c <HAL_I2C_Init+0x104>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e59      	subs	r1, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fbb1 f3f3 	udiv	r3, r1, r3
 800404e:	3301      	adds	r3, #1
 8004050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004054:	2b04      	cmp	r3, #4
 8004056:	bf38      	it	cc
 8004058:	2304      	movcc	r3, #4
 800405a:	e04f      	b.n	80040fc <HAL_I2C_Init+0x1a4>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d111      	bne.n	8004088 <HAL_I2C_Init+0x130>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1e58      	subs	r0, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	440b      	add	r3, r1
 8004072:	fbb0 f3f3 	udiv	r3, r0, r3
 8004076:	3301      	adds	r3, #1
 8004078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e012      	b.n	80040ae <HAL_I2C_Init+0x156>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	0099      	lsls	r1, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	fbb0 f3f3 	udiv	r3, r0, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Init+0x15e>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e022      	b.n	80040fc <HAL_I2C_Init+0x1a4>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10e      	bne.n	80040dc <HAL_I2C_Init+0x184>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1e58      	subs	r0, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6859      	ldr	r1, [r3, #4]
 80040c6:	460b      	mov	r3, r1
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	440b      	add	r3, r1
 80040cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040da:	e00f      	b.n	80040fc <HAL_I2C_Init+0x1a4>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e58      	subs	r0, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	0099      	lsls	r1, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f2:	3301      	adds	r3, #1
 80040f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	6809      	ldr	r1, [r1, #0]
 8004100:	4313      	orrs	r3, r2
 8004102:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800412a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6911      	ldr	r1, [r2, #16]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68d2      	ldr	r2, [r2, #12]
 8004136:	4311      	orrs	r1, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	430b      	orrs	r3, r1
 800413e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	000186a0 	.word	0x000186a0
 8004198:	001e847f 	.word	0x001e847f
 800419c:	003d08ff 	.word	0x003d08ff
 80041a0:	431bde83 	.word	0x431bde83
 80041a4:	10624dd3 	.word	0x10624dd3

080041a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	4608      	mov	r0, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	461a      	mov	r2, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	817b      	strh	r3, [r7, #10]
 80041ba:	460b      	mov	r3, r1
 80041bc:	813b      	strh	r3, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041c2:	f7fe ff0d 	bl	8002fe0 <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	f040 80d9 	bne.w	8004388 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	2319      	movs	r3, #25
 80041dc:	2201      	movs	r2, #1
 80041de:	496d      	ldr	r1, [pc, #436]	; (8004394 <HAL_I2C_Mem_Write+0x1ec>)
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fc6b 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	e0cc      	b.n	800438a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_I2C_Mem_Write+0x56>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e0c5      	b.n	800438a <HAL_I2C_Mem_Write+0x1e2>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d007      	beq.n	8004224 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004232:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2221      	movs	r2, #33	; 0x21
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2240      	movs	r2, #64	; 0x40
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a4d      	ldr	r2, [pc, #308]	; (8004398 <HAL_I2C_Mem_Write+0x1f0>)
 8004264:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004266:	88f8      	ldrh	r0, [r7, #6]
 8004268:	893a      	ldrh	r2, [r7, #8]
 800426a:	8979      	ldrh	r1, [r7, #10]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	4603      	mov	r3, r0
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fac6 	bl	8004808 <I2C_RequestMemoryWrite>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d052      	beq.n	8004328 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e081      	b.n	800438a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fcec 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2b04      	cmp	r3, #4
 800429c:	d107      	bne.n	80042ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e06b      	b.n	800438a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d11b      	bne.n	8004328 <HAL_I2C_Mem_Write+0x180>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d017      	beq.n	8004328 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1aa      	bne.n	8004286 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fcd8 	bl	8004cea <I2C_WaitOnBTFFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00d      	beq.n	800435c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	2b04      	cmp	r3, #4
 8004346:	d107      	bne.n	8004358 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e016      	b.n	800438a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	e000      	b.n	800438a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	00100002 	.word	0x00100002
 8004398:	ffff0000 	.word	0xffff0000

0800439c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	; 0x30
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	817b      	strh	r3, [r7, #10]
 80043ae:	460b      	mov	r3, r1
 80043b0:	813b      	strh	r3, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043b6:	f7fe fe13 	bl	8002fe0 <HAL_GetTick>
 80043ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	f040 8218 	bne.w	80047fa <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2319      	movs	r3, #25
 80043d0:	2201      	movs	r2, #1
 80043d2:	4981      	ldr	r1, [pc, #516]	; (80045d8 <HAL_I2C_Mem_Read+0x23c>)
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fb71 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
 80043e2:	e20b      	b.n	80047fc <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_I2C_Mem_Read+0x56>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e204      	b.n	80047fc <HAL_I2C_Mem_Read+0x460>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d007      	beq.n	8004418 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004426:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2222      	movs	r2, #34	; 0x22
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2240      	movs	r2, #64	; 0x40
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a61      	ldr	r2, [pc, #388]	; (80045dc <HAL_I2C_Mem_Read+0x240>)
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800445a:	88f8      	ldrh	r0, [r7, #6]
 800445c:	893a      	ldrh	r2, [r7, #8]
 800445e:	8979      	ldrh	r1, [r7, #10]
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	4603      	mov	r3, r0
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa56 	bl	800491c <I2C_RequestMemoryRead>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e1c0      	b.n	80047fc <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d113      	bne.n	80044aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	623b      	str	r3, [r7, #32]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	623b      	str	r3, [r7, #32]
 8004496:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e194      	b.n	80047d4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d11d      	bne.n	80044ee <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044c2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c4:	2300      	movs	r3, #0
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044ea:	b662      	cpsie	i
 80044ec:	e172      	b.n	80047d4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d11d      	bne.n	8004532 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004506:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800452e:	b662      	cpsie	i
 8004530:	e150      	b.n	80047d4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004540:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004558:	e13c      	b.n	80047d4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	2b03      	cmp	r3, #3
 8004560:	f200 80f5 	bhi.w	800474e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004568:	2b01      	cmp	r3, #1
 800456a:	d123      	bne.n	80045b4 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fbfb 	bl	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e13d      	b.n	80047fc <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045b2:	e10f      	b.n	80047d4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d150      	bne.n	800465e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	2200      	movs	r2, #0
 80045c4:	4906      	ldr	r1, [pc, #24]	; (80045e0 <HAL_I2C_Mem_Read+0x244>)
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fa78 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e112      	b.n	80047fc <HAL_I2C_Mem_Read+0x460>
 80045d6:	bf00      	nop
 80045d8:	00100002 	.word	0x00100002
 80045dc:	ffff0000 	.word	0xffff0000
 80045e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045e4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004628:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800465c:	e0ba      	b.n	80047d4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2200      	movs	r2, #0
 8004666:	4967      	ldr	r1, [pc, #412]	; (8004804 <HAL_I2C_Mem_Read+0x468>)
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fa27 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0c1      	b.n	80047fc <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004686:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004688:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	2200      	movs	r2, #0
 80046c4:	494f      	ldr	r1, [pc, #316]	; (8004804 <HAL_I2C_Mem_Read+0x468>)
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f9f8 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e092      	b.n	80047fc <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004718:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800474c:	e042      	b.n	80047d4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800474e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004750:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fb0a 	bl	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e04c      	b.n	80047fc <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d118      	bne.n	80047d4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f47f aebe 	bne.w	800455a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e000      	b.n	80047fc <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80047fa:	2302      	movs	r3, #2
  }
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3728      	adds	r7, #40	; 0x28
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	00010004 	.word	0x00010004

08004808 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	4608      	mov	r0, r1
 8004812:	4611      	mov	r1, r2
 8004814:	461a      	mov	r2, r3
 8004816:	4603      	mov	r3, r0
 8004818:	817b      	strh	r3, [r7, #10]
 800481a:	460b      	mov	r3, r1
 800481c:	813b      	strh	r3, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004830:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	2200      	movs	r2, #0
 800483a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f93c 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e05f      	b.n	800490e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800484e:	897b      	ldrh	r3, [r7, #10]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800485c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	492d      	ldr	r1, [pc, #180]	; (8004918 <I2C_RequestMemoryWrite+0x110>)
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f980 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e04c      	b.n	800490e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800488a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488c:	6a39      	ldr	r1, [r7, #32]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f9ea 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00d      	beq.n	80048b6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d107      	bne.n	80048b2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e02b      	b.n	800490e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	611a      	str	r2, [r3, #16]
 80048c6:	e021      	b.n	800490c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048c8:	893b      	ldrh	r3, [r7, #8]
 80048ca:	0a1b      	lsrs	r3, r3, #8
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d8:	6a39      	ldr	r1, [r7, #32]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f9c4 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d107      	bne.n	80048fe <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e005      	b.n	800490e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004902:	893b      	ldrh	r3, [r7, #8]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	00010002 	.word	0x00010002

0800491c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	4608      	mov	r0, r1
 8004926:	4611      	mov	r1, r2
 8004928:	461a      	mov	r2, r3
 800492a:	4603      	mov	r3, r0
 800492c:	817b      	strh	r3, [r7, #10]
 800492e:	460b      	mov	r3, r1
 8004930:	813b      	strh	r3, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004944:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004954:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	2200      	movs	r2, #0
 800495e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f8aa 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e09e      	b.n	8004ab0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004972:	897b      	ldrh	r3, [r7, #10]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004980:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	494c      	ldr	r1, [pc, #304]	; (8004ab8 <I2C_RequestMemoryRead+0x19c>)
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f8ee 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e08b      	b.n	8004ab0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b0:	6a39      	ldr	r1, [r7, #32]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f958 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d107      	bne.n	80049d6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06a      	b.n	8004ab0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d105      	bne.n	80049ec <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049e0:	893b      	ldrh	r3, [r7, #8]
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	611a      	str	r2, [r3, #16]
 80049ea:	e021      	b.n	8004a30 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049ec:	893b      	ldrh	r3, [r7, #8]
 80049ee:	0a1b      	lsrs	r3, r3, #8
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fc:	6a39      	ldr	r1, [r7, #32]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f932 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00d      	beq.n	8004a26 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d107      	bne.n	8004a22 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e044      	b.n	8004ab0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a26:	893b      	ldrh	r3, [r7, #8]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	6a39      	ldr	r1, [r7, #32]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f917 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d107      	bne.n	8004a58 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e029      	b.n	8004ab0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f81f 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e013      	b.n	8004ab0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a88:	897b      	ldrh	r3, [r7, #10]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	6a3a      	ldr	r2, [r7, #32]
 8004a9c:	4906      	ldr	r1, [pc, #24]	; (8004ab8 <I2C_RequestMemoryRead+0x19c>)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f863 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	00010002 	.word	0x00010002

08004abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004acc:	e025      	b.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d021      	beq.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad6:	f7fe fa83 	bl	8002fe0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d116      	bne.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e023      	b.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10d      	bne.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	e00c      	b.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	43da      	mvns	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf0c      	ite	eq
 8004b52:	2301      	moveq	r3, #1
 8004b54:	2300      	movne	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d0b6      	beq.n	8004ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b78:	e051      	b.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d123      	bne.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ba2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f043 0204 	orr.w	r2, r3, #4
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e046      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d021      	beq.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fe fa01 	bl	8002fe0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d116      	bne.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e020      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10c      	bne.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	e00b      	b.n	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d18d      	bne.n	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c74:	e02d      	b.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f8ce 	bl	8004e18 <I2C_IsAcknowledgeFailed>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e02d      	b.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d021      	beq.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fe f9a7 	bl	8002fe0 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d116      	bne.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e007      	b.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d1ca      	bne.n	8004c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cf6:	e02d      	b.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f88d 	bl	8004e18 <I2C_IsAcknowledgeFailed>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e02d      	b.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d021      	beq.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d10:	f7fe f966 	bl	8002fe0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d302      	bcc.n	8004d26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d116      	bne.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e007      	b.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d1ca      	bne.n	8004cf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d78:	e042      	b.n	8004e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d119      	bne.n	8004dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0210 	mvn.w	r2, #16
 8004d90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e029      	b.n	8004e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbc:	f7fe f910 	bl	8002fe0 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d116      	bne.n	8004e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e007      	b.n	8004e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d1b5      	bne.n	8004d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2e:	d11b      	bne.n	8004e68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	f043 0204 	orr.w	r2, r3, #4
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
}
 8004e7e:	bf00      	nop
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	420e0020 	.word	0x420e0020

08004e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e26c      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8087 	beq.w	8004fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004eac:	4b92      	ldr	r3, [pc, #584]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 030c 	and.w	r3, r3, #12
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d00c      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004eb8:	4b8f      	ldr	r3, [pc, #572]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d112      	bne.n	8004eea <HAL_RCC_OscConfig+0x5e>
 8004ec4:	4b8c      	ldr	r3, [pc, #560]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed0:	d10b      	bne.n	8004eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed2:	4b89      	ldr	r3, [pc, #548]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d06c      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x12c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d168      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e246      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCC_OscConfig+0x76>
 8004ef4:	4b80      	ldr	r3, [pc, #512]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a7f      	ldr	r2, [pc, #508]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e02e      	b.n	8004f60 <HAL_RCC_OscConfig+0xd4>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x98>
 8004f0a:	4b7b      	ldr	r3, [pc, #492]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a7a      	ldr	r2, [pc, #488]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	4b78      	ldr	r3, [pc, #480]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a77      	ldr	r2, [pc, #476]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e01d      	b.n	8004f60 <HAL_RCC_OscConfig+0xd4>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCC_OscConfig+0xbc>
 8004f2e:	4b72      	ldr	r3, [pc, #456]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a71      	ldr	r2, [pc, #452]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4b6f      	ldr	r3, [pc, #444]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a6e      	ldr	r2, [pc, #440]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	e00b      	b.n	8004f60 <HAL_RCC_OscConfig+0xd4>
 8004f48:	4b6b      	ldr	r3, [pc, #428]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a6a      	ldr	r2, [pc, #424]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4b68      	ldr	r3, [pc, #416]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a67      	ldr	r2, [pc, #412]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d013      	beq.n	8004f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7fe f83a 	bl	8002fe0 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f70:	f7fe f836 	bl	8002fe0 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	; 0x64
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1fa      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f82:	4b5d      	ldr	r3, [pc, #372]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0xe4>
 8004f8e:	e014      	b.n	8004fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f90:	f7fe f826 	bl	8002fe0 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f98:	f7fe f822 	bl	8002fe0 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b64      	cmp	r3, #100	; 0x64
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e1e6      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004faa:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0x10c>
 8004fb6:	e000      	b.n	8004fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d063      	beq.n	800508e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fc6:	4b4c      	ldr	r3, [pc, #304]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 030c 	and.w	r3, r3, #12
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004fd2:	4b49      	ldr	r3, [pc, #292]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d11c      	bne.n	8005018 <HAL_RCC_OscConfig+0x18c>
 8004fde:	4b46      	ldr	r3, [pc, #280]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d116      	bne.n	8005018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fea:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_RCC_OscConfig+0x176>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d001      	beq.n	8005002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e1ba      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005002:	4b3d      	ldr	r3, [pc, #244]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4939      	ldr	r1, [pc, #228]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005016:	e03a      	b.n	800508e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d020      	beq.n	8005062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005020:	4b36      	ldr	r3, [pc, #216]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8005022:	2201      	movs	r2, #1
 8005024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7fd ffdb 	bl	8002fe0 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800502e:	f7fd ffd7 	bl	8002fe0 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e19b      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005040:	4b2d      	ldr	r3, [pc, #180]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4927      	ldr	r1, [pc, #156]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]
 8005060:	e015      	b.n	800508e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005062:	4b26      	ldr	r3, [pc, #152]	; (80050fc <HAL_RCC_OscConfig+0x270>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fd ffba 	bl	8002fe0 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005070:	f7fd ffb6 	bl	8002fe0 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e17a      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005082:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d03a      	beq.n	8005110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d019      	beq.n	80050d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <HAL_RCC_OscConfig+0x274>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a8:	f7fd ff9a 	bl	8002fe0 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b0:	f7fd ff96 	bl	8002fe0 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e15a      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050ce:	2001      	movs	r0, #1
 80050d0:	f000 fada 	bl	8005688 <RCC_Delay>
 80050d4:	e01c      	b.n	8005110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <HAL_RCC_OscConfig+0x274>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050dc:	f7fd ff80 	bl	8002fe0 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e2:	e00f      	b.n	8005104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050e4:	f7fd ff7c 	bl	8002fe0 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d908      	bls.n	8005104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e140      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	42420000 	.word	0x42420000
 8005100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005104:	4b9e      	ldr	r3, [pc, #632]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e9      	bne.n	80050e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80a6 	beq.w	800526a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800511e:	2300      	movs	r3, #0
 8005120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005122:	4b97      	ldr	r3, [pc, #604]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10d      	bne.n	800514a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800512e:	4b94      	ldr	r3, [pc, #592]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	4a93      	ldr	r2, [pc, #588]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005138:	61d3      	str	r3, [r2, #28]
 800513a:	4b91      	ldr	r3, [pc, #580]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005146:	2301      	movs	r3, #1
 8005148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514a:	4b8e      	ldr	r3, [pc, #568]	; (8005384 <HAL_RCC_OscConfig+0x4f8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d118      	bne.n	8005188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005156:	4b8b      	ldr	r3, [pc, #556]	; (8005384 <HAL_RCC_OscConfig+0x4f8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a8a      	ldr	r2, [pc, #552]	; (8005384 <HAL_RCC_OscConfig+0x4f8>)
 800515c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005162:	f7fd ff3d 	bl	8002fe0 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800516a:	f7fd ff39 	bl	8002fe0 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b64      	cmp	r3, #100	; 0x64
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0fd      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517c:	4b81      	ldr	r3, [pc, #516]	; (8005384 <HAL_RCC_OscConfig+0x4f8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f0      	beq.n	800516a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d106      	bne.n	800519e <HAL_RCC_OscConfig+0x312>
 8005190:	4b7b      	ldr	r3, [pc, #492]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	4a7a      	ldr	r2, [pc, #488]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	6213      	str	r3, [r2, #32]
 800519c:	e02d      	b.n	80051fa <HAL_RCC_OscConfig+0x36e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10c      	bne.n	80051c0 <HAL_RCC_OscConfig+0x334>
 80051a6:	4b76      	ldr	r3, [pc, #472]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	4a75      	ldr	r2, [pc, #468]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	6213      	str	r3, [r2, #32]
 80051b2:	4b73      	ldr	r3, [pc, #460]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	4a72      	ldr	r2, [pc, #456]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051b8:	f023 0304 	bic.w	r3, r3, #4
 80051bc:	6213      	str	r3, [r2, #32]
 80051be:	e01c      	b.n	80051fa <HAL_RCC_OscConfig+0x36e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b05      	cmp	r3, #5
 80051c6:	d10c      	bne.n	80051e2 <HAL_RCC_OscConfig+0x356>
 80051c8:	4b6d      	ldr	r3, [pc, #436]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	4a6c      	ldr	r2, [pc, #432]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051ce:	f043 0304 	orr.w	r3, r3, #4
 80051d2:	6213      	str	r3, [r2, #32]
 80051d4:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	4a69      	ldr	r2, [pc, #420]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	6213      	str	r3, [r2, #32]
 80051e0:	e00b      	b.n	80051fa <HAL_RCC_OscConfig+0x36e>
 80051e2:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4a66      	ldr	r2, [pc, #408]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	6213      	str	r3, [r2, #32]
 80051ee:	4b64      	ldr	r3, [pc, #400]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4a63      	ldr	r2, [pc, #396]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80051f4:	f023 0304 	bic.w	r3, r3, #4
 80051f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d015      	beq.n	800522e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005202:	f7fd feed 	bl	8002fe0 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005208:	e00a      	b.n	8005220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520a:	f7fd fee9 	bl	8002fe0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e0ab      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005220:	4b57      	ldr	r3, [pc, #348]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0ee      	beq.n	800520a <HAL_RCC_OscConfig+0x37e>
 800522c:	e014      	b.n	8005258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800522e:	f7fd fed7 	bl	8002fe0 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005234:	e00a      	b.n	800524c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005236:	f7fd fed3 	bl	8002fe0 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f241 3288 	movw	r2, #5000	; 0x1388
 8005244:	4293      	cmp	r3, r2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e095      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800524c:	4b4c      	ldr	r3, [pc, #304]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1ee      	bne.n	8005236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d105      	bne.n	800526a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800525e:	4b48      	ldr	r3, [pc, #288]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	4a47      	ldr	r2, [pc, #284]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8081 	beq.w	8005376 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005274:	4b42      	ldr	r3, [pc, #264]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 030c 	and.w	r3, r3, #12
 800527c:	2b08      	cmp	r3, #8
 800527e:	d061      	beq.n	8005344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d146      	bne.n	8005316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005288:	4b3f      	ldr	r3, [pc, #252]	; (8005388 <HAL_RCC_OscConfig+0x4fc>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528e:	f7fd fea7 	bl	8002fe0 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005296:	f7fd fea3 	bl	8002fe0 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e067      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052a8:	4b35      	ldr	r3, [pc, #212]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f0      	bne.n	8005296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052bc:	d108      	bne.n	80052d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052be:	4b30      	ldr	r3, [pc, #192]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	492d      	ldr	r1, [pc, #180]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052d0:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a19      	ldr	r1, [r3, #32]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	430b      	orrs	r3, r1
 80052e2:	4927      	ldr	r1, [pc, #156]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052e8:	4b27      	ldr	r3, [pc, #156]	; (8005388 <HAL_RCC_OscConfig+0x4fc>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ee:	f7fd fe77 	bl	8002fe0 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fd fe73 	bl	8002fe0 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e037      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005308:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0f0      	beq.n	80052f6 <HAL_RCC_OscConfig+0x46a>
 8005314:	e02f      	b.n	8005376 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005316:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <HAL_RCC_OscConfig+0x4fc>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531c:	f7fd fe60 	bl	8002fe0 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005324:	f7fd fe5c 	bl	8002fe0 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e020      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x498>
 8005342:	e018      	b.n	8005376 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e013      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_OscConfig+0x4f4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	429a      	cmp	r2, r3
 8005362:	d106      	bne.n	8005372 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536e:	429a      	cmp	r2, r3
 8005370:	d001      	beq.n	8005376 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000
 8005384:	40007000 	.word	0x40007000
 8005388:	42420060 	.word	0x42420060

0800538c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0d0      	b.n	8005542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053a0:	4b6a      	ldr	r3, [pc, #424]	; (800554c <HAL_RCC_ClockConfig+0x1c0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d910      	bls.n	80053d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ae:	4b67      	ldr	r3, [pc, #412]	; (800554c <HAL_RCC_ClockConfig+0x1c0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 0207 	bic.w	r2, r3, #7
 80053b6:	4965      	ldr	r1, [pc, #404]	; (800554c <HAL_RCC_ClockConfig+0x1c0>)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053be:	4b63      	ldr	r3, [pc, #396]	; (800554c <HAL_RCC_ClockConfig+0x1c0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0b8      	b.n	8005542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053e8:	4b59      	ldr	r3, [pc, #356]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a58      	ldr	r2, [pc, #352]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80053ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005400:	4b53      	ldr	r3, [pc, #332]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4a52      	ldr	r2, [pc, #328]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 8005406:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800540a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800540c:	4b50      	ldr	r3, [pc, #320]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	494d      	ldr	r1, [pc, #308]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 800541a:	4313      	orrs	r3, r2
 800541c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d040      	beq.n	80054ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d107      	bne.n	8005442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	4b47      	ldr	r3, [pc, #284]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d115      	bne.n	800546a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e07f      	b.n	8005542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d107      	bne.n	800545a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544a:	4b41      	ldr	r3, [pc, #260]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d109      	bne.n	800546a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e073      	b.n	8005542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545a:	4b3d      	ldr	r3, [pc, #244]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e06b      	b.n	8005542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800546a:	4b39      	ldr	r3, [pc, #228]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f023 0203 	bic.w	r2, r3, #3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	4936      	ldr	r1, [pc, #216]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800547c:	f7fd fdb0 	bl	8002fe0 <HAL_GetTick>
 8005480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005482:	e00a      	b.n	800549a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005484:	f7fd fdac 	bl	8002fe0 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e053      	b.n	8005542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549a:	4b2d      	ldr	r3, [pc, #180]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 020c 	and.w	r2, r3, #12
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d1eb      	bne.n	8005484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054ac:	4b27      	ldr	r3, [pc, #156]	; (800554c <HAL_RCC_ClockConfig+0x1c0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d210      	bcs.n	80054dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ba:	4b24      	ldr	r3, [pc, #144]	; (800554c <HAL_RCC_ClockConfig+0x1c0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 0207 	bic.w	r2, r3, #7
 80054c2:	4922      	ldr	r1, [pc, #136]	; (800554c <HAL_RCC_ClockConfig+0x1c0>)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ca:	4b20      	ldr	r3, [pc, #128]	; (800554c <HAL_RCC_ClockConfig+0x1c0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e032      	b.n	8005542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054e8:	4b19      	ldr	r3, [pc, #100]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4916      	ldr	r1, [pc, #88]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	490e      	ldr	r1, [pc, #56]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 8005516:	4313      	orrs	r3, r2
 8005518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800551a:	f000 f821 	bl	8005560 <HAL_RCC_GetSysClockFreq>
 800551e:	4601      	mov	r1, r0
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 800552c:	5cd3      	ldrb	r3, [r2, r3]
 800552e:	fa21 f303 	lsr.w	r3, r1, r3
 8005532:	4a09      	ldr	r2, [pc, #36]	; (8005558 <HAL_RCC_ClockConfig+0x1cc>)
 8005534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_RCC_ClockConfig+0x1d0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fd fd0e 	bl	8002f5c <HAL_InitTick>

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40022000 	.word	0x40022000
 8005550:	40021000 	.word	0x40021000
 8005554:	0800935c 	.word	0x0800935c
 8005558:	20000000 	.word	0x20000000
 800555c:	20000004 	.word	0x20000004

08005560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005560:	b490      	push	{r4, r7}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005566:	4b2a      	ldr	r3, [pc, #168]	; (8005610 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005568:	1d3c      	adds	r4, r7, #4
 800556a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800556c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005570:	4b28      	ldr	r3, [pc, #160]	; (8005614 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	2300      	movs	r3, #0
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800558a:	4b23      	ldr	r3, [pc, #140]	; (8005618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b04      	cmp	r3, #4
 8005598:	d002      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0x40>
 800559a:	2b08      	cmp	r3, #8
 800559c:	d003      	beq.n	80055a6 <HAL_RCC_GetSysClockFreq+0x46>
 800559e:	e02d      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055a0:	4b1e      	ldr	r3, [pc, #120]	; (800561c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055a2:	623b      	str	r3, [r7, #32]
      break;
 80055a4:	e02d      	b.n	8005602 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	0c9b      	lsrs	r3, r3, #18
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055b2:	4413      	add	r3, r2
 80055b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80055b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d013      	beq.n	80055ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055c4:	4b14      	ldr	r3, [pc, #80]	; (8005618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	0c5b      	lsrs	r3, r3, #17
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055d2:	4413      	add	r3, r2
 80055d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80055d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	4a0f      	ldr	r2, [pc, #60]	; (800561c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055de:	fb02 f203 	mul.w	r2, r2, r3
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ea:	e004      	b.n	80055f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055f0:	fb02 f303 	mul.w	r3, r2, r3
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	623b      	str	r3, [r7, #32]
      break;
 80055fa:	e002      	b.n	8005602 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055fe:	623b      	str	r3, [r7, #32]
      break;
 8005600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005602:	6a3b      	ldr	r3, [r7, #32]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3728      	adds	r7, #40	; 0x28
 8005608:	46bd      	mov	sp, r7
 800560a:	bc90      	pop	{r4, r7}
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	08009334 	.word	0x08009334
 8005614:	08009344 	.word	0x08009344
 8005618:	40021000 	.word	0x40021000
 800561c:	007a1200 	.word	0x007a1200
 8005620:	003d0900 	.word	0x003d0900

08005624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005628:	4b02      	ldr	r3, [pc, #8]	; (8005634 <HAL_RCC_GetHCLKFreq+0x10>)
 800562a:	681b      	ldr	r3, [r3, #0]
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	20000000 	.word	0x20000000

08005638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800563c:	f7ff fff2 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005640:	4601      	mov	r1, r0
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4a03      	ldr	r2, [pc, #12]	; (800565c <HAL_RCC_GetPCLK1Freq+0x24>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40021000 	.word	0x40021000
 800565c:	0800936c 	.word	0x0800936c

08005660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005664:	f7ff ffde 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005668:	4601      	mov	r1, r0
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	0adb      	lsrs	r3, r3, #11
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	4a03      	ldr	r2, [pc, #12]	; (8005684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005676:	5cd3      	ldrb	r3, [r2, r3]
 8005678:	fa21 f303 	lsr.w	r3, r1, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40021000 	.word	0x40021000
 8005684:	0800936c 	.word	0x0800936c

08005688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <RCC_Delay+0x34>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <RCC_Delay+0x38>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	0a5b      	lsrs	r3, r3, #9
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80056a4:	bf00      	nop
  }
  while (Delay --);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1e5a      	subs	r2, r3, #1
 80056aa:	60fa      	str	r2, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f9      	bne.n	80056a4 <RCC_Delay+0x1c>
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000000 	.word	0x20000000
 80056c0:	10624dd3 	.word	0x10624dd3

080056c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d07d      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80056e0:	2300      	movs	r3, #0
 80056e2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e4:	4b4f      	ldr	r3, [pc, #316]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f0:	4b4c      	ldr	r3, [pc, #304]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	4a4b      	ldr	r2, [pc, #300]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056fa:	61d3      	str	r3, [r2, #28]
 80056fc:	4b49      	ldr	r3, [pc, #292]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005708:	2301      	movs	r3, #1
 800570a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570c:	4b46      	ldr	r3, [pc, #280]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d118      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005718:	4b43      	ldr	r3, [pc, #268]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a42      	ldr	r2, [pc, #264]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800571e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005724:	f7fd fc5c 	bl	8002fe0 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572a:	e008      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572c:	f7fd fc58 	bl	8002fe0 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e06d      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573e:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800574a:	4b36      	ldr	r3, [pc, #216]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005752:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d02e      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	429a      	cmp	r2, r3
 8005766:	d027      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005768:	4b2e      	ldr	r3, [pc, #184]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005772:	4b2e      	ldr	r3, [pc, #184]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005774:	2201      	movs	r2, #1
 8005776:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005778:	4b2c      	ldr	r3, [pc, #176]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800577e:	4a29      	ldr	r2, [pc, #164]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d014      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7fd fc27 	bl	8002fe0 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005794:	e00a      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fd fc23 	bl	8002fe0 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e036      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ac:	4b1d      	ldr	r3, [pc, #116]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ee      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4917      	ldr	r1, [pc, #92]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d105      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d0:	4b14      	ldr	r3, [pc, #80]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	4a13      	ldr	r2, [pc, #76]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e8:	4b0e      	ldr	r3, [pc, #56]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	490b      	ldr	r1, [pc, #44]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005806:	4b07      	ldr	r3, [pc, #28]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	4904      	ldr	r1, [pc, #16]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40021000 	.word	0x40021000
 8005828:	40007000 	.word	0x40007000
 800582c:	42420440 	.word	0x42420440

08005830 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b08d      	sub	sp, #52	; 0x34
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005838:	4b55      	ldr	r3, [pc, #340]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800583a:	f107 040c 	add.w	r4, r7, #12
 800583e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005844:	4b53      	ldr	r3, [pc, #332]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	2300      	movs	r3, #0
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005852:	2300      	movs	r3, #0
 8005854:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	2300      	movs	r3, #0
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d07f      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005864:	2b10      	cmp	r3, #16
 8005866:	d002      	beq.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005868:	2b01      	cmp	r3, #1
 800586a:	d048      	beq.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800586c:	e08b      	b.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800586e:	4b4a      	ldr	r3, [pc, #296]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005874:	4b48      	ldr	r3, [pc, #288]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d07f      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	0c9b      	lsrs	r3, r3, #18
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800588c:	4413      	add	r3, r2
 800588e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005892:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d018      	beq.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800589e:	4b3e      	ldr	r3, [pc, #248]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	0c5b      	lsrs	r3, r3, #17
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80058ac:	4413      	add	r3, r2
 80058ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00d      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80058be:	4a37      	ldr	r2, [pc, #220]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	fb02 f303 	mul.w	r3, r2, r3
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ce:	e004      	b.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	4a33      	ldr	r2, [pc, #204]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80058da:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e6:	d102      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80058ec:	e048      	b.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4a2c      	ldr	r2, [pc, #176]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80058fc:	e040      	b.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80058fe:	4b26      	ldr	r3, [pc, #152]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590e:	d108      	bne.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800591a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005920:	e01f      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592c:	d109      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800592e:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800593a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005940:	e00f      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800594c:	d11a      	bne.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d014      	beq.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800595a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005960:	e010      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005962:	e00f      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005964:	f7ff fe7c 	bl	8005660 <HAL_RCC_GetPCLK2Freq>
 8005968:	4602      	mov	r2, r0
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	0b9b      	lsrs	r3, r3, #14
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	3301      	adds	r3, #1
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800597e:	e002      	b.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005980:	bf00      	nop
 8005982:	e000      	b.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005984:	bf00      	nop
    }
  }
  return (frequency);
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005988:	4618      	mov	r0, r3
 800598a:	3734      	adds	r7, #52	; 0x34
 800598c:	46bd      	mov	sp, r7
 800598e:	bd90      	pop	{r4, r7, pc}
 8005990:	08009348 	.word	0x08009348
 8005994:	08009358 	.word	0x08009358
 8005998:	40021000 	.word	0x40021000
 800599c:	007a1200 	.word	0x007a1200
 80059a0:	003d0900 	.word	0x003d0900
 80059a4:	aaaaaaab 	.word	0xaaaaaaab

080059a8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e084      	b.n	8005ac8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	7c5b      	ldrb	r3, [r3, #17]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d105      	bne.n	80059d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fd f944 	bl	8002c5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 faa0 	bl	8005f20 <HAL_RTC_WaitForSynchro>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d004      	beq.n	80059f0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2204      	movs	r2, #4
 80059ea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e06b      	b.n	8005ac8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fb59 	bl	80060a8 <RTC_EnterInitMode>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2204      	movs	r2, #4
 8005a00:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e060      	b.n	8005ac8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0207 	bic.w	r2, r2, #7
 8005a14:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005a1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ad0 <HAL_RTC_Init+0x128>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <HAL_RTC_Init+0x128>)
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005a2a:	4b29      	ldr	r3, [pc, #164]	; (8005ad0 <HAL_RTC_Init+0x128>)
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4926      	ldr	r1, [pc, #152]	; (8005ad0 <HAL_RTC_Init+0x128>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d003      	beq.n	8005a4e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	e00e      	b.n	8005a6c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005a4e:	2001      	movs	r0, #1
 8005a50:	f7ff feee 	bl	8005830 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a54:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2204      	movs	r2, #4
 8005a60:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e030      	b.n	8005ac8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f023 010f 	bic.w	r1, r3, #15
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	0c1a      	lsrs	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	0c1b      	lsrs	r3, r3, #16
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	b291      	uxth	r1, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	430b      	orrs	r3, r1
 8005a96:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fb2d 	bl	80060f8 <RTC_ExitInitMode>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e00c      	b.n	8005ac8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
  }
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40006c00 	.word	0x40006c00

08005ad4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_RTC_SetTime+0x20>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e080      	b.n	8005bfa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	7c1b      	ldrb	r3, [r3, #16]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_RTC_SetTime+0x30>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e07a      	b.n	8005bfa <HAL_RTC_SetTime+0x126>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d113      	bne.n	8005b3e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005b20:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	1a5b      	subs	r3, r3, r1
 8005b30:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005b32:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005b38:	4413      	add	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e01e      	b.n	8005b7c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb1d 	bl	8006182 <RTC_Bcd2ToByte>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005b50:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fb12 	bl	8006182 <RTC_Bcd2ToByte>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	4613      	mov	r3, r2
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005b6a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	789b      	ldrb	r3, [r3, #2]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fb06 	bl	8006182 <RTC_Bcd2ToByte>
 8005b76:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005b78:	4423      	add	r3, r4
 8005b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fa2b 	bl	8005fda <RTC_WriteTimeCounter>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e02f      	b.n	8005bfa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0205 	bic.w	r2, r2, #5
 8005ba8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fa3c 	bl	8006028 <RTC_ReadAlarmCounter>
 8005bb0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d018      	beq.n	8005bec <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d214      	bcs.n	8005bec <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005bc8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005bcc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005bce:	6939      	ldr	r1, [r7, #16]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fa42 	bl	800605a <RTC_WriteAlarmCounter>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2204      	movs	r2, #4
 8005be0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e006      	b.n	8005bfa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd90      	pop	{r4, r7, pc}
	...

08005c04 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	2300      	movs	r3, #0
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <HAL_RTC_GetTime+0x28>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0b5      	b.n	8005d9c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e0ac      	b.n	8005d9c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f999 	bl	8005f7a <RTC_ReadTimeCounter>
 8005c48:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	4a55      	ldr	r2, [pc, #340]	; (8005da4 <HAL_RTC_GetTime+0x1a0>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	0adb      	lsrs	r3, r3, #11
 8005c54:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4b52      	ldr	r3, [pc, #328]	; (8005da4 <HAL_RTC_GetTime+0x1a0>)
 8005c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5e:	0adb      	lsrs	r3, r3, #11
 8005c60:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005c64:	fb01 f303 	mul.w	r3, r1, r3
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	4a4f      	ldr	r2, [pc, #316]	; (8005da8 <HAL_RTC_GetTime+0x1a4>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	4a4a      	ldr	r2, [pc, #296]	; (8005da4 <HAL_RTC_GetTime+0x1a0>)
 8005c7c:	fba2 1203 	umull	r1, r2, r2, r3
 8005c80:	0ad2      	lsrs	r2, r2, #11
 8005c82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005c86:	fb01 f202 	mul.w	r2, r1, r2
 8005c8a:	1a9a      	subs	r2, r3, r2
 8005c8c:	4b46      	ldr	r3, [pc, #280]	; (8005da8 <HAL_RTC_GetTime+0x1a4>)
 8005c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c92:	0959      	lsrs	r1, r3, #5
 8005c94:	460b      	mov	r3, r1
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	1a5b      	subs	r3, r3, r1
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	1ad1      	subs	r1, r2, r3
 8005c9e:	b2ca      	uxtb	r2, r1
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b17      	cmp	r3, #23
 8005ca8:	d955      	bls.n	8005d56 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4a3f      	ldr	r2, [pc, #252]	; (8005dac <HAL_RTC_GetTime+0x1a8>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	091b      	lsrs	r3, r3, #4
 8005cb4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005cb6:	6939      	ldr	r1, [r7, #16]
 8005cb8:	4b3c      	ldr	r3, [pc, #240]	; (8005dac <HAL_RTC_GetTime+0x1a8>)
 8005cba:	fba3 2301 	umull	r2, r3, r3, r1
 8005cbe:	091a      	lsrs	r2, r3, #4
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	1aca      	subs	r2, r1, r3
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f9a9 	bl	8006028 <RTC_ReadAlarmCounter>
 8005cd6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cde:	d008      	beq.n	8005cf2 <HAL_RTC_GetTime+0xee>
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d904      	bls.n	8005cf2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e002      	b.n	8005cf8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4a2d      	ldr	r2, [pc, #180]	; (8005db0 <HAL_RTC_GetTime+0x1ac>)
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f966 	bl	8005fda <RTC_WriteTimeCounter>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e041      	b.n	8005d9c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d00c      	beq.n	8005d3a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	4413      	add	r3, r2
 8005d26:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f995 	bl	800605a <RTC_WriteAlarmCounter>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e030      	b.n	8005d9c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005d3a:	69f9      	ldr	r1, [r7, #28]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f98c 	bl	800605a <RTC_WriteAlarmCounter>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e027      	b.n	8005d9c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fa34 	bl	80061bc <RTC_DateUpdate>
 8005d54:	e003      	b.n	8005d5e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01a      	beq.n	8005d9a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 f9ed 	bl	8006148 <RTC_ByteToBcd2>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	461a      	mov	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f9e4 	bl	8006148 <RTC_ByteToBcd2>
 8005d80:	4603      	mov	r3, r0
 8005d82:	461a      	mov	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	789b      	ldrb	r3, [r3, #2]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 f9db 	bl	8006148 <RTC_ByteToBcd2>
 8005d92:	4603      	mov	r3, r0
 8005d94:	461a      	mov	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	91a2b3c5 	.word	0x91a2b3c5
 8005da8:	88888889 	.word	0x88888889
 8005dac:	aaaaaaab 	.word	0xaaaaaaab
 8005db0:	00015180 	.word	0x00015180

08005db4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_RTC_SetDate+0x24>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e097      	b.n	8005f0c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	7c1b      	ldrb	r3, [r3, #16]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_RTC_SetDate+0x34>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e091      	b.n	8005f0c <HAL_RTC_SetDate+0x158>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2202      	movs	r2, #2
 8005df2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10c      	bne.n	8005e14 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	78da      	ldrb	r2, [r3, #3]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	785a      	ldrb	r2, [r3, #1]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	789a      	ldrb	r2, [r3, #2]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	739a      	strb	r2, [r3, #14]
 8005e12:	e01a      	b.n	8005e4a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	78db      	ldrb	r3, [r3, #3]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 f9b2 	bl	8006182 <RTC_Bcd2ToByte>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	461a      	mov	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 f9a9 	bl	8006182 <RTC_Bcd2ToByte>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	789b      	ldrb	r3, [r3, #2]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 f9a0 	bl	8006182 <RTC_Bcd2ToByte>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	7bdb      	ldrb	r3, [r3, #15]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	7b59      	ldrb	r1, [r3, #13]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	7b9b      	ldrb	r3, [r3, #14]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f000 fa8b 	bl	8006374 <RTC_WeekDayNum>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	461a      	mov	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	7b1a      	ldrb	r2, [r3, #12]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f883 	bl	8005f7a <RTC_ReadTimeCounter>
 8005e74:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4a26      	ldr	r2, [pc, #152]	; (8005f14 <HAL_RTC_SetDate+0x160>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	0adb      	lsrs	r3, r3, #11
 8005e80:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b18      	cmp	r3, #24
 8005e86:	d93a      	bls.n	8005efe <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4a23      	ldr	r2, [pc, #140]	; (8005f18 <HAL_RTC_SetDate+0x164>)
 8005e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e90:	091b      	lsrs	r3, r3, #4
 8005e92:	4a22      	ldr	r2, [pc, #136]	; (8005f1c <HAL_RTC_SetDate+0x168>)
 8005e94:	fb02 f303 	mul.w	r3, r2, r3
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005e9e:	69f9      	ldr	r1, [r7, #28]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f89a 	bl	8005fda <RTC_WriteTimeCounter>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e027      	b.n	8005f0c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f8b3 	bl	8006028 <RTC_ReadAlarmCounter>
 8005ec2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eca:	d018      	beq.n	8005efe <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d214      	bcs.n	8005efe <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005eda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ede:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ee0:	69b9      	ldr	r1, [r7, #24]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f8b9 	bl	800605a <RTC_WriteAlarmCounter>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e006      	b.n	8005f0c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	91a2b3c5 	.word	0x91a2b3c5
 8005f18:	aaaaaaab 	.word	0xaaaaaaab
 8005f1c:	00015180 	.word	0x00015180

08005f20 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e01d      	b.n	8005f72 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0208 	bic.w	r2, r2, #8
 8005f44:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005f46:	f7fd f84b 	bl	8002fe0 <HAL_GetTick>
 8005f4a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005f4c:	e009      	b.n	8005f62 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f4e:	f7fd f847 	bl	8002fe0 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5c:	d901      	bls.n	8005f62 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e007      	b.n	8005f72 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0ee      	beq.n	8005f4e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b087      	sub	sp, #28
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	827b      	strh	r3, [r7, #18]
 8005f86:	2300      	movs	r3, #0
 8005f88:	823b      	strh	r3, [r7, #16]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005faa:	8a7a      	ldrh	r2, [r7, #18]
 8005fac:	8a3b      	ldrh	r3, [r7, #16]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d008      	beq.n	8005fc4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005fb2:	8a3b      	ldrh	r3, [r7, #16]
 8005fb4:	041a      	lsls	r2, r3, #16
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e004      	b.n	8005fce <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005fc4:	8a7b      	ldrh	r3, [r7, #18]
 8005fc6:	041a      	lsls	r2, r3, #16
 8005fc8:	89fb      	ldrh	r3, [r7, #14]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005fce:	697b      	ldr	r3, [r7, #20]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr

08005fda <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f85d 	bl	80060a8 <RTC_EnterInitMode>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
 8005ff8:	e011      	b.n	800601e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	0c12      	lsrs	r2, r2, #16
 8006002:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	b292      	uxth	r2, r2
 800600c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f872 	bl	80060f8 <RTC_ExitInitMode>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	81fb      	strh	r3, [r7, #14]
 8006034:	2300      	movs	r3, #0
 8006036:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006048:	89fb      	ldrh	r3, [r7, #14]
 800604a:	041a      	lsls	r2, r3, #16
 800604c:	89bb      	ldrh	r3, [r7, #12]
 800604e:	4313      	orrs	r3, r2
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f81d 	bl	80060a8 <RTC_EnterInitMode>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	73fb      	strb	r3, [r7, #15]
 8006078:	e011      	b.n	800609e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	0c12      	lsrs	r2, r2, #16
 8006082:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	b292      	uxth	r2, r2
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f832 	bl	80060f8 <RTC_ExitInitMode>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800609e:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80060b4:	f7fc ff94 	bl	8002fe0 <HAL_GetTick>
 80060b8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80060ba:	e009      	b.n	80060d0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80060bc:	f7fc ff90 	bl	8002fe0 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ca:	d901      	bls.n	80060d0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e00f      	b.n	80060f0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0ee      	beq.n	80060bc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0210 	orr.w	r2, r2, #16
 80060ec:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0210 	bic.w	r2, r2, #16
 8006112:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006114:	f7fc ff64 	bl	8002fe0 <HAL_GetTick>
 8006118:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800611a:	e009      	b.n	8006130 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800611c:	f7fc ff60 	bl	8002fe0 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800612a:	d901      	bls.n	8006130 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e007      	b.n	8006140 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0ee      	beq.n	800611c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006156:	e005      	b.n	8006164 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	3b0a      	subs	r3, #10
 8006162:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	2b09      	cmp	r3, #9
 8006168:	d8f6      	bhi.n	8006158 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	b2da      	uxtb	r2, r3
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	4313      	orrs	r3, r2
 8006176:	b2db      	uxtb	r3, r3
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr

08006182 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	4603      	mov	r3, r0
 800618a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	091b      	lsrs	r3, r3, #4
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	4413      	add	r3, r2
 80061b0:	b2db      	uxtb	r3, r3
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr

080061bc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	2300      	movs	r3, #0
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	7bdb      	ldrb	r3, [r3, #15]
 80061da:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7b5b      	ldrb	r3, [r3, #13]
 80061e0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	7b9b      	ldrb	r3, [r3, #14]
 80061e6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80061e8:	2300      	movs	r3, #0
 80061ea:	60bb      	str	r3, [r7, #8]
 80061ec:	e06f      	b.n	80062ce <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d011      	beq.n	8006218 <RTC_DateUpdate+0x5c>
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d00e      	beq.n	8006218 <RTC_DateUpdate+0x5c>
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b05      	cmp	r3, #5
 80061fe:	d00b      	beq.n	8006218 <RTC_DateUpdate+0x5c>
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b07      	cmp	r3, #7
 8006204:	d008      	beq.n	8006218 <RTC_DateUpdate+0x5c>
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d005      	beq.n	8006218 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b0a      	cmp	r3, #10
 8006210:	d002      	beq.n	8006218 <RTC_DateUpdate+0x5c>
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b0c      	cmp	r3, #12
 8006216:	d117      	bne.n	8006248 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b1e      	cmp	r3, #30
 800621c:	d803      	bhi.n	8006226 <RTC_DateUpdate+0x6a>
      {
        day++;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006224:	e050      	b.n	80062c8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b0c      	cmp	r3, #12
 800622a:	d005      	beq.n	8006238 <RTC_DateUpdate+0x7c>
        {
          month++;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	3301      	adds	r3, #1
 8006230:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006232:	2301      	movs	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006236:	e047      	b.n	80062c8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006238:	2301      	movs	r3, #1
 800623a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800623c:	2301      	movs	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
          year++;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	3301      	adds	r3, #1
 8006244:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006246:	e03f      	b.n	80062c8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b04      	cmp	r3, #4
 800624c:	d008      	beq.n	8006260 <RTC_DateUpdate+0xa4>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b06      	cmp	r3, #6
 8006252:	d005      	beq.n	8006260 <RTC_DateUpdate+0xa4>
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b09      	cmp	r3, #9
 8006258:	d002      	beq.n	8006260 <RTC_DateUpdate+0xa4>
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b0b      	cmp	r3, #11
 800625e:	d10c      	bne.n	800627a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b1d      	cmp	r3, #29
 8006264:	d803      	bhi.n	800626e <RTC_DateUpdate+0xb2>
      {
        day++;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800626c:	e02c      	b.n	80062c8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	3301      	adds	r3, #1
 8006272:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006274:	2301      	movs	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006278:	e026      	b.n	80062c8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d123      	bne.n	80062c8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b1b      	cmp	r3, #27
 8006284:	d803      	bhi.n	800628e <RTC_DateUpdate+0xd2>
      {
        day++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e01c      	b.n	80062c8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b1c      	cmp	r3, #28
 8006292:	d111      	bne.n	80062b8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	b29b      	uxth	r3, r3
 8006298:	4618      	mov	r0, r3
 800629a:	f000 f839 	bl	8006310 <RTC_IsLeapYear>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <RTC_DateUpdate+0xf0>
        {
          day++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	e00d      	b.n	80062c8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	3301      	adds	r3, #1
 80062b0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80062b2:	2301      	movs	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e007      	b.n	80062c8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b1d      	cmp	r3, #29
 80062bc:	d104      	bne.n	80062c8 <RTC_DateUpdate+0x10c>
      {
        month++;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3301      	adds	r3, #1
 80062c2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80062c4:	2301      	movs	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d38b      	bcc.n	80061ee <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	4619      	mov	r1, r3
 80062f8:	6978      	ldr	r0, [r7, #20]
 80062fa:	f000 f83b 	bl	8006374 <RTC_WeekDayNum>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	731a      	strb	r2, [r3, #12]
}
 8006306:	bf00      	nop
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	e01d      	b.n	8006366 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	4a10      	ldr	r2, [pc, #64]	; (8006370 <RTC_IsLeapYear+0x60>)
 800632e:	fba2 1203 	umull	r1, r2, r2, r3
 8006332:	0952      	lsrs	r2, r2, #5
 8006334:	2164      	movs	r1, #100	; 0x64
 8006336:	fb01 f202 	mul.w	r2, r1, r2
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006342:	2301      	movs	r3, #1
 8006344:	e00f      	b.n	8006366 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <RTC_IsLeapYear+0x60>)
 800634a:	fba2 1203 	umull	r1, r2, r2, r3
 800634e:	09d2      	lsrs	r2, r2, #7
 8006350:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006354:	fb01 f202 	mul.w	r2, r1, r2
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006364:	2300      	movs	r3, #0
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr
 8006370:	51eb851f 	.word	0x51eb851f

08006374 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
 8006380:	4613      	mov	r3, r2
 8006382:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006392:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d82d      	bhi.n	80063f6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800639a:	78fa      	ldrb	r2, [r7, #3]
 800639c:	4613      	mov	r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	4413      	add	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	4a2c      	ldr	r2, [pc, #176]	; (8006458 <RTC_WeekDayNum+0xe4>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	085a      	lsrs	r2, r3, #1
 80063ae:	78bb      	ldrb	r3, [r7, #2]
 80063b0:	441a      	add	r2, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	441a      	add	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	089b      	lsrs	r3, r3, #2
 80063bc:	441a      	add	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	4926      	ldr	r1, [pc, #152]	; (800645c <RTC_WeekDayNum+0xe8>)
 80063c4:	fba1 1303 	umull	r1, r3, r1, r3
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	1ad2      	subs	r2, r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	4922      	ldr	r1, [pc, #136]	; (800645c <RTC_WeekDayNum+0xe8>)
 80063d2:	fba1 1303 	umull	r1, r3, r1, r3
 80063d6:	09db      	lsrs	r3, r3, #7
 80063d8:	4413      	add	r3, r2
 80063da:	1d1a      	adds	r2, r3, #4
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <RTC_WeekDayNum+0xec>)
 80063de:	fba3 1302 	umull	r1, r3, r3, r2
 80063e2:	1ad1      	subs	r1, r2, r3
 80063e4:	0849      	lsrs	r1, r1, #1
 80063e6:	440b      	add	r3, r1
 80063e8:	0899      	lsrs	r1, r3, #2
 80063ea:	460b      	mov	r3, r1
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	1a5b      	subs	r3, r3, r1
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	e029      	b.n	800644a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	4613      	mov	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4413      	add	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	4a15      	ldr	r2, [pc, #84]	; (8006458 <RTC_WeekDayNum+0xe4>)
 8006404:	fba2 2303 	umull	r2, r3, r2, r3
 8006408:	085a      	lsrs	r2, r3, #1
 800640a:	78bb      	ldrb	r3, [r7, #2]
 800640c:	441a      	add	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	441a      	add	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	089b      	lsrs	r3, r3, #2
 8006416:	441a      	add	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4910      	ldr	r1, [pc, #64]	; (800645c <RTC_WeekDayNum+0xe8>)
 800641c:	fba1 1303 	umull	r1, r3, r1, r3
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	1ad2      	subs	r2, r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	490d      	ldr	r1, [pc, #52]	; (800645c <RTC_WeekDayNum+0xe8>)
 8006428:	fba1 1303 	umull	r1, r3, r1, r3
 800642c:	09db      	lsrs	r3, r3, #7
 800642e:	4413      	add	r3, r2
 8006430:	1c9a      	adds	r2, r3, #2
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <RTC_WeekDayNum+0xec>)
 8006434:	fba3 1302 	umull	r1, r3, r3, r2
 8006438:	1ad1      	subs	r1, r2, r3
 800643a:	0849      	lsrs	r1, r1, #1
 800643c:	440b      	add	r3, r1
 800643e:	0899      	lsrs	r1, r3, #2
 8006440:	460b      	mov	r3, r1
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	1a5b      	subs	r3, r3, r1
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	b2db      	uxtb	r3, r3
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr
 8006458:	38e38e39 	.word	0x38e38e39
 800645c:	51eb851f 	.word	0x51eb851f
 8006460:	24924925 	.word	0x24924925

08006464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e03f      	b.n	80064f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fc fc0a 	bl	8002ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2224      	movs	r2, #36	; 0x24
 8006494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fbd9 	bl	8006c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b088      	sub	sp, #32
 8006502:	af02      	add	r7, sp, #8
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b20      	cmp	r3, #32
 800651c:	f040 8083 	bne.w	8006626 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_UART_Transmit+0x2e>
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e07b      	b.n	8006628 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_UART_Transmit+0x40>
 800653a:	2302      	movs	r3, #2
 800653c:	e074      	b.n	8006628 <HAL_UART_Transmit+0x12a>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2221      	movs	r2, #33	; 0x21
 8006550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006554:	f7fc fd44 	bl	8002fe0 <HAL_GetTick>
 8006558:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	88fa      	ldrh	r2, [r7, #6]
 800655e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	88fa      	ldrh	r2, [r7, #6]
 8006564:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006566:	e042      	b.n	80065ee <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657e:	d122      	bne.n	80065c6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2200      	movs	r2, #0
 8006588:	2180      	movs	r1, #128	; 0x80
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f9fe 	bl	800698c <UART_WaitOnFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e046      	b.n	8006628 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	3302      	adds	r3, #2
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	e017      	b.n	80065ee <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	3301      	adds	r3, #1
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	e013      	b.n	80065ee <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2200      	movs	r2, #0
 80065ce:	2180      	movs	r1, #128	; 0x80
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f9db 	bl	800698c <UART_WaitOnFlagUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e023      	b.n	8006628 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	60ba      	str	r2, [r7, #8]
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1b7      	bne.n	8006568 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	2140      	movs	r1, #64	; 0x40
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f9c2 	bl	800698c <UART_WaitOnFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e00a      	b.n	8006628 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	e000      	b.n	8006628 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006626:	2302      	movs	r3, #2
  }
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b20      	cmp	r3, #32
 8006648:	d140      	bne.n	80066cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_UART_Receive_IT+0x26>
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e039      	b.n	80066ce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_UART_Receive_IT+0x38>
 8006664:	2302      	movs	r3, #2
 8006666:	e032      	b.n	80066ce <HAL_UART_Receive_IT+0x9e>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	88fa      	ldrh	r2, [r7, #6]
 8006680:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2222      	movs	r2, #34	; 0x22
 800668c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0220 	orr.w	r2, r2, #32
 80066c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	e000      	b.n	80066ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80066cc:	2302      	movs	r3, #2
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d024      	beq.n	8006758 <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695a      	ldr	r2, [r3, #20]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800671c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006722:	2b00      	cmp	r3, #0
 8006724:	d018      	beq.n	8006758 <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672a:	2200      	movs	r2, #0
 800672c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006732:	4618      	mov	r0, r3
 8006734:	f7fd f9c9 	bl	8003aca <HAL_DMA_Abort>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006742:	4618      	mov	r0, r3
 8006744:	f7fd fa72 	bl	8003c2c <HAL_DMA_GetError>
 8006748:	4603      	mov	r3, r0
 800674a:	2b20      	cmp	r3, #32
 800674c:	d104      	bne.n	8006758 <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2210      	movs	r2, #16
 8006752:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e007      	b.n	8006768 <HAL_UART_AbortReceive+0x90>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10d      	bne.n	80067c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_UART_IRQHandler+0x52>
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f9ce 	bl	8006b5c <UART_Receive_IT>
      return;
 80067c0:	e0cc      	b.n	800695c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80ab 	beq.w	8006920 <HAL_UART_IRQHandler+0x1b0>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <HAL_UART_IRQHandler+0x70>
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80a0 	beq.w	8006920 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_UART_IRQHandler+0x90>
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f8:	f043 0201 	orr.w	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <HAL_UART_IRQHandler+0xb0>
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006818:	f043 0202 	orr.w	r2, r3, #2
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <HAL_UART_IRQHandler+0xd0>
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d005      	beq.n	8006840 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006838:	f043 0204 	orr.w	r2, r3, #4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_UART_IRQHandler+0xf0>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	f043 0208 	orr.w	r2, r3, #8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d078      	beq.n	800695a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <HAL_UART_IRQHandler+0x112>
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f96d 	bl	8006b5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d102      	bne.n	80068aa <HAL_UART_IRQHandler+0x13a>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d031      	beq.n	800690e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8b8 	bl	8006a20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d023      	beq.n	8006906 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d013      	beq.n	80068fe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	4a22      	ldr	r2, [pc, #136]	; (8006964 <HAL_UART_IRQHandler+0x1f4>)
 80068dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fd f92c 	bl	8003b40 <HAL_DMA_Abort_IT>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d016      	beq.n	800691c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	e00e      	b.n	800691c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f83b 	bl	800697a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	e00a      	b.n	800691c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f837 	bl	800697a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800690c:	e006      	b.n	800691c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f833 	bl	800697a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800691a:	e01e      	b.n	800695a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691c:	bf00      	nop
    return;
 800691e:	e01c      	b.n	800695a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006926:	2b00      	cmp	r3, #0
 8006928:	d008      	beq.n	800693c <HAL_UART_IRQHandler+0x1cc>
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f8a4 	bl	8006a82 <UART_Transmit_IT>
    return;
 800693a:	e00f      	b.n	800695c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_UART_IRQHandler+0x1ec>
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d005      	beq.n	800695c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f8eb 	bl	8006b2c <UART_EndTransmit_IT>
    return;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <HAL_UART_IRQHandler+0x1ec>
    return;
 800695a:	bf00      	nop
  }
}
 800695c:	3720      	adds	r7, #32
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	08006a5b 	.word	0x08006a5b

08006968 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800699c:	e02c      	b.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a4:	d028      	beq.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <UART_WaitOnFlagUntilTimeout+0x30>
 80069ac:	f7fc fb18 	bl	8002fe0 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d21d      	bcs.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695a      	ldr	r2, [r3, #20]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0201 	bic.w	r2, r2, #1
 80069da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e00f      	b.n	8006a18 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4013      	ands	r3, r2
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	bf0c      	ite	eq
 8006a08:	2301      	moveq	r3, #1
 8006a0a:	2300      	movne	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	461a      	mov	r2, r3
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d0c3      	beq.n	800699e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a36:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0201 	bic.w	r2, r2, #1
 8006a46:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7ff ff80 	bl	800697a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b21      	cmp	r3, #33	; 0x21
 8006a94:	d144      	bne.n	8006b20 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9e:	d11a      	bne.n	8006ad6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ab4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	1c9a      	adds	r2, r3, #2
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	621a      	str	r2, [r3, #32]
 8006ac8:	e00e      	b.n	8006ae8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	621a      	str	r2, [r3, #32]
 8006ad4:	e008      	b.n	8006ae8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	1c59      	adds	r1, r3, #1
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6211      	str	r1, [r2, #32]
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	4619      	mov	r1, r3
 8006af6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10f      	bne.n	8006b1c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e000      	b.n	8006b22 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b20:	2302      	movs	r3, #2
  }
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff ff0b 	bl	8006968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b22      	cmp	r3, #34	; 0x22
 8006b6e:	d171      	bne.n	8006c54 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b78:	d123      	bne.n	8006bc2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10e      	bne.n	8006ba6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	1c9a      	adds	r2, r3, #2
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ba4:	e029      	b.n	8006bfa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8006bc0:	e01b      	b.n	8006bfa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6858      	ldr	r0, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	1c59      	adds	r1, r3, #1
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6291      	str	r1, [r2, #40]	; 0x28
 8006bda:	b2c2      	uxtb	r2, r0
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	e00c      	b.n	8006bfa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bec:	1c58      	adds	r0, r3, #1
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	6288      	str	r0, [r1, #40]	; 0x28
 8006bf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4619      	mov	r1, r3
 8006c08:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d120      	bne.n	8006c50 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0220 	bic.w	r2, r2, #32
 8006c1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fb fb2a 	bl	80022a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e002      	b.n	8006c56 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e000      	b.n	8006c56 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
  }
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c9a:	f023 030c 	bic.w	r3, r3, #12
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	68f9      	ldr	r1, [r7, #12]
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a52      	ldr	r2, [pc, #328]	; (8006e0c <UART_SetConfig+0x1ac>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d14e      	bne.n	8006d66 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cc8:	f7fe fcca 	bl	8005660 <HAL_RCC_GetPCLK2Freq>
 8006ccc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009a      	lsls	r2, r3, #2
 8006cd8:	441a      	add	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce4:	4a4a      	ldr	r2, [pc, #296]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cea:	095b      	lsrs	r3, r3, #5
 8006cec:	0119      	lsls	r1, r3, #4
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009a      	lsls	r2, r3, #2
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d04:	4b42      	ldr	r3, [pc, #264]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006d06:	fba3 0302 	umull	r0, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	2064      	movs	r0, #100	; 0x64
 8006d0e:	fb00 f303 	mul.w	r3, r0, r3
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	3332      	adds	r3, #50	; 0x32
 8006d18:	4a3d      	ldr	r2, [pc, #244]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d24:	4419      	add	r1, r3
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009a      	lsls	r2, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d3c:	4b34      	ldr	r3, [pc, #208]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006d3e:	fba3 0302 	umull	r0, r3, r3, r2
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	2064      	movs	r0, #100	; 0x64
 8006d46:	fb00 f303 	mul.w	r3, r0, r3
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	3332      	adds	r3, #50	; 0x32
 8006d50:	4a2f      	ldr	r2, [pc, #188]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	440a      	add	r2, r1
 8006d62:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006d64:	e04d      	b.n	8006e02 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d66:	f7fe fc67 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8006d6a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009a      	lsls	r2, r3, #2
 8006d76:	441a      	add	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d82:	4a23      	ldr	r2, [pc, #140]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	0119      	lsls	r1, r3, #4
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009a      	lsls	r2, r3, #2
 8006d96:	441a      	add	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006da2:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006da4:	fba3 0302 	umull	r0, r3, r3, r2
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	2064      	movs	r0, #100	; 0x64
 8006dac:	fb00 f303 	mul.w	r3, r0, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	3332      	adds	r3, #50	; 0x32
 8006db6:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc2:	4419      	add	r1, r3
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009a      	lsls	r2, r3, #2
 8006dce:	441a      	add	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dda:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006ddc:	fba3 0302 	umull	r0, r3, r3, r2
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	2064      	movs	r0, #100	; 0x64
 8006de4:	fb00 f303 	mul.w	r3, r0, r3
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	3332      	adds	r3, #50	; 0x32
 8006dee:	4a08      	ldr	r2, [pc, #32]	; (8006e10 <UART_SetConfig+0x1b0>)
 8006df0:	fba2 2303 	umull	r2, r3, r2, r3
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	f003 020f 	and.w	r2, r3, #15
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	440a      	add	r2, r1
 8006e00:	609a      	str	r2, [r3, #8]
}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40013800 	.word	0x40013800
 8006e10:	51eb851f 	.word	0x51eb851f

08006e14 <__errno>:
 8006e14:	4b01      	ldr	r3, [pc, #4]	; (8006e1c <__errno+0x8>)
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	2000000c 	.word	0x2000000c

08006e20 <__libc_init_array>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	2500      	movs	r5, #0
 8006e24:	4e0c      	ldr	r6, [pc, #48]	; (8006e58 <__libc_init_array+0x38>)
 8006e26:	4c0d      	ldr	r4, [pc, #52]	; (8006e5c <__libc_init_array+0x3c>)
 8006e28:	1ba4      	subs	r4, r4, r6
 8006e2a:	10a4      	asrs	r4, r4, #2
 8006e2c:	42a5      	cmp	r5, r4
 8006e2e:	d109      	bne.n	8006e44 <__libc_init_array+0x24>
 8006e30:	f002 f89c 	bl	8008f6c <_init>
 8006e34:	2500      	movs	r5, #0
 8006e36:	4e0a      	ldr	r6, [pc, #40]	; (8006e60 <__libc_init_array+0x40>)
 8006e38:	4c0a      	ldr	r4, [pc, #40]	; (8006e64 <__libc_init_array+0x44>)
 8006e3a:	1ba4      	subs	r4, r4, r6
 8006e3c:	10a4      	asrs	r4, r4, #2
 8006e3e:	42a5      	cmp	r5, r4
 8006e40:	d105      	bne.n	8006e4e <__libc_init_array+0x2e>
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e48:	4798      	blx	r3
 8006e4a:	3501      	adds	r5, #1
 8006e4c:	e7ee      	b.n	8006e2c <__libc_init_array+0xc>
 8006e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e52:	4798      	blx	r3
 8006e54:	3501      	adds	r5, #1
 8006e56:	e7f2      	b.n	8006e3e <__libc_init_array+0x1e>
 8006e58:	080095d8 	.word	0x080095d8
 8006e5c:	080095d8 	.word	0x080095d8
 8006e60:	080095d8 	.word	0x080095d8
 8006e64:	080095dc 	.word	0x080095dc

08006e68 <memset>:
 8006e68:	4603      	mov	r3, r0
 8006e6a:	4402      	add	r2, r0
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d100      	bne.n	8006e72 <memset+0xa>
 8006e70:	4770      	bx	lr
 8006e72:	f803 1b01 	strb.w	r1, [r3], #1
 8006e76:	e7f9      	b.n	8006e6c <memset+0x4>

08006e78 <__cvt>:
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7e:	461e      	mov	r6, r3
 8006e80:	bfbb      	ittet	lt
 8006e82:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006e86:	461e      	movlt	r6, r3
 8006e88:	2300      	movge	r3, #0
 8006e8a:	232d      	movlt	r3, #45	; 0x2d
 8006e8c:	b088      	sub	sp, #32
 8006e8e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e90:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006e94:	f027 0720 	bic.w	r7, r7, #32
 8006e98:	2f46      	cmp	r7, #70	; 0x46
 8006e9a:	4614      	mov	r4, r2
 8006e9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006e9e:	700b      	strb	r3, [r1, #0]
 8006ea0:	d004      	beq.n	8006eac <__cvt+0x34>
 8006ea2:	2f45      	cmp	r7, #69	; 0x45
 8006ea4:	d100      	bne.n	8006ea8 <__cvt+0x30>
 8006ea6:	3501      	adds	r5, #1
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e000      	b.n	8006eae <__cvt+0x36>
 8006eac:	2303      	movs	r3, #3
 8006eae:	aa07      	add	r2, sp, #28
 8006eb0:	9204      	str	r2, [sp, #16]
 8006eb2:	aa06      	add	r2, sp, #24
 8006eb4:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006eb8:	e9cd 3500 	strd	r3, r5, [sp]
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	4633      	mov	r3, r6
 8006ec0:	f000 fcf2 	bl	80078a8 <_dtoa_r>
 8006ec4:	2f47      	cmp	r7, #71	; 0x47
 8006ec6:	4680      	mov	r8, r0
 8006ec8:	d102      	bne.n	8006ed0 <__cvt+0x58>
 8006eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ecc:	07db      	lsls	r3, r3, #31
 8006ece:	d526      	bpl.n	8006f1e <__cvt+0xa6>
 8006ed0:	2f46      	cmp	r7, #70	; 0x46
 8006ed2:	eb08 0905 	add.w	r9, r8, r5
 8006ed6:	d111      	bne.n	8006efc <__cvt+0x84>
 8006ed8:	f898 3000 	ldrb.w	r3, [r8]
 8006edc:	2b30      	cmp	r3, #48	; 0x30
 8006ede:	d10a      	bne.n	8006ef6 <__cvt+0x7e>
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	f7f9 fd5e 	bl	80009a8 <__aeabi_dcmpeq>
 8006eec:	b918      	cbnz	r0, 8006ef6 <__cvt+0x7e>
 8006eee:	f1c5 0501 	rsb	r5, r5, #1
 8006ef2:	f8ca 5000 	str.w	r5, [sl]
 8006ef6:	f8da 3000 	ldr.w	r3, [sl]
 8006efa:	4499      	add	r9, r3
 8006efc:	2200      	movs	r2, #0
 8006efe:	2300      	movs	r3, #0
 8006f00:	4620      	mov	r0, r4
 8006f02:	4631      	mov	r1, r6
 8006f04:	f7f9 fd50 	bl	80009a8 <__aeabi_dcmpeq>
 8006f08:	b938      	cbnz	r0, 8006f1a <__cvt+0xa2>
 8006f0a:	2230      	movs	r2, #48	; 0x30
 8006f0c:	9b07      	ldr	r3, [sp, #28]
 8006f0e:	454b      	cmp	r3, r9
 8006f10:	d205      	bcs.n	8006f1e <__cvt+0xa6>
 8006f12:	1c59      	adds	r1, r3, #1
 8006f14:	9107      	str	r1, [sp, #28]
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	e7f8      	b.n	8006f0c <__cvt+0x94>
 8006f1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f1e:	4640      	mov	r0, r8
 8006f20:	9b07      	ldr	r3, [sp, #28]
 8006f22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f24:	eba3 0308 	sub.w	r3, r3, r8
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	b008      	add	sp, #32
 8006f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006f30 <__exponent>:
 8006f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f32:	2900      	cmp	r1, #0
 8006f34:	bfb4      	ite	lt
 8006f36:	232d      	movlt	r3, #45	; 0x2d
 8006f38:	232b      	movge	r3, #43	; 0x2b
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	bfb8      	it	lt
 8006f3e:	4249      	neglt	r1, r1
 8006f40:	2909      	cmp	r1, #9
 8006f42:	f804 2b02 	strb.w	r2, [r4], #2
 8006f46:	7043      	strb	r3, [r0, #1]
 8006f48:	dd21      	ble.n	8006f8e <__exponent+0x5e>
 8006f4a:	f10d 0307 	add.w	r3, sp, #7
 8006f4e:	461f      	mov	r7, r3
 8006f50:	260a      	movs	r6, #10
 8006f52:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f56:	fb06 1115 	mls	r1, r6, r5, r1
 8006f5a:	2d09      	cmp	r5, #9
 8006f5c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006f60:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f64:	f103 32ff 	add.w	r2, r3, #4294967295
 8006f68:	4629      	mov	r1, r5
 8006f6a:	dc09      	bgt.n	8006f80 <__exponent+0x50>
 8006f6c:	3130      	adds	r1, #48	; 0x30
 8006f6e:	3b02      	subs	r3, #2
 8006f70:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f74:	42bb      	cmp	r3, r7
 8006f76:	4622      	mov	r2, r4
 8006f78:	d304      	bcc.n	8006f84 <__exponent+0x54>
 8006f7a:	1a10      	subs	r0, r2, r0
 8006f7c:	b003      	add	sp, #12
 8006f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f80:	4613      	mov	r3, r2
 8006f82:	e7e6      	b.n	8006f52 <__exponent+0x22>
 8006f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f88:	f804 2b01 	strb.w	r2, [r4], #1
 8006f8c:	e7f2      	b.n	8006f74 <__exponent+0x44>
 8006f8e:	2330      	movs	r3, #48	; 0x30
 8006f90:	4419      	add	r1, r3
 8006f92:	7083      	strb	r3, [r0, #2]
 8006f94:	1d02      	adds	r2, r0, #4
 8006f96:	70c1      	strb	r1, [r0, #3]
 8006f98:	e7ef      	b.n	8006f7a <__exponent+0x4a>
	...

08006f9c <_printf_float>:
 8006f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	b091      	sub	sp, #68	; 0x44
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006fa6:	4693      	mov	fp, r2
 8006fa8:	461e      	mov	r6, r3
 8006faa:	4605      	mov	r5, r0
 8006fac:	f001 fa30 	bl	8008410 <_localeconv_r>
 8006fb0:	6803      	ldr	r3, [r0, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb6:	f7f9 f8cb 	bl	8000150 <strlen>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	930e      	str	r3, [sp, #56]	; 0x38
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	900a      	str	r0, [sp, #40]	; 0x28
 8006fc2:	3307      	adds	r3, #7
 8006fc4:	f023 0307 	bic.w	r3, r3, #7
 8006fc8:	f103 0208 	add.w	r2, r3, #8
 8006fcc:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006fd0:	f8d4 a000 	ldr.w	sl, [r4]
 8006fd4:	603a      	str	r2, [r7, #0]
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006fde:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006fe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fec:	4ba6      	ldr	r3, [pc, #664]	; (8007288 <_printf_float+0x2ec>)
 8006fee:	4638      	mov	r0, r7
 8006ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ff2:	f7f9 fd0b 	bl	8000a0c <__aeabi_dcmpun>
 8006ff6:	bb68      	cbnz	r0, 8007054 <_printf_float+0xb8>
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffc:	4ba2      	ldr	r3, [pc, #648]	; (8007288 <_printf_float+0x2ec>)
 8006ffe:	4638      	mov	r0, r7
 8007000:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007002:	f7f9 fce5 	bl	80009d0 <__aeabi_dcmple>
 8007006:	bb28      	cbnz	r0, 8007054 <_printf_float+0xb8>
 8007008:	2200      	movs	r2, #0
 800700a:	2300      	movs	r3, #0
 800700c:	4638      	mov	r0, r7
 800700e:	4649      	mov	r1, r9
 8007010:	f7f9 fcd4 	bl	80009bc <__aeabi_dcmplt>
 8007014:	b110      	cbz	r0, 800701c <_printf_float+0x80>
 8007016:	232d      	movs	r3, #45	; 0x2d
 8007018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800701c:	4f9b      	ldr	r7, [pc, #620]	; (800728c <_printf_float+0x2f0>)
 800701e:	4b9c      	ldr	r3, [pc, #624]	; (8007290 <_printf_float+0x2f4>)
 8007020:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007024:	bf98      	it	ls
 8007026:	461f      	movls	r7, r3
 8007028:	2303      	movs	r3, #3
 800702a:	f04f 0900 	mov.w	r9, #0
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	f02a 0304 	bic.w	r3, sl, #4
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	9600      	str	r6, [sp, #0]
 8007038:	465b      	mov	r3, fp
 800703a:	aa0f      	add	r2, sp, #60	; 0x3c
 800703c:	4621      	mov	r1, r4
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f9e2 	bl	8007408 <_printf_common>
 8007044:	3001      	adds	r0, #1
 8007046:	f040 8090 	bne.w	800716a <_printf_float+0x1ce>
 800704a:	f04f 30ff 	mov.w	r0, #4294967295
 800704e:	b011      	add	sp, #68	; 0x44
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	463a      	mov	r2, r7
 8007056:	464b      	mov	r3, r9
 8007058:	4638      	mov	r0, r7
 800705a:	4649      	mov	r1, r9
 800705c:	f7f9 fcd6 	bl	8000a0c <__aeabi_dcmpun>
 8007060:	b110      	cbz	r0, 8007068 <_printf_float+0xcc>
 8007062:	4f8c      	ldr	r7, [pc, #560]	; (8007294 <_printf_float+0x2f8>)
 8007064:	4b8c      	ldr	r3, [pc, #560]	; (8007298 <_printf_float+0x2fc>)
 8007066:	e7db      	b.n	8007020 <_printf_float+0x84>
 8007068:	6863      	ldr	r3, [r4, #4]
 800706a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800706e:	1c59      	adds	r1, r3, #1
 8007070:	a80d      	add	r0, sp, #52	; 0x34
 8007072:	a90e      	add	r1, sp, #56	; 0x38
 8007074:	d140      	bne.n	80070f8 <_printf_float+0x15c>
 8007076:	2306      	movs	r3, #6
 8007078:	6063      	str	r3, [r4, #4]
 800707a:	f04f 0c00 	mov.w	ip, #0
 800707e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007082:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007086:	6863      	ldr	r3, [r4, #4]
 8007088:	6022      	str	r2, [r4, #0]
 800708a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	463a      	mov	r2, r7
 8007092:	464b      	mov	r3, r9
 8007094:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007098:	4628      	mov	r0, r5
 800709a:	f7ff feed 	bl	8006e78 <__cvt>
 800709e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80070a2:	2b47      	cmp	r3, #71	; 0x47
 80070a4:	4607      	mov	r7, r0
 80070a6:	d109      	bne.n	80070bc <_printf_float+0x120>
 80070a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070aa:	1cd8      	adds	r0, r3, #3
 80070ac:	db02      	blt.n	80070b4 <_printf_float+0x118>
 80070ae:	6862      	ldr	r2, [r4, #4]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	dd47      	ble.n	8007144 <_printf_float+0x1a8>
 80070b4:	f1a8 0802 	sub.w	r8, r8, #2
 80070b8:	fa5f f888 	uxtb.w	r8, r8
 80070bc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80070c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80070c2:	d824      	bhi.n	800710e <_printf_float+0x172>
 80070c4:	3901      	subs	r1, #1
 80070c6:	4642      	mov	r2, r8
 80070c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070cc:	910d      	str	r1, [sp, #52]	; 0x34
 80070ce:	f7ff ff2f 	bl	8006f30 <__exponent>
 80070d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070d4:	4681      	mov	r9, r0
 80070d6:	1813      	adds	r3, r2, r0
 80070d8:	2a01      	cmp	r2, #1
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	dc02      	bgt.n	80070e4 <_printf_float+0x148>
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	07d1      	lsls	r1, r2, #31
 80070e2:	d501      	bpl.n	80070e8 <_printf_float+0x14c>
 80070e4:	3301      	adds	r3, #1
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0a2      	beq.n	8007036 <_printf_float+0x9a>
 80070f0:	232d      	movs	r3, #45	; 0x2d
 80070f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f6:	e79e      	b.n	8007036 <_printf_float+0x9a>
 80070f8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80070fc:	f000 816e 	beq.w	80073dc <_printf_float+0x440>
 8007100:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007104:	d1b9      	bne.n	800707a <_printf_float+0xde>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1b7      	bne.n	800707a <_printf_float+0xde>
 800710a:	2301      	movs	r3, #1
 800710c:	e7b4      	b.n	8007078 <_printf_float+0xdc>
 800710e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007112:	d119      	bne.n	8007148 <_printf_float+0x1ac>
 8007114:	2900      	cmp	r1, #0
 8007116:	6863      	ldr	r3, [r4, #4]
 8007118:	dd0c      	ble.n	8007134 <_printf_float+0x198>
 800711a:	6121      	str	r1, [r4, #16]
 800711c:	b913      	cbnz	r3, 8007124 <_printf_float+0x188>
 800711e:	6822      	ldr	r2, [r4, #0]
 8007120:	07d2      	lsls	r2, r2, #31
 8007122:	d502      	bpl.n	800712a <_printf_float+0x18e>
 8007124:	3301      	adds	r3, #1
 8007126:	440b      	add	r3, r1
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800712c:	f04f 0900 	mov.w	r9, #0
 8007130:	65a3      	str	r3, [r4, #88]	; 0x58
 8007132:	e7d9      	b.n	80070e8 <_printf_float+0x14c>
 8007134:	b913      	cbnz	r3, 800713c <_printf_float+0x1a0>
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	07d0      	lsls	r0, r2, #31
 800713a:	d501      	bpl.n	8007140 <_printf_float+0x1a4>
 800713c:	3302      	adds	r3, #2
 800713e:	e7f3      	b.n	8007128 <_printf_float+0x18c>
 8007140:	2301      	movs	r3, #1
 8007142:	e7f1      	b.n	8007128 <_printf_float+0x18c>
 8007144:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007148:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800714c:	4293      	cmp	r3, r2
 800714e:	db05      	blt.n	800715c <_printf_float+0x1c0>
 8007150:	6822      	ldr	r2, [r4, #0]
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	07d1      	lsls	r1, r2, #31
 8007156:	d5e8      	bpl.n	800712a <_printf_float+0x18e>
 8007158:	3301      	adds	r3, #1
 800715a:	e7e5      	b.n	8007128 <_printf_float+0x18c>
 800715c:	2b00      	cmp	r3, #0
 800715e:	bfcc      	ite	gt
 8007160:	2301      	movgt	r3, #1
 8007162:	f1c3 0302 	rsble	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	e7de      	b.n	8007128 <_printf_float+0x18c>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	055a      	lsls	r2, r3, #21
 800716e:	d407      	bmi.n	8007180 <_printf_float+0x1e4>
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	463a      	mov	r2, r7
 8007174:	4659      	mov	r1, fp
 8007176:	4628      	mov	r0, r5
 8007178:	47b0      	blx	r6
 800717a:	3001      	adds	r0, #1
 800717c:	d129      	bne.n	80071d2 <_printf_float+0x236>
 800717e:	e764      	b.n	800704a <_printf_float+0xae>
 8007180:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007184:	f240 80d7 	bls.w	8007336 <_printf_float+0x39a>
 8007188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800718c:	2200      	movs	r2, #0
 800718e:	2300      	movs	r3, #0
 8007190:	f7f9 fc0a 	bl	80009a8 <__aeabi_dcmpeq>
 8007194:	b388      	cbz	r0, 80071fa <_printf_float+0x25e>
 8007196:	2301      	movs	r3, #1
 8007198:	4a40      	ldr	r2, [pc, #256]	; (800729c <_printf_float+0x300>)
 800719a:	4659      	mov	r1, fp
 800719c:	4628      	mov	r0, r5
 800719e:	47b0      	blx	r6
 80071a0:	3001      	adds	r0, #1
 80071a2:	f43f af52 	beq.w	800704a <_printf_float+0xae>
 80071a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071aa:	429a      	cmp	r2, r3
 80071ac:	db02      	blt.n	80071b4 <_printf_float+0x218>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	07d8      	lsls	r0, r3, #31
 80071b2:	d50e      	bpl.n	80071d2 <_printf_float+0x236>
 80071b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071b8:	4659      	mov	r1, fp
 80071ba:	4628      	mov	r0, r5
 80071bc:	47b0      	blx	r6
 80071be:	3001      	adds	r0, #1
 80071c0:	f43f af43 	beq.w	800704a <_printf_float+0xae>
 80071c4:	2700      	movs	r7, #0
 80071c6:	f104 081a 	add.w	r8, r4, #26
 80071ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071cc:	3b01      	subs	r3, #1
 80071ce:	42bb      	cmp	r3, r7
 80071d0:	dc09      	bgt.n	80071e6 <_printf_float+0x24a>
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	079f      	lsls	r7, r3, #30
 80071d6:	f100 80fd 	bmi.w	80073d4 <_printf_float+0x438>
 80071da:	68e0      	ldr	r0, [r4, #12]
 80071dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071de:	4298      	cmp	r0, r3
 80071e0:	bfb8      	it	lt
 80071e2:	4618      	movlt	r0, r3
 80071e4:	e733      	b.n	800704e <_printf_float+0xb2>
 80071e6:	2301      	movs	r3, #1
 80071e8:	4642      	mov	r2, r8
 80071ea:	4659      	mov	r1, fp
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b0      	blx	r6
 80071f0:	3001      	adds	r0, #1
 80071f2:	f43f af2a 	beq.w	800704a <_printf_float+0xae>
 80071f6:	3701      	adds	r7, #1
 80071f8:	e7e7      	b.n	80071ca <_printf_float+0x22e>
 80071fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dc2b      	bgt.n	8007258 <_printf_float+0x2bc>
 8007200:	2301      	movs	r3, #1
 8007202:	4a26      	ldr	r2, [pc, #152]	; (800729c <_printf_float+0x300>)
 8007204:	4659      	mov	r1, fp
 8007206:	4628      	mov	r0, r5
 8007208:	47b0      	blx	r6
 800720a:	3001      	adds	r0, #1
 800720c:	f43f af1d 	beq.w	800704a <_printf_float+0xae>
 8007210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007212:	b923      	cbnz	r3, 800721e <_printf_float+0x282>
 8007214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007216:	b913      	cbnz	r3, 800721e <_printf_float+0x282>
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	07d9      	lsls	r1, r3, #31
 800721c:	d5d9      	bpl.n	80071d2 <_printf_float+0x236>
 800721e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007222:	4659      	mov	r1, fp
 8007224:	4628      	mov	r0, r5
 8007226:	47b0      	blx	r6
 8007228:	3001      	adds	r0, #1
 800722a:	f43f af0e 	beq.w	800704a <_printf_float+0xae>
 800722e:	f04f 0800 	mov.w	r8, #0
 8007232:	f104 091a 	add.w	r9, r4, #26
 8007236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007238:	425b      	negs	r3, r3
 800723a:	4543      	cmp	r3, r8
 800723c:	dc01      	bgt.n	8007242 <_printf_float+0x2a6>
 800723e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007240:	e797      	b.n	8007172 <_printf_float+0x1d6>
 8007242:	2301      	movs	r3, #1
 8007244:	464a      	mov	r2, r9
 8007246:	4659      	mov	r1, fp
 8007248:	4628      	mov	r0, r5
 800724a:	47b0      	blx	r6
 800724c:	3001      	adds	r0, #1
 800724e:	f43f aefc 	beq.w	800704a <_printf_float+0xae>
 8007252:	f108 0801 	add.w	r8, r8, #1
 8007256:	e7ee      	b.n	8007236 <_printf_float+0x29a>
 8007258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800725a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800725c:	429a      	cmp	r2, r3
 800725e:	bfa8      	it	ge
 8007260:	461a      	movge	r2, r3
 8007262:	2a00      	cmp	r2, #0
 8007264:	4690      	mov	r8, r2
 8007266:	dd07      	ble.n	8007278 <_printf_float+0x2dc>
 8007268:	4613      	mov	r3, r2
 800726a:	4659      	mov	r1, fp
 800726c:	463a      	mov	r2, r7
 800726e:	4628      	mov	r0, r5
 8007270:	47b0      	blx	r6
 8007272:	3001      	adds	r0, #1
 8007274:	f43f aee9 	beq.w	800704a <_printf_float+0xae>
 8007278:	f104 031a 	add.w	r3, r4, #26
 800727c:	f04f 0a00 	mov.w	sl, #0
 8007280:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007284:	930b      	str	r3, [sp, #44]	; 0x2c
 8007286:	e015      	b.n	80072b4 <_printf_float+0x318>
 8007288:	7fefffff 	.word	0x7fefffff
 800728c:	08009378 	.word	0x08009378
 8007290:	08009374 	.word	0x08009374
 8007294:	08009380 	.word	0x08009380
 8007298:	0800937c 	.word	0x0800937c
 800729c:	08009384 	.word	0x08009384
 80072a0:	2301      	movs	r3, #1
 80072a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072a4:	4659      	mov	r1, fp
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b0      	blx	r6
 80072aa:	3001      	adds	r0, #1
 80072ac:	f43f aecd 	beq.w	800704a <_printf_float+0xae>
 80072b0:	f10a 0a01 	add.w	sl, sl, #1
 80072b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80072b8:	eba9 0308 	sub.w	r3, r9, r8
 80072bc:	4553      	cmp	r3, sl
 80072be:	dcef      	bgt.n	80072a0 <_printf_float+0x304>
 80072c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072c4:	429a      	cmp	r2, r3
 80072c6:	444f      	add	r7, r9
 80072c8:	db14      	blt.n	80072f4 <_printf_float+0x358>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	07da      	lsls	r2, r3, #31
 80072ce:	d411      	bmi.n	80072f4 <_printf_float+0x358>
 80072d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80072d4:	eba3 0209 	sub.w	r2, r3, r9
 80072d8:	eba3 0901 	sub.w	r9, r3, r1
 80072dc:	4591      	cmp	r9, r2
 80072de:	bfa8      	it	ge
 80072e0:	4691      	movge	r9, r2
 80072e2:	f1b9 0f00 	cmp.w	r9, #0
 80072e6:	dc0d      	bgt.n	8007304 <_printf_float+0x368>
 80072e8:	2700      	movs	r7, #0
 80072ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ee:	f104 081a 	add.w	r8, r4, #26
 80072f2:	e018      	b.n	8007326 <_printf_float+0x38a>
 80072f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072f8:	4659      	mov	r1, fp
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b0      	blx	r6
 80072fe:	3001      	adds	r0, #1
 8007300:	d1e6      	bne.n	80072d0 <_printf_float+0x334>
 8007302:	e6a2      	b.n	800704a <_printf_float+0xae>
 8007304:	464b      	mov	r3, r9
 8007306:	463a      	mov	r2, r7
 8007308:	4659      	mov	r1, fp
 800730a:	4628      	mov	r0, r5
 800730c:	47b0      	blx	r6
 800730e:	3001      	adds	r0, #1
 8007310:	d1ea      	bne.n	80072e8 <_printf_float+0x34c>
 8007312:	e69a      	b.n	800704a <_printf_float+0xae>
 8007314:	2301      	movs	r3, #1
 8007316:	4642      	mov	r2, r8
 8007318:	4659      	mov	r1, fp
 800731a:	4628      	mov	r0, r5
 800731c:	47b0      	blx	r6
 800731e:	3001      	adds	r0, #1
 8007320:	f43f ae93 	beq.w	800704a <_printf_float+0xae>
 8007324:	3701      	adds	r7, #1
 8007326:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	eba3 0309 	sub.w	r3, r3, r9
 8007330:	42bb      	cmp	r3, r7
 8007332:	dcef      	bgt.n	8007314 <_printf_float+0x378>
 8007334:	e74d      	b.n	80071d2 <_printf_float+0x236>
 8007336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007338:	2a01      	cmp	r2, #1
 800733a:	dc01      	bgt.n	8007340 <_printf_float+0x3a4>
 800733c:	07db      	lsls	r3, r3, #31
 800733e:	d538      	bpl.n	80073b2 <_printf_float+0x416>
 8007340:	2301      	movs	r3, #1
 8007342:	463a      	mov	r2, r7
 8007344:	4659      	mov	r1, fp
 8007346:	4628      	mov	r0, r5
 8007348:	47b0      	blx	r6
 800734a:	3001      	adds	r0, #1
 800734c:	f43f ae7d 	beq.w	800704a <_printf_float+0xae>
 8007350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007354:	4659      	mov	r1, fp
 8007356:	4628      	mov	r0, r5
 8007358:	47b0      	blx	r6
 800735a:	3001      	adds	r0, #1
 800735c:	f107 0701 	add.w	r7, r7, #1
 8007360:	f43f ae73 	beq.w	800704a <_printf_float+0xae>
 8007364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800736a:	2200      	movs	r2, #0
 800736c:	f103 38ff 	add.w	r8, r3, #4294967295
 8007370:	2300      	movs	r3, #0
 8007372:	f7f9 fb19 	bl	80009a8 <__aeabi_dcmpeq>
 8007376:	b9c0      	cbnz	r0, 80073aa <_printf_float+0x40e>
 8007378:	4643      	mov	r3, r8
 800737a:	463a      	mov	r2, r7
 800737c:	4659      	mov	r1, fp
 800737e:	4628      	mov	r0, r5
 8007380:	47b0      	blx	r6
 8007382:	3001      	adds	r0, #1
 8007384:	d10d      	bne.n	80073a2 <_printf_float+0x406>
 8007386:	e660      	b.n	800704a <_printf_float+0xae>
 8007388:	2301      	movs	r3, #1
 800738a:	4642      	mov	r2, r8
 800738c:	4659      	mov	r1, fp
 800738e:	4628      	mov	r0, r5
 8007390:	47b0      	blx	r6
 8007392:	3001      	adds	r0, #1
 8007394:	f43f ae59 	beq.w	800704a <_printf_float+0xae>
 8007398:	3701      	adds	r7, #1
 800739a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800739c:	3b01      	subs	r3, #1
 800739e:	42bb      	cmp	r3, r7
 80073a0:	dcf2      	bgt.n	8007388 <_printf_float+0x3ec>
 80073a2:	464b      	mov	r3, r9
 80073a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073a8:	e6e4      	b.n	8007174 <_printf_float+0x1d8>
 80073aa:	2700      	movs	r7, #0
 80073ac:	f104 081a 	add.w	r8, r4, #26
 80073b0:	e7f3      	b.n	800739a <_printf_float+0x3fe>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e7e1      	b.n	800737a <_printf_float+0x3de>
 80073b6:	2301      	movs	r3, #1
 80073b8:	4642      	mov	r2, r8
 80073ba:	4659      	mov	r1, fp
 80073bc:	4628      	mov	r0, r5
 80073be:	47b0      	blx	r6
 80073c0:	3001      	adds	r0, #1
 80073c2:	f43f ae42 	beq.w	800704a <_printf_float+0xae>
 80073c6:	3701      	adds	r7, #1
 80073c8:	68e3      	ldr	r3, [r4, #12]
 80073ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	42bb      	cmp	r3, r7
 80073d0:	dcf1      	bgt.n	80073b6 <_printf_float+0x41a>
 80073d2:	e702      	b.n	80071da <_printf_float+0x23e>
 80073d4:	2700      	movs	r7, #0
 80073d6:	f104 0819 	add.w	r8, r4, #25
 80073da:	e7f5      	b.n	80073c8 <_printf_float+0x42c>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f43f ae94 	beq.w	800710a <_printf_float+0x16e>
 80073e2:	f04f 0c00 	mov.w	ip, #0
 80073e6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80073ea:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80073ee:	6022      	str	r2, [r4, #0]
 80073f0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80073f4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	463a      	mov	r2, r7
 80073fc:	464b      	mov	r3, r9
 80073fe:	4628      	mov	r0, r5
 8007400:	f7ff fd3a 	bl	8006e78 <__cvt>
 8007404:	4607      	mov	r7, r0
 8007406:	e64f      	b.n	80070a8 <_printf_float+0x10c>

08007408 <_printf_common>:
 8007408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800740c:	4691      	mov	r9, r2
 800740e:	461f      	mov	r7, r3
 8007410:	688a      	ldr	r2, [r1, #8]
 8007412:	690b      	ldr	r3, [r1, #16]
 8007414:	4606      	mov	r6, r0
 8007416:	4293      	cmp	r3, r2
 8007418:	bfb8      	it	lt
 800741a:	4613      	movlt	r3, r2
 800741c:	f8c9 3000 	str.w	r3, [r9]
 8007420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007424:	460c      	mov	r4, r1
 8007426:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800742a:	b112      	cbz	r2, 8007432 <_printf_common+0x2a>
 800742c:	3301      	adds	r3, #1
 800742e:	f8c9 3000 	str.w	r3, [r9]
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	0699      	lsls	r1, r3, #26
 8007436:	bf42      	ittt	mi
 8007438:	f8d9 3000 	ldrmi.w	r3, [r9]
 800743c:	3302      	addmi	r3, #2
 800743e:	f8c9 3000 	strmi.w	r3, [r9]
 8007442:	6825      	ldr	r5, [r4, #0]
 8007444:	f015 0506 	ands.w	r5, r5, #6
 8007448:	d107      	bne.n	800745a <_printf_common+0x52>
 800744a:	f104 0a19 	add.w	sl, r4, #25
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	f8d9 2000 	ldr.w	r2, [r9]
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	42ab      	cmp	r3, r5
 8007458:	dc29      	bgt.n	80074ae <_printf_common+0xa6>
 800745a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	3300      	adds	r3, #0
 8007462:	bf18      	it	ne
 8007464:	2301      	movne	r3, #1
 8007466:	0692      	lsls	r2, r2, #26
 8007468:	d42e      	bmi.n	80074c8 <_printf_common+0xc0>
 800746a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800746e:	4639      	mov	r1, r7
 8007470:	4630      	mov	r0, r6
 8007472:	47c0      	blx	r8
 8007474:	3001      	adds	r0, #1
 8007476:	d021      	beq.n	80074bc <_printf_common+0xb4>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	68e5      	ldr	r5, [r4, #12]
 800747c:	f003 0306 	and.w	r3, r3, #6
 8007480:	2b04      	cmp	r3, #4
 8007482:	bf18      	it	ne
 8007484:	2500      	movne	r5, #0
 8007486:	f8d9 2000 	ldr.w	r2, [r9]
 800748a:	f04f 0900 	mov.w	r9, #0
 800748e:	bf08      	it	eq
 8007490:	1aad      	subeq	r5, r5, r2
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	6922      	ldr	r2, [r4, #16]
 8007496:	bf08      	it	eq
 8007498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800749c:	4293      	cmp	r3, r2
 800749e:	bfc4      	itt	gt
 80074a0:	1a9b      	subgt	r3, r3, r2
 80074a2:	18ed      	addgt	r5, r5, r3
 80074a4:	341a      	adds	r4, #26
 80074a6:	454d      	cmp	r5, r9
 80074a8:	d11a      	bne.n	80074e0 <_printf_common+0xd8>
 80074aa:	2000      	movs	r0, #0
 80074ac:	e008      	b.n	80074c0 <_printf_common+0xb8>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4652      	mov	r2, sl
 80074b2:	4639      	mov	r1, r7
 80074b4:	4630      	mov	r0, r6
 80074b6:	47c0      	blx	r8
 80074b8:	3001      	adds	r0, #1
 80074ba:	d103      	bne.n	80074c4 <_printf_common+0xbc>
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c4:	3501      	adds	r5, #1
 80074c6:	e7c2      	b.n	800744e <_printf_common+0x46>
 80074c8:	2030      	movs	r0, #48	; 0x30
 80074ca:	18e1      	adds	r1, r4, r3
 80074cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074d6:	4422      	add	r2, r4
 80074d8:	3302      	adds	r3, #2
 80074da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074de:	e7c4      	b.n	800746a <_printf_common+0x62>
 80074e0:	2301      	movs	r3, #1
 80074e2:	4622      	mov	r2, r4
 80074e4:	4639      	mov	r1, r7
 80074e6:	4630      	mov	r0, r6
 80074e8:	47c0      	blx	r8
 80074ea:	3001      	adds	r0, #1
 80074ec:	d0e6      	beq.n	80074bc <_printf_common+0xb4>
 80074ee:	f109 0901 	add.w	r9, r9, #1
 80074f2:	e7d8      	b.n	80074a6 <_printf_common+0x9e>

080074f4 <_printf_i>:
 80074f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80074fc:	460c      	mov	r4, r1
 80074fe:	7e09      	ldrb	r1, [r1, #24]
 8007500:	b085      	sub	sp, #20
 8007502:	296e      	cmp	r1, #110	; 0x6e
 8007504:	4617      	mov	r7, r2
 8007506:	4606      	mov	r6, r0
 8007508:	4698      	mov	r8, r3
 800750a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800750c:	f000 80b3 	beq.w	8007676 <_printf_i+0x182>
 8007510:	d822      	bhi.n	8007558 <_printf_i+0x64>
 8007512:	2963      	cmp	r1, #99	; 0x63
 8007514:	d036      	beq.n	8007584 <_printf_i+0x90>
 8007516:	d80a      	bhi.n	800752e <_printf_i+0x3a>
 8007518:	2900      	cmp	r1, #0
 800751a:	f000 80b9 	beq.w	8007690 <_printf_i+0x19c>
 800751e:	2958      	cmp	r1, #88	; 0x58
 8007520:	f000 8083 	beq.w	800762a <_printf_i+0x136>
 8007524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007528:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800752c:	e032      	b.n	8007594 <_printf_i+0xa0>
 800752e:	2964      	cmp	r1, #100	; 0x64
 8007530:	d001      	beq.n	8007536 <_printf_i+0x42>
 8007532:	2969      	cmp	r1, #105	; 0x69
 8007534:	d1f6      	bne.n	8007524 <_printf_i+0x30>
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	6813      	ldr	r3, [r2, #0]
 800753a:	0605      	lsls	r5, r0, #24
 800753c:	f103 0104 	add.w	r1, r3, #4
 8007540:	d52a      	bpl.n	8007598 <_printf_i+0xa4>
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6011      	str	r1, [r2, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	da03      	bge.n	8007552 <_printf_i+0x5e>
 800754a:	222d      	movs	r2, #45	; 0x2d
 800754c:	425b      	negs	r3, r3
 800754e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007552:	486f      	ldr	r0, [pc, #444]	; (8007710 <_printf_i+0x21c>)
 8007554:	220a      	movs	r2, #10
 8007556:	e039      	b.n	80075cc <_printf_i+0xd8>
 8007558:	2973      	cmp	r1, #115	; 0x73
 800755a:	f000 809d 	beq.w	8007698 <_printf_i+0x1a4>
 800755e:	d808      	bhi.n	8007572 <_printf_i+0x7e>
 8007560:	296f      	cmp	r1, #111	; 0x6f
 8007562:	d020      	beq.n	80075a6 <_printf_i+0xb2>
 8007564:	2970      	cmp	r1, #112	; 0x70
 8007566:	d1dd      	bne.n	8007524 <_printf_i+0x30>
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	f043 0320 	orr.w	r3, r3, #32
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	e003      	b.n	800757a <_printf_i+0x86>
 8007572:	2975      	cmp	r1, #117	; 0x75
 8007574:	d017      	beq.n	80075a6 <_printf_i+0xb2>
 8007576:	2978      	cmp	r1, #120	; 0x78
 8007578:	d1d4      	bne.n	8007524 <_printf_i+0x30>
 800757a:	2378      	movs	r3, #120	; 0x78
 800757c:	4865      	ldr	r0, [pc, #404]	; (8007714 <_printf_i+0x220>)
 800757e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007582:	e055      	b.n	8007630 <_printf_i+0x13c>
 8007584:	6813      	ldr	r3, [r2, #0]
 8007586:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800758a:	1d19      	adds	r1, r3, #4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6011      	str	r1, [r2, #0]
 8007590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007594:	2301      	movs	r3, #1
 8007596:	e08c      	b.n	80076b2 <_printf_i+0x1be>
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800759e:	6011      	str	r1, [r2, #0]
 80075a0:	bf18      	it	ne
 80075a2:	b21b      	sxthne	r3, r3
 80075a4:	e7cf      	b.n	8007546 <_printf_i+0x52>
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	6825      	ldr	r5, [r4, #0]
 80075aa:	1d18      	adds	r0, r3, #4
 80075ac:	6010      	str	r0, [r2, #0]
 80075ae:	0628      	lsls	r0, r5, #24
 80075b0:	d501      	bpl.n	80075b6 <_printf_i+0xc2>
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	e002      	b.n	80075bc <_printf_i+0xc8>
 80075b6:	0668      	lsls	r0, r5, #25
 80075b8:	d5fb      	bpl.n	80075b2 <_printf_i+0xbe>
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	296f      	cmp	r1, #111	; 0x6f
 80075be:	bf14      	ite	ne
 80075c0:	220a      	movne	r2, #10
 80075c2:	2208      	moveq	r2, #8
 80075c4:	4852      	ldr	r0, [pc, #328]	; (8007710 <_printf_i+0x21c>)
 80075c6:	2100      	movs	r1, #0
 80075c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075cc:	6865      	ldr	r5, [r4, #4]
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	60a5      	str	r5, [r4, #8]
 80075d2:	f2c0 8095 	blt.w	8007700 <_printf_i+0x20c>
 80075d6:	6821      	ldr	r1, [r4, #0]
 80075d8:	f021 0104 	bic.w	r1, r1, #4
 80075dc:	6021      	str	r1, [r4, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d13d      	bne.n	800765e <_printf_i+0x16a>
 80075e2:	2d00      	cmp	r5, #0
 80075e4:	f040 808e 	bne.w	8007704 <_printf_i+0x210>
 80075e8:	4665      	mov	r5, ip
 80075ea:	2a08      	cmp	r2, #8
 80075ec:	d10b      	bne.n	8007606 <_printf_i+0x112>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	07db      	lsls	r3, r3, #31
 80075f2:	d508      	bpl.n	8007606 <_printf_i+0x112>
 80075f4:	6923      	ldr	r3, [r4, #16]
 80075f6:	6862      	ldr	r2, [r4, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	bfde      	ittt	le
 80075fc:	2330      	movle	r3, #48	; 0x30
 80075fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007602:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007606:	ebac 0305 	sub.w	r3, ip, r5
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	f8cd 8000 	str.w	r8, [sp]
 8007610:	463b      	mov	r3, r7
 8007612:	aa03      	add	r2, sp, #12
 8007614:	4621      	mov	r1, r4
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff fef6 	bl	8007408 <_printf_common>
 800761c:	3001      	adds	r0, #1
 800761e:	d14d      	bne.n	80076bc <_printf_i+0x1c8>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b005      	add	sp, #20
 8007626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800762a:	4839      	ldr	r0, [pc, #228]	; (8007710 <_printf_i+0x21c>)
 800762c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007630:	6813      	ldr	r3, [r2, #0]
 8007632:	6821      	ldr	r1, [r4, #0]
 8007634:	1d1d      	adds	r5, r3, #4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6015      	str	r5, [r2, #0]
 800763a:	060a      	lsls	r2, r1, #24
 800763c:	d50b      	bpl.n	8007656 <_printf_i+0x162>
 800763e:	07ca      	lsls	r2, r1, #31
 8007640:	bf44      	itt	mi
 8007642:	f041 0120 	orrmi.w	r1, r1, #32
 8007646:	6021      	strmi	r1, [r4, #0]
 8007648:	b91b      	cbnz	r3, 8007652 <_printf_i+0x15e>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	f022 0220 	bic.w	r2, r2, #32
 8007650:	6022      	str	r2, [r4, #0]
 8007652:	2210      	movs	r2, #16
 8007654:	e7b7      	b.n	80075c6 <_printf_i+0xd2>
 8007656:	064d      	lsls	r5, r1, #25
 8007658:	bf48      	it	mi
 800765a:	b29b      	uxthmi	r3, r3
 800765c:	e7ef      	b.n	800763e <_printf_i+0x14a>
 800765e:	4665      	mov	r5, ip
 8007660:	fbb3 f1f2 	udiv	r1, r3, r2
 8007664:	fb02 3311 	mls	r3, r2, r1, r3
 8007668:	5cc3      	ldrb	r3, [r0, r3]
 800766a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800766e:	460b      	mov	r3, r1
 8007670:	2900      	cmp	r1, #0
 8007672:	d1f5      	bne.n	8007660 <_printf_i+0x16c>
 8007674:	e7b9      	b.n	80075ea <_printf_i+0xf6>
 8007676:	6813      	ldr	r3, [r2, #0]
 8007678:	6825      	ldr	r5, [r4, #0]
 800767a:	1d18      	adds	r0, r3, #4
 800767c:	6961      	ldr	r1, [r4, #20]
 800767e:	6010      	str	r0, [r2, #0]
 8007680:	0628      	lsls	r0, r5, #24
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	d501      	bpl.n	800768a <_printf_i+0x196>
 8007686:	6019      	str	r1, [r3, #0]
 8007688:	e002      	b.n	8007690 <_printf_i+0x19c>
 800768a:	066a      	lsls	r2, r5, #25
 800768c:	d5fb      	bpl.n	8007686 <_printf_i+0x192>
 800768e:	8019      	strh	r1, [r3, #0]
 8007690:	2300      	movs	r3, #0
 8007692:	4665      	mov	r5, ip
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	e7b9      	b.n	800760c <_printf_i+0x118>
 8007698:	6813      	ldr	r3, [r2, #0]
 800769a:	1d19      	adds	r1, r3, #4
 800769c:	6011      	str	r1, [r2, #0]
 800769e:	681d      	ldr	r5, [r3, #0]
 80076a0:	6862      	ldr	r2, [r4, #4]
 80076a2:	2100      	movs	r1, #0
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 fec9 	bl	800843c <memchr>
 80076aa:	b108      	cbz	r0, 80076b0 <_printf_i+0x1bc>
 80076ac:	1b40      	subs	r0, r0, r5
 80076ae:	6060      	str	r0, [r4, #4]
 80076b0:	6863      	ldr	r3, [r4, #4]
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	2300      	movs	r3, #0
 80076b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ba:	e7a7      	b.n	800760c <_printf_i+0x118>
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	462a      	mov	r2, r5
 80076c0:	4639      	mov	r1, r7
 80076c2:	4630      	mov	r0, r6
 80076c4:	47c0      	blx	r8
 80076c6:	3001      	adds	r0, #1
 80076c8:	d0aa      	beq.n	8007620 <_printf_i+0x12c>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	079b      	lsls	r3, r3, #30
 80076ce:	d413      	bmi.n	80076f8 <_printf_i+0x204>
 80076d0:	68e0      	ldr	r0, [r4, #12]
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	4298      	cmp	r0, r3
 80076d6:	bfb8      	it	lt
 80076d8:	4618      	movlt	r0, r3
 80076da:	e7a3      	b.n	8007624 <_printf_i+0x130>
 80076dc:	2301      	movs	r3, #1
 80076de:	464a      	mov	r2, r9
 80076e0:	4639      	mov	r1, r7
 80076e2:	4630      	mov	r0, r6
 80076e4:	47c0      	blx	r8
 80076e6:	3001      	adds	r0, #1
 80076e8:	d09a      	beq.n	8007620 <_printf_i+0x12c>
 80076ea:	3501      	adds	r5, #1
 80076ec:	68e3      	ldr	r3, [r4, #12]
 80076ee:	9a03      	ldr	r2, [sp, #12]
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	42ab      	cmp	r3, r5
 80076f4:	dcf2      	bgt.n	80076dc <_printf_i+0x1e8>
 80076f6:	e7eb      	b.n	80076d0 <_printf_i+0x1dc>
 80076f8:	2500      	movs	r5, #0
 80076fa:	f104 0919 	add.w	r9, r4, #25
 80076fe:	e7f5      	b.n	80076ec <_printf_i+0x1f8>
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1ac      	bne.n	800765e <_printf_i+0x16a>
 8007704:	7803      	ldrb	r3, [r0, #0]
 8007706:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800770a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800770e:	e76c      	b.n	80075ea <_printf_i+0xf6>
 8007710:	08009386 	.word	0x08009386
 8007714:	08009397 	.word	0x08009397

08007718 <siprintf>:
 8007718:	b40e      	push	{r1, r2, r3}
 800771a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800771e:	b500      	push	{lr}
 8007720:	b09c      	sub	sp, #112	; 0x70
 8007722:	ab1d      	add	r3, sp, #116	; 0x74
 8007724:	9002      	str	r0, [sp, #8]
 8007726:	9006      	str	r0, [sp, #24]
 8007728:	9107      	str	r1, [sp, #28]
 800772a:	9104      	str	r1, [sp, #16]
 800772c:	4808      	ldr	r0, [pc, #32]	; (8007750 <siprintf+0x38>)
 800772e:	4909      	ldr	r1, [pc, #36]	; (8007754 <siprintf+0x3c>)
 8007730:	f853 2b04 	ldr.w	r2, [r3], #4
 8007734:	9105      	str	r1, [sp, #20]
 8007736:	6800      	ldr	r0, [r0, #0]
 8007738:	a902      	add	r1, sp, #8
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	f001 fa82 	bl	8008c44 <_svfiprintf_r>
 8007740:	2200      	movs	r2, #0
 8007742:	9b02      	ldr	r3, [sp, #8]
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	b01c      	add	sp, #112	; 0x70
 8007748:	f85d eb04 	ldr.w	lr, [sp], #4
 800774c:	b003      	add	sp, #12
 800774e:	4770      	bx	lr
 8007750:	2000000c 	.word	0x2000000c
 8007754:	ffff0208 	.word	0xffff0208

08007758 <strstr>:
 8007758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775a:	7803      	ldrb	r3, [r0, #0]
 800775c:	b17b      	cbz	r3, 800777e <strstr+0x26>
 800775e:	4604      	mov	r4, r0
 8007760:	7823      	ldrb	r3, [r4, #0]
 8007762:	4620      	mov	r0, r4
 8007764:	1c66      	adds	r6, r4, #1
 8007766:	b17b      	cbz	r3, 8007788 <strstr+0x30>
 8007768:	1e4a      	subs	r2, r1, #1
 800776a:	1e63      	subs	r3, r4, #1
 800776c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007770:	b14d      	cbz	r5, 8007786 <strstr+0x2e>
 8007772:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007776:	4634      	mov	r4, r6
 8007778:	42af      	cmp	r7, r5
 800777a:	d0f7      	beq.n	800776c <strstr+0x14>
 800777c:	e7f0      	b.n	8007760 <strstr+0x8>
 800777e:	780b      	ldrb	r3, [r1, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	bf18      	it	ne
 8007784:	2000      	movne	r0, #0
 8007786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007788:	4618      	mov	r0, r3
 800778a:	e7fc      	b.n	8007786 <strstr+0x2e>

0800778c <quorem>:
 800778c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007790:	6903      	ldr	r3, [r0, #16]
 8007792:	690c      	ldr	r4, [r1, #16]
 8007794:	4680      	mov	r8, r0
 8007796:	42a3      	cmp	r3, r4
 8007798:	f2c0 8084 	blt.w	80078a4 <quorem+0x118>
 800779c:	3c01      	subs	r4, #1
 800779e:	f101 0714 	add.w	r7, r1, #20
 80077a2:	f100 0614 	add.w	r6, r0, #20
 80077a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80077aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80077ae:	3501      	adds	r5, #1
 80077b0:	fbb0 f5f5 	udiv	r5, r0, r5
 80077b4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80077b8:	eb06 030c 	add.w	r3, r6, ip
 80077bc:	eb07 090c 	add.w	r9, r7, ip
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	b39d      	cbz	r5, 800782c <quorem+0xa0>
 80077c4:	f04f 0a00 	mov.w	sl, #0
 80077c8:	4638      	mov	r0, r7
 80077ca:	46b6      	mov	lr, r6
 80077cc:	46d3      	mov	fp, sl
 80077ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80077d2:	b293      	uxth	r3, r2
 80077d4:	fb05 a303 	mla	r3, r5, r3, sl
 80077d8:	0c12      	lsrs	r2, r2, #16
 80077da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077de:	fb05 a202 	mla	r2, r5, r2, sl
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	ebab 0303 	sub.w	r3, fp, r3
 80077e8:	f8de b000 	ldr.w	fp, [lr]
 80077ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80077f0:	fa1f fb8b 	uxth.w	fp, fp
 80077f4:	445b      	add	r3, fp
 80077f6:	fa1f fb82 	uxth.w	fp, r2
 80077fa:	f8de 2000 	ldr.w	r2, [lr]
 80077fe:	4581      	cmp	r9, r0
 8007800:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007808:	b29b      	uxth	r3, r3
 800780a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800780e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007812:	f84e 3b04 	str.w	r3, [lr], #4
 8007816:	d2da      	bcs.n	80077ce <quorem+0x42>
 8007818:	f856 300c 	ldr.w	r3, [r6, ip]
 800781c:	b933      	cbnz	r3, 800782c <quorem+0xa0>
 800781e:	9b01      	ldr	r3, [sp, #4]
 8007820:	3b04      	subs	r3, #4
 8007822:	429e      	cmp	r6, r3
 8007824:	461a      	mov	r2, r3
 8007826:	d331      	bcc.n	800788c <quorem+0x100>
 8007828:	f8c8 4010 	str.w	r4, [r8, #16]
 800782c:	4640      	mov	r0, r8
 800782e:	f001 f833 	bl	8008898 <__mcmp>
 8007832:	2800      	cmp	r0, #0
 8007834:	db26      	blt.n	8007884 <quorem+0xf8>
 8007836:	4630      	mov	r0, r6
 8007838:	f04f 0c00 	mov.w	ip, #0
 800783c:	3501      	adds	r5, #1
 800783e:	f857 1b04 	ldr.w	r1, [r7], #4
 8007842:	f8d0 e000 	ldr.w	lr, [r0]
 8007846:	b28b      	uxth	r3, r1
 8007848:	ebac 0303 	sub.w	r3, ip, r3
 800784c:	fa1f f28e 	uxth.w	r2, lr
 8007850:	4413      	add	r3, r2
 8007852:	0c0a      	lsrs	r2, r1, #16
 8007854:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007858:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800785c:	b29b      	uxth	r3, r3
 800785e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007862:	45b9      	cmp	r9, r7
 8007864:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007868:	f840 3b04 	str.w	r3, [r0], #4
 800786c:	d2e7      	bcs.n	800783e <quorem+0xb2>
 800786e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007872:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007876:	b92a      	cbnz	r2, 8007884 <quorem+0xf8>
 8007878:	3b04      	subs	r3, #4
 800787a:	429e      	cmp	r6, r3
 800787c:	461a      	mov	r2, r3
 800787e:	d30b      	bcc.n	8007898 <quorem+0x10c>
 8007880:	f8c8 4010 	str.w	r4, [r8, #16]
 8007884:	4628      	mov	r0, r5
 8007886:	b003      	add	sp, #12
 8007888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	3b04      	subs	r3, #4
 8007890:	2a00      	cmp	r2, #0
 8007892:	d1c9      	bne.n	8007828 <quorem+0x9c>
 8007894:	3c01      	subs	r4, #1
 8007896:	e7c4      	b.n	8007822 <quorem+0x96>
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	3b04      	subs	r3, #4
 800789c:	2a00      	cmp	r2, #0
 800789e:	d1ef      	bne.n	8007880 <quorem+0xf4>
 80078a0:	3c01      	subs	r4, #1
 80078a2:	e7ea      	b.n	800787a <quorem+0xee>
 80078a4:	2000      	movs	r0, #0
 80078a6:	e7ee      	b.n	8007886 <quorem+0xfa>

080078a8 <_dtoa_r>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	4616      	mov	r6, r2
 80078ae:	461f      	mov	r7, r3
 80078b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078b2:	b095      	sub	sp, #84	; 0x54
 80078b4:	4604      	mov	r4, r0
 80078b6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80078ba:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80078be:	b93d      	cbnz	r5, 80078d0 <_dtoa_r+0x28>
 80078c0:	2010      	movs	r0, #16
 80078c2:	f000 fdb3 	bl	800842c <malloc>
 80078c6:	6260      	str	r0, [r4, #36]	; 0x24
 80078c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078cc:	6005      	str	r5, [r0, #0]
 80078ce:	60c5      	str	r5, [r0, #12]
 80078d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	b151      	cbz	r1, 80078ec <_dtoa_r+0x44>
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	2301      	movs	r3, #1
 80078da:	4093      	lsls	r3, r2
 80078dc:	604a      	str	r2, [r1, #4]
 80078de:	608b      	str	r3, [r1, #8]
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 fdf8 	bl	80084d6 <_Bfree>
 80078e6:	2200      	movs	r2, #0
 80078e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	1e3b      	subs	r3, r7, #0
 80078ee:	bfaf      	iteee	ge
 80078f0:	2300      	movge	r3, #0
 80078f2:	2201      	movlt	r2, #1
 80078f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078f8:	9303      	strlt	r3, [sp, #12]
 80078fa:	bfac      	ite	ge
 80078fc:	f8c8 3000 	strge.w	r3, [r8]
 8007900:	f8c8 2000 	strlt.w	r2, [r8]
 8007904:	4bae      	ldr	r3, [pc, #696]	; (8007bc0 <_dtoa_r+0x318>)
 8007906:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800790a:	ea33 0308 	bics.w	r3, r3, r8
 800790e:	d11b      	bne.n	8007948 <_dtoa_r+0xa0>
 8007910:	f242 730f 	movw	r3, #9999	; 0x270f
 8007914:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	9b02      	ldr	r3, [sp, #8]
 800791a:	b923      	cbnz	r3, 8007926 <_dtoa_r+0x7e>
 800791c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007920:	2800      	cmp	r0, #0
 8007922:	f000 8545 	beq.w	80083b0 <_dtoa_r+0xb08>
 8007926:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007928:	b953      	cbnz	r3, 8007940 <_dtoa_r+0x98>
 800792a:	4ba6      	ldr	r3, [pc, #664]	; (8007bc4 <_dtoa_r+0x31c>)
 800792c:	e021      	b.n	8007972 <_dtoa_r+0xca>
 800792e:	4ba6      	ldr	r3, [pc, #664]	; (8007bc8 <_dtoa_r+0x320>)
 8007930:	9306      	str	r3, [sp, #24]
 8007932:	3308      	adds	r3, #8
 8007934:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	9806      	ldr	r0, [sp, #24]
 800793a:	b015      	add	sp, #84	; 0x54
 800793c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007940:	4ba0      	ldr	r3, [pc, #640]	; (8007bc4 <_dtoa_r+0x31c>)
 8007942:	9306      	str	r3, [sp, #24]
 8007944:	3303      	adds	r3, #3
 8007946:	e7f5      	b.n	8007934 <_dtoa_r+0x8c>
 8007948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800794c:	2200      	movs	r2, #0
 800794e:	2300      	movs	r3, #0
 8007950:	4630      	mov	r0, r6
 8007952:	4639      	mov	r1, r7
 8007954:	f7f9 f828 	bl	80009a8 <__aeabi_dcmpeq>
 8007958:	4682      	mov	sl, r0
 800795a:	b160      	cbz	r0, 8007976 <_dtoa_r+0xce>
 800795c:	2301      	movs	r3, #1
 800795e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 8520 	beq.w	80083aa <_dtoa_r+0xb02>
 800796a:	4b98      	ldr	r3, [pc, #608]	; (8007bcc <_dtoa_r+0x324>)
 800796c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	3b01      	subs	r3, #1
 8007972:	9306      	str	r3, [sp, #24]
 8007974:	e7e0      	b.n	8007938 <_dtoa_r+0x90>
 8007976:	ab12      	add	r3, sp, #72	; 0x48
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	ab13      	add	r3, sp, #76	; 0x4c
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	4632      	mov	r2, r6
 8007980:	463b      	mov	r3, r7
 8007982:	4620      	mov	r0, r4
 8007984:	f001 f800 	bl	8008988 <__d2b>
 8007988:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800798c:	4683      	mov	fp, r0
 800798e:	2d00      	cmp	r5, #0
 8007990:	d07d      	beq.n	8007a8e <_dtoa_r+0x1e6>
 8007992:	46b0      	mov	r8, r6
 8007994:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007998:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800799c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80079a0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079a4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80079a8:	2200      	movs	r2, #0
 80079aa:	4b89      	ldr	r3, [pc, #548]	; (8007bd0 <_dtoa_r+0x328>)
 80079ac:	4640      	mov	r0, r8
 80079ae:	4649      	mov	r1, r9
 80079b0:	f7f8 fbda 	bl	8000168 <__aeabi_dsub>
 80079b4:	a37c      	add	r3, pc, #496	; (adr r3, 8007ba8 <_dtoa_r+0x300>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f7f8 fd8d 	bl	80004d8 <__aeabi_dmul>
 80079be:	a37c      	add	r3, pc, #496	; (adr r3, 8007bb0 <_dtoa_r+0x308>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f7f8 fbd2 	bl	800016c <__adddf3>
 80079c8:	4606      	mov	r6, r0
 80079ca:	4628      	mov	r0, r5
 80079cc:	460f      	mov	r7, r1
 80079ce:	f7f8 fd19 	bl	8000404 <__aeabi_i2d>
 80079d2:	a379      	add	r3, pc, #484	; (adr r3, 8007bb8 <_dtoa_r+0x310>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f7f8 fd7e 	bl	80004d8 <__aeabi_dmul>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4630      	mov	r0, r6
 80079e2:	4639      	mov	r1, r7
 80079e4:	f7f8 fbc2 	bl	800016c <__adddf3>
 80079e8:	4606      	mov	r6, r0
 80079ea:	460f      	mov	r7, r1
 80079ec:	f7f9 f824 	bl	8000a38 <__aeabi_d2iz>
 80079f0:	2200      	movs	r2, #0
 80079f2:	4682      	mov	sl, r0
 80079f4:	2300      	movs	r3, #0
 80079f6:	4630      	mov	r0, r6
 80079f8:	4639      	mov	r1, r7
 80079fa:	f7f8 ffdf 	bl	80009bc <__aeabi_dcmplt>
 80079fe:	b148      	cbz	r0, 8007a14 <_dtoa_r+0x16c>
 8007a00:	4650      	mov	r0, sl
 8007a02:	f7f8 fcff 	bl	8000404 <__aeabi_i2d>
 8007a06:	4632      	mov	r2, r6
 8007a08:	463b      	mov	r3, r7
 8007a0a:	f7f8 ffcd 	bl	80009a8 <__aeabi_dcmpeq>
 8007a0e:	b908      	cbnz	r0, 8007a14 <_dtoa_r+0x16c>
 8007a10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a14:	f1ba 0f16 	cmp.w	sl, #22
 8007a18:	d85a      	bhi.n	8007ad0 <_dtoa_r+0x228>
 8007a1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a1e:	496d      	ldr	r1, [pc, #436]	; (8007bd4 <_dtoa_r+0x32c>)
 8007a20:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a28:	f7f8 ffe6 	bl	80009f8 <__aeabi_dcmpgt>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d051      	beq.n	8007ad4 <_dtoa_r+0x22c>
 8007a30:	2300      	movs	r3, #0
 8007a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a36:	930d      	str	r3, [sp, #52]	; 0x34
 8007a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a3a:	1b5d      	subs	r5, r3, r5
 8007a3c:	1e6b      	subs	r3, r5, #1
 8007a3e:	9307      	str	r3, [sp, #28]
 8007a40:	bf43      	ittte	mi
 8007a42:	2300      	movmi	r3, #0
 8007a44:	f1c5 0901 	rsbmi	r9, r5, #1
 8007a48:	9307      	strmi	r3, [sp, #28]
 8007a4a:	f04f 0900 	movpl.w	r9, #0
 8007a4e:	f1ba 0f00 	cmp.w	sl, #0
 8007a52:	db41      	blt.n	8007ad8 <_dtoa_r+0x230>
 8007a54:	9b07      	ldr	r3, [sp, #28]
 8007a56:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007a5a:	4453      	add	r3, sl
 8007a5c:	9307      	str	r3, [sp, #28]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9308      	str	r3, [sp, #32]
 8007a62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a64:	2b09      	cmp	r3, #9
 8007a66:	f200 808f 	bhi.w	8007b88 <_dtoa_r+0x2e0>
 8007a6a:	2b05      	cmp	r3, #5
 8007a6c:	bfc4      	itt	gt
 8007a6e:	3b04      	subgt	r3, #4
 8007a70:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007a72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a74:	bfc8      	it	gt
 8007a76:	2500      	movgt	r5, #0
 8007a78:	f1a3 0302 	sub.w	r3, r3, #2
 8007a7c:	bfd8      	it	le
 8007a7e:	2501      	movle	r5, #1
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	f200 808d 	bhi.w	8007ba0 <_dtoa_r+0x2f8>
 8007a86:	e8df f003 	tbb	[pc, r3]
 8007a8a:	7d7b      	.short	0x7d7b
 8007a8c:	6f2f      	.short	0x6f2f
 8007a8e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007a92:	441d      	add	r5, r3
 8007a94:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007a98:	2820      	cmp	r0, #32
 8007a9a:	dd13      	ble.n	8007ac4 <_dtoa_r+0x21c>
 8007a9c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007aa0:	9b02      	ldr	r3, [sp, #8]
 8007aa2:	fa08 f800 	lsl.w	r8, r8, r0
 8007aa6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007aaa:	fa23 f000 	lsr.w	r0, r3, r0
 8007aae:	ea48 0000 	orr.w	r0, r8, r0
 8007ab2:	f7f8 fc97 	bl	80003e4 <__aeabi_ui2d>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4680      	mov	r8, r0
 8007aba:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007abe:	3d01      	subs	r5, #1
 8007ac0:	9310      	str	r3, [sp, #64]	; 0x40
 8007ac2:	e771      	b.n	80079a8 <_dtoa_r+0x100>
 8007ac4:	9b02      	ldr	r3, [sp, #8]
 8007ac6:	f1c0 0020 	rsb	r0, r0, #32
 8007aca:	fa03 f000 	lsl.w	r0, r3, r0
 8007ace:	e7f0      	b.n	8007ab2 <_dtoa_r+0x20a>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e7b0      	b.n	8007a36 <_dtoa_r+0x18e>
 8007ad4:	900d      	str	r0, [sp, #52]	; 0x34
 8007ad6:	e7af      	b.n	8007a38 <_dtoa_r+0x190>
 8007ad8:	f1ca 0300 	rsb	r3, sl, #0
 8007adc:	9308      	str	r3, [sp, #32]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	eba9 090a 	sub.w	r9, r9, sl
 8007ae4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ae6:	e7bc      	b.n	8007a62 <_dtoa_r+0x1ba>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	9309      	str	r3, [sp, #36]	; 0x24
 8007aec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	dd74      	ble.n	8007bdc <_dtoa_r+0x334>
 8007af2:	4698      	mov	r8, r3
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	2200      	movs	r2, #0
 8007af8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007afa:	6072      	str	r2, [r6, #4]
 8007afc:	2204      	movs	r2, #4
 8007afe:	f102 0014 	add.w	r0, r2, #20
 8007b02:	4298      	cmp	r0, r3
 8007b04:	6871      	ldr	r1, [r6, #4]
 8007b06:	d96e      	bls.n	8007be6 <_dtoa_r+0x33e>
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fcb0 	bl	800846e <_Balloc>
 8007b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b10:	6030      	str	r0, [r6, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f1b8 0f0e 	cmp.w	r8, #14
 8007b18:	9306      	str	r3, [sp, #24]
 8007b1a:	f200 80ed 	bhi.w	8007cf8 <_dtoa_r+0x450>
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	f000 80ea 	beq.w	8007cf8 <_dtoa_r+0x450>
 8007b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b28:	f1ba 0f00 	cmp.w	sl, #0
 8007b2c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b30:	dd77      	ble.n	8007c22 <_dtoa_r+0x37a>
 8007b32:	4a28      	ldr	r2, [pc, #160]	; (8007bd4 <_dtoa_r+0x32c>)
 8007b34:	f00a 030f 	and.w	r3, sl, #15
 8007b38:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007b3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b40:	06f0      	lsls	r0, r6, #27
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b4a:	d568      	bpl.n	8007c1e <_dtoa_r+0x376>
 8007b4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b50:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <_dtoa_r+0x330>)
 8007b52:	2503      	movs	r5, #3
 8007b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b58:	f7f8 fde8 	bl	800072c <__aeabi_ddiv>
 8007b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b60:	f006 060f 	and.w	r6, r6, #15
 8007b64:	4f1c      	ldr	r7, [pc, #112]	; (8007bd8 <_dtoa_r+0x330>)
 8007b66:	e04f      	b.n	8007c08 <_dtoa_r+0x360>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b6e:	4453      	add	r3, sl
 8007b70:	f103 0801 	add.w	r8, r3, #1
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	4643      	mov	r3, r8
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	bfb8      	it	lt
 8007b7c:	2301      	movlt	r3, #1
 8007b7e:	e7ba      	b.n	8007af6 <_dtoa_r+0x24e>
 8007b80:	2300      	movs	r3, #0
 8007b82:	e7b2      	b.n	8007aea <_dtoa_r+0x242>
 8007b84:	2300      	movs	r3, #0
 8007b86:	e7f0      	b.n	8007b6a <_dtoa_r+0x2c2>
 8007b88:	2501      	movs	r5, #1
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9509      	str	r5, [sp, #36]	; 0x24
 8007b8e:	931e      	str	r3, [sp, #120]	; 0x78
 8007b90:	f04f 33ff 	mov.w	r3, #4294967295
 8007b94:	2200      	movs	r2, #0
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	4698      	mov	r8, r3
 8007b9a:	2312      	movs	r3, #18
 8007b9c:	921f      	str	r2, [sp, #124]	; 0x7c
 8007b9e:	e7aa      	b.n	8007af6 <_dtoa_r+0x24e>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba4:	e7f4      	b.n	8007b90 <_dtoa_r+0x2e8>
 8007ba6:	bf00      	nop
 8007ba8:	636f4361 	.word	0x636f4361
 8007bac:	3fd287a7 	.word	0x3fd287a7
 8007bb0:	8b60c8b3 	.word	0x8b60c8b3
 8007bb4:	3fc68a28 	.word	0x3fc68a28
 8007bb8:	509f79fb 	.word	0x509f79fb
 8007bbc:	3fd34413 	.word	0x3fd34413
 8007bc0:	7ff00000 	.word	0x7ff00000
 8007bc4:	080093b1 	.word	0x080093b1
 8007bc8:	080093a8 	.word	0x080093a8
 8007bcc:	08009385 	.word	0x08009385
 8007bd0:	3ff80000 	.word	0x3ff80000
 8007bd4:	080093e0 	.word	0x080093e0
 8007bd8:	080093b8 	.word	0x080093b8
 8007bdc:	2301      	movs	r3, #1
 8007bde:	9304      	str	r3, [sp, #16]
 8007be0:	4698      	mov	r8, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	e7da      	b.n	8007b9c <_dtoa_r+0x2f4>
 8007be6:	3101      	adds	r1, #1
 8007be8:	6071      	str	r1, [r6, #4]
 8007bea:	0052      	lsls	r2, r2, #1
 8007bec:	e787      	b.n	8007afe <_dtoa_r+0x256>
 8007bee:	07f1      	lsls	r1, r6, #31
 8007bf0:	d508      	bpl.n	8007c04 <_dtoa_r+0x35c>
 8007bf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bfa:	f7f8 fc6d 	bl	80004d8 <__aeabi_dmul>
 8007bfe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007c02:	3501      	adds	r5, #1
 8007c04:	1076      	asrs	r6, r6, #1
 8007c06:	3708      	adds	r7, #8
 8007c08:	2e00      	cmp	r6, #0
 8007c0a:	d1f0      	bne.n	8007bee <_dtoa_r+0x346>
 8007c0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c14:	f7f8 fd8a 	bl	800072c <__aeabi_ddiv>
 8007c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c1c:	e01b      	b.n	8007c56 <_dtoa_r+0x3ae>
 8007c1e:	2502      	movs	r5, #2
 8007c20:	e7a0      	b.n	8007b64 <_dtoa_r+0x2bc>
 8007c22:	f000 80a4 	beq.w	8007d6e <_dtoa_r+0x4c6>
 8007c26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007c2a:	f1ca 0600 	rsb	r6, sl, #0
 8007c2e:	4ba0      	ldr	r3, [pc, #640]	; (8007eb0 <_dtoa_r+0x608>)
 8007c30:	f006 020f 	and.w	r2, r6, #15
 8007c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 fc4c 	bl	80004d8 <__aeabi_dmul>
 8007c40:	2502      	movs	r5, #2
 8007c42:	2300      	movs	r3, #0
 8007c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c48:	4f9a      	ldr	r7, [pc, #616]	; (8007eb4 <_dtoa_r+0x60c>)
 8007c4a:	1136      	asrs	r6, r6, #4
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	f040 8083 	bne.w	8007d58 <_dtoa_r+0x4b0>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e0      	bne.n	8007c18 <_dtoa_r+0x370>
 8007c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 808a 	beq.w	8007d72 <_dtoa_r+0x4ca>
 8007c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4b92      	ldr	r3, [pc, #584]	; (8007eb8 <_dtoa_r+0x610>)
 8007c6e:	f7f8 fea5 	bl	80009bc <__aeabi_dcmplt>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d07d      	beq.n	8007d72 <_dtoa_r+0x4ca>
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	d07a      	beq.n	8007d72 <_dtoa_r+0x4ca>
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	dd36      	ble.n	8007cf0 <_dtoa_r+0x448>
 8007c82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c86:	2200      	movs	r2, #0
 8007c88:	4b8c      	ldr	r3, [pc, #560]	; (8007ebc <_dtoa_r+0x614>)
 8007c8a:	f7f8 fc25 	bl	80004d8 <__aeabi_dmul>
 8007c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c92:	9e04      	ldr	r6, [sp, #16]
 8007c94:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007c98:	3501      	adds	r5, #1
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f7f8 fbb2 	bl	8000404 <__aeabi_i2d>
 8007ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca4:	f7f8 fc18 	bl	80004d8 <__aeabi_dmul>
 8007ca8:	2200      	movs	r2, #0
 8007caa:	4b85      	ldr	r3, [pc, #532]	; (8007ec0 <_dtoa_r+0x618>)
 8007cac:	f7f8 fa5e 	bl	800016c <__adddf3>
 8007cb0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007cb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007cb8:	950b      	str	r5, [sp, #44]	; 0x2c
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	d15c      	bne.n	8007d78 <_dtoa_r+0x4d0>
 8007cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4b7f      	ldr	r3, [pc, #508]	; (8007ec4 <_dtoa_r+0x61c>)
 8007cc6:	f7f8 fa4f 	bl	8000168 <__aeabi_dsub>
 8007cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ccc:	462b      	mov	r3, r5
 8007cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cd2:	f7f8 fe91 	bl	80009f8 <__aeabi_dcmpgt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f040 8281 	bne.w	80081de <_dtoa_r+0x936>
 8007cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007ce6:	f7f8 fe69 	bl	80009bc <__aeabi_dcmplt>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	f040 8275 	bne.w	80081da <_dtoa_r+0x932>
 8007cf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007cf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f2c0 814b 	blt.w	8007f96 <_dtoa_r+0x6ee>
 8007d00:	f1ba 0f0e 	cmp.w	sl, #14
 8007d04:	f300 8147 	bgt.w	8007f96 <_dtoa_r+0x6ee>
 8007d08:	4b69      	ldr	r3, [pc, #420]	; (8007eb0 <_dtoa_r+0x608>)
 8007d0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f280 80d7 	bge.w	8007ecc <_dtoa_r+0x624>
 8007d1e:	f1b8 0f00 	cmp.w	r8, #0
 8007d22:	f300 80d3 	bgt.w	8007ecc <_dtoa_r+0x624>
 8007d26:	f040 8257 	bne.w	80081d8 <_dtoa_r+0x930>
 8007d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4b64      	ldr	r3, [pc, #400]	; (8007ec4 <_dtoa_r+0x61c>)
 8007d32:	f7f8 fbd1 	bl	80004d8 <__aeabi_dmul>
 8007d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d3a:	f7f8 fe53 	bl	80009e4 <__aeabi_dcmpge>
 8007d3e:	4646      	mov	r6, r8
 8007d40:	4647      	mov	r7, r8
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f040 822d 	bne.w	80081a2 <_dtoa_r+0x8fa>
 8007d48:	9b06      	ldr	r3, [sp, #24]
 8007d4a:	9a06      	ldr	r2, [sp, #24]
 8007d4c:	1c5d      	adds	r5, r3, #1
 8007d4e:	2331      	movs	r3, #49	; 0x31
 8007d50:	f10a 0a01 	add.w	sl, sl, #1
 8007d54:	7013      	strb	r3, [r2, #0]
 8007d56:	e228      	b.n	80081aa <_dtoa_r+0x902>
 8007d58:	07f2      	lsls	r2, r6, #31
 8007d5a:	d505      	bpl.n	8007d68 <_dtoa_r+0x4c0>
 8007d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d60:	f7f8 fbba 	bl	80004d8 <__aeabi_dmul>
 8007d64:	2301      	movs	r3, #1
 8007d66:	3501      	adds	r5, #1
 8007d68:	1076      	asrs	r6, r6, #1
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	e76e      	b.n	8007c4c <_dtoa_r+0x3a4>
 8007d6e:	2502      	movs	r5, #2
 8007d70:	e771      	b.n	8007c56 <_dtoa_r+0x3ae>
 8007d72:	4657      	mov	r7, sl
 8007d74:	4646      	mov	r6, r8
 8007d76:	e790      	b.n	8007c9a <_dtoa_r+0x3f2>
 8007d78:	4b4d      	ldr	r3, [pc, #308]	; (8007eb0 <_dtoa_r+0x608>)
 8007d7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d7e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d048      	beq.n	8007e1a <_dtoa_r+0x572>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	494e      	ldr	r1, [pc, #312]	; (8007ec8 <_dtoa_r+0x620>)
 8007d90:	f7f8 fccc 	bl	800072c <__aeabi_ddiv>
 8007d94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d98:	f7f8 f9e6 	bl	8000168 <__aeabi_dsub>
 8007d9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007da0:	9d06      	ldr	r5, [sp, #24]
 8007da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da6:	f7f8 fe47 	bl	8000a38 <__aeabi_d2iz>
 8007daa:	9011      	str	r0, [sp, #68]	; 0x44
 8007dac:	f7f8 fb2a 	bl	8000404 <__aeabi_i2d>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007db8:	f7f8 f9d6 	bl	8000168 <__aeabi_dsub>
 8007dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc2:	3330      	adds	r3, #48	; 0x30
 8007dc4:	f805 3b01 	strb.w	r3, [r5], #1
 8007dc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007dcc:	f7f8 fdf6 	bl	80009bc <__aeabi_dcmplt>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d163      	bne.n	8007e9c <_dtoa_r+0x5f4>
 8007dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dd8:	2000      	movs	r0, #0
 8007dda:	4937      	ldr	r1, [pc, #220]	; (8007eb8 <_dtoa_r+0x610>)
 8007ddc:	f7f8 f9c4 	bl	8000168 <__aeabi_dsub>
 8007de0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007de4:	f7f8 fdea 	bl	80009bc <__aeabi_dcmplt>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f040 80b5 	bne.w	8007f58 <_dtoa_r+0x6b0>
 8007dee:	9b06      	ldr	r3, [sp, #24]
 8007df0:	1aeb      	subs	r3, r5, r3
 8007df2:	429e      	cmp	r6, r3
 8007df4:	f77f af7c 	ble.w	8007cf0 <_dtoa_r+0x448>
 8007df8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4b2f      	ldr	r3, [pc, #188]	; (8007ebc <_dtoa_r+0x614>)
 8007e00:	f7f8 fb6a 	bl	80004d8 <__aeabi_dmul>
 8007e04:	2200      	movs	r2, #0
 8007e06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e0e:	4b2b      	ldr	r3, [pc, #172]	; (8007ebc <_dtoa_r+0x614>)
 8007e10:	f7f8 fb62 	bl	80004d8 <__aeabi_dmul>
 8007e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e18:	e7c3      	b.n	8007da2 <_dtoa_r+0x4fa>
 8007e1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e1e:	f7f8 fb5b 	bl	80004d8 <__aeabi_dmul>
 8007e22:	9b06      	ldr	r3, [sp, #24]
 8007e24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e28:	199d      	adds	r5, r3, r6
 8007e2a:	461e      	mov	r6, r3
 8007e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e30:	f7f8 fe02 	bl	8000a38 <__aeabi_d2iz>
 8007e34:	9011      	str	r0, [sp, #68]	; 0x44
 8007e36:	f7f8 fae5 	bl	8000404 <__aeabi_i2d>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e42:	f7f8 f991 	bl	8000168 <__aeabi_dsub>
 8007e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e4c:	3330      	adds	r3, #48	; 0x30
 8007e4e:	f806 3b01 	strb.w	r3, [r6], #1
 8007e52:	42ae      	cmp	r6, r5
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	d124      	bne.n	8007ea4 <_dtoa_r+0x5fc>
 8007e5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <_dtoa_r+0x620>)
 8007e60:	f7f8 f984 	bl	800016c <__adddf3>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e6c:	f7f8 fdc4 	bl	80009f8 <__aeabi_dcmpgt>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d171      	bne.n	8007f58 <_dtoa_r+0x6b0>
 8007e74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e78:	2000      	movs	r0, #0
 8007e7a:	4913      	ldr	r1, [pc, #76]	; (8007ec8 <_dtoa_r+0x620>)
 8007e7c:	f7f8 f974 	bl	8000168 <__aeabi_dsub>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e88:	f7f8 fd98 	bl	80009bc <__aeabi_dcmplt>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f43f af2f 	beq.w	8007cf0 <_dtoa_r+0x448>
 8007e92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e96:	1e6a      	subs	r2, r5, #1
 8007e98:	2b30      	cmp	r3, #48	; 0x30
 8007e9a:	d001      	beq.n	8007ea0 <_dtoa_r+0x5f8>
 8007e9c:	46ba      	mov	sl, r7
 8007e9e:	e04a      	b.n	8007f36 <_dtoa_r+0x68e>
 8007ea0:	4615      	mov	r5, r2
 8007ea2:	e7f6      	b.n	8007e92 <_dtoa_r+0x5ea>
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <_dtoa_r+0x614>)
 8007ea6:	f7f8 fb17 	bl	80004d8 <__aeabi_dmul>
 8007eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eae:	e7bd      	b.n	8007e2c <_dtoa_r+0x584>
 8007eb0:	080093e0 	.word	0x080093e0
 8007eb4:	080093b8 	.word	0x080093b8
 8007eb8:	3ff00000 	.word	0x3ff00000
 8007ebc:	40240000 	.word	0x40240000
 8007ec0:	401c0000 	.word	0x401c0000
 8007ec4:	40140000 	.word	0x40140000
 8007ec8:	3fe00000 	.word	0x3fe00000
 8007ecc:	9d06      	ldr	r5, [sp, #24]
 8007ece:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	4639      	mov	r1, r7
 8007eda:	f7f8 fc27 	bl	800072c <__aeabi_ddiv>
 8007ede:	f7f8 fdab 	bl	8000a38 <__aeabi_d2iz>
 8007ee2:	4681      	mov	r9, r0
 8007ee4:	f7f8 fa8e 	bl	8000404 <__aeabi_i2d>
 8007ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eec:	f7f8 faf4 	bl	80004d8 <__aeabi_dmul>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 f936 	bl	8000168 <__aeabi_dsub>
 8007efc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007f00:	f805 6b01 	strb.w	r6, [r5], #1
 8007f04:	9e06      	ldr	r6, [sp, #24]
 8007f06:	4602      	mov	r2, r0
 8007f08:	1bae      	subs	r6, r5, r6
 8007f0a:	45b0      	cmp	r8, r6
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	d135      	bne.n	8007f7c <_dtoa_r+0x6d4>
 8007f10:	f7f8 f92c 	bl	800016c <__adddf3>
 8007f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f18:	4606      	mov	r6, r0
 8007f1a:	460f      	mov	r7, r1
 8007f1c:	f7f8 fd6c 	bl	80009f8 <__aeabi_dcmpgt>
 8007f20:	b9c8      	cbnz	r0, 8007f56 <_dtoa_r+0x6ae>
 8007f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 fd3d 	bl	80009a8 <__aeabi_dcmpeq>
 8007f2e:	b110      	cbz	r0, 8007f36 <_dtoa_r+0x68e>
 8007f30:	f019 0f01 	tst.w	r9, #1
 8007f34:	d10f      	bne.n	8007f56 <_dtoa_r+0x6ae>
 8007f36:	4659      	mov	r1, fp
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 facc 	bl	80084d6 <_Bfree>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f42:	702b      	strb	r3, [r5, #0]
 8007f44:	f10a 0301 	add.w	r3, sl, #1
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f43f acf3 	beq.w	8007938 <_dtoa_r+0x90>
 8007f52:	601d      	str	r5, [r3, #0]
 8007f54:	e4f0      	b.n	8007938 <_dtoa_r+0x90>
 8007f56:	4657      	mov	r7, sl
 8007f58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f5c:	1e6b      	subs	r3, r5, #1
 8007f5e:	2a39      	cmp	r2, #57	; 0x39
 8007f60:	d106      	bne.n	8007f70 <_dtoa_r+0x6c8>
 8007f62:	9a06      	ldr	r2, [sp, #24]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d107      	bne.n	8007f78 <_dtoa_r+0x6d0>
 8007f68:	2330      	movs	r3, #48	; 0x30
 8007f6a:	7013      	strb	r3, [r2, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	3701      	adds	r7, #1
 8007f70:	781a      	ldrb	r2, [r3, #0]
 8007f72:	3201      	adds	r2, #1
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	e791      	b.n	8007e9c <_dtoa_r+0x5f4>
 8007f78:	461d      	mov	r5, r3
 8007f7a:	e7ed      	b.n	8007f58 <_dtoa_r+0x6b0>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4b99      	ldr	r3, [pc, #612]	; (80081e4 <_dtoa_r+0x93c>)
 8007f80:	f7f8 faaa 	bl	80004d8 <__aeabi_dmul>
 8007f84:	2200      	movs	r2, #0
 8007f86:	2300      	movs	r3, #0
 8007f88:	4606      	mov	r6, r0
 8007f8a:	460f      	mov	r7, r1
 8007f8c:	f7f8 fd0c 	bl	80009a8 <__aeabi_dcmpeq>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d09e      	beq.n	8007ed2 <_dtoa_r+0x62a>
 8007f94:	e7cf      	b.n	8007f36 <_dtoa_r+0x68e>
 8007f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f98:	2a00      	cmp	r2, #0
 8007f9a:	f000 8088 	beq.w	80080ae <_dtoa_r+0x806>
 8007f9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007fa0:	2a01      	cmp	r2, #1
 8007fa2:	dc6d      	bgt.n	8008080 <_dtoa_r+0x7d8>
 8007fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fa6:	2a00      	cmp	r2, #0
 8007fa8:	d066      	beq.n	8008078 <_dtoa_r+0x7d0>
 8007faa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fae:	464d      	mov	r5, r9
 8007fb0:	9e08      	ldr	r6, [sp, #32]
 8007fb2:	9a07      	ldr	r2, [sp, #28]
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	441a      	add	r2, r3
 8007fb8:	4620      	mov	r0, r4
 8007fba:	4499      	add	r9, r3
 8007fbc:	9207      	str	r2, [sp, #28]
 8007fbe:	f000 fb2a 	bl	8008616 <__i2b>
 8007fc2:	4607      	mov	r7, r0
 8007fc4:	2d00      	cmp	r5, #0
 8007fc6:	dd0b      	ble.n	8007fe0 <_dtoa_r+0x738>
 8007fc8:	9b07      	ldr	r3, [sp, #28]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dd08      	ble.n	8007fe0 <_dtoa_r+0x738>
 8007fce:	42ab      	cmp	r3, r5
 8007fd0:	bfa8      	it	ge
 8007fd2:	462b      	movge	r3, r5
 8007fd4:	9a07      	ldr	r2, [sp, #28]
 8007fd6:	eba9 0903 	sub.w	r9, r9, r3
 8007fda:	1aed      	subs	r5, r5, r3
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	9307      	str	r3, [sp, #28]
 8007fe0:	9b08      	ldr	r3, [sp, #32]
 8007fe2:	b1eb      	cbz	r3, 8008020 <_dtoa_r+0x778>
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d065      	beq.n	80080b6 <_dtoa_r+0x80e>
 8007fea:	b18e      	cbz	r6, 8008010 <_dtoa_r+0x768>
 8007fec:	4639      	mov	r1, r7
 8007fee:	4632      	mov	r2, r6
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fbaf 	bl	8008754 <__pow5mult>
 8007ff6:	465a      	mov	r2, fp
 8007ff8:	4601      	mov	r1, r0
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 fb13 	bl	8008628 <__multiply>
 8008002:	4659      	mov	r1, fp
 8008004:	900a      	str	r0, [sp, #40]	; 0x28
 8008006:	4620      	mov	r0, r4
 8008008:	f000 fa65 	bl	80084d6 <_Bfree>
 800800c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800800e:	469b      	mov	fp, r3
 8008010:	9b08      	ldr	r3, [sp, #32]
 8008012:	1b9a      	subs	r2, r3, r6
 8008014:	d004      	beq.n	8008020 <_dtoa_r+0x778>
 8008016:	4659      	mov	r1, fp
 8008018:	4620      	mov	r0, r4
 800801a:	f000 fb9b 	bl	8008754 <__pow5mult>
 800801e:	4683      	mov	fp, r0
 8008020:	2101      	movs	r1, #1
 8008022:	4620      	mov	r0, r4
 8008024:	f000 faf7 	bl	8008616 <__i2b>
 8008028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800802a:	4606      	mov	r6, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 81c6 	beq.w	80083be <_dtoa_r+0xb16>
 8008032:	461a      	mov	r2, r3
 8008034:	4601      	mov	r1, r0
 8008036:	4620      	mov	r0, r4
 8008038:	f000 fb8c 	bl	8008754 <__pow5mult>
 800803c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800803e:	4606      	mov	r6, r0
 8008040:	2b01      	cmp	r3, #1
 8008042:	dc3e      	bgt.n	80080c2 <_dtoa_r+0x81a>
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d137      	bne.n	80080ba <_dtoa_r+0x812>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008050:	2b00      	cmp	r3, #0
 8008052:	d134      	bne.n	80080be <_dtoa_r+0x816>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800805a:	0d1b      	lsrs	r3, r3, #20
 800805c:	051b      	lsls	r3, r3, #20
 800805e:	b12b      	cbz	r3, 800806c <_dtoa_r+0x7c4>
 8008060:	9b07      	ldr	r3, [sp, #28]
 8008062:	f109 0901 	add.w	r9, r9, #1
 8008066:	3301      	adds	r3, #1
 8008068:	9307      	str	r3, [sp, #28]
 800806a:	2301      	movs	r3, #1
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008070:	2b00      	cmp	r3, #0
 8008072:	d128      	bne.n	80080c6 <_dtoa_r+0x81e>
 8008074:	2001      	movs	r0, #1
 8008076:	e02e      	b.n	80080d6 <_dtoa_r+0x82e>
 8008078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800807a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800807e:	e796      	b.n	8007fae <_dtoa_r+0x706>
 8008080:	9b08      	ldr	r3, [sp, #32]
 8008082:	f108 36ff 	add.w	r6, r8, #4294967295
 8008086:	42b3      	cmp	r3, r6
 8008088:	bfb7      	itett	lt
 800808a:	9b08      	ldrlt	r3, [sp, #32]
 800808c:	1b9e      	subge	r6, r3, r6
 800808e:	1af2      	sublt	r2, r6, r3
 8008090:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008092:	bfbf      	itttt	lt
 8008094:	9608      	strlt	r6, [sp, #32]
 8008096:	189b      	addlt	r3, r3, r2
 8008098:	930c      	strlt	r3, [sp, #48]	; 0x30
 800809a:	2600      	movlt	r6, #0
 800809c:	f1b8 0f00 	cmp.w	r8, #0
 80080a0:	bfb9      	ittee	lt
 80080a2:	eba9 0508 	sublt.w	r5, r9, r8
 80080a6:	2300      	movlt	r3, #0
 80080a8:	464d      	movge	r5, r9
 80080aa:	4643      	movge	r3, r8
 80080ac:	e781      	b.n	8007fb2 <_dtoa_r+0x70a>
 80080ae:	9e08      	ldr	r6, [sp, #32]
 80080b0:	464d      	mov	r5, r9
 80080b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80080b4:	e786      	b.n	8007fc4 <_dtoa_r+0x71c>
 80080b6:	9a08      	ldr	r2, [sp, #32]
 80080b8:	e7ad      	b.n	8008016 <_dtoa_r+0x76e>
 80080ba:	2300      	movs	r3, #0
 80080bc:	e7d6      	b.n	800806c <_dtoa_r+0x7c4>
 80080be:	9b02      	ldr	r3, [sp, #8]
 80080c0:	e7d4      	b.n	800806c <_dtoa_r+0x7c4>
 80080c2:	2300      	movs	r3, #0
 80080c4:	9308      	str	r3, [sp, #32]
 80080c6:	6933      	ldr	r3, [r6, #16]
 80080c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080cc:	6918      	ldr	r0, [r3, #16]
 80080ce:	f000 fa54 	bl	800857a <__hi0bits>
 80080d2:	f1c0 0020 	rsb	r0, r0, #32
 80080d6:	9b07      	ldr	r3, [sp, #28]
 80080d8:	4418      	add	r0, r3
 80080da:	f010 001f 	ands.w	r0, r0, #31
 80080de:	d047      	beq.n	8008170 <_dtoa_r+0x8c8>
 80080e0:	f1c0 0320 	rsb	r3, r0, #32
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	dd3b      	ble.n	8008160 <_dtoa_r+0x8b8>
 80080e8:	9b07      	ldr	r3, [sp, #28]
 80080ea:	f1c0 001c 	rsb	r0, r0, #28
 80080ee:	4481      	add	r9, r0
 80080f0:	4405      	add	r5, r0
 80080f2:	4403      	add	r3, r0
 80080f4:	9307      	str	r3, [sp, #28]
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	dd05      	ble.n	8008108 <_dtoa_r+0x860>
 80080fc:	4659      	mov	r1, fp
 80080fe:	464a      	mov	r2, r9
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fb75 	bl	80087f0 <__lshift>
 8008106:	4683      	mov	fp, r0
 8008108:	9b07      	ldr	r3, [sp, #28]
 800810a:	2b00      	cmp	r3, #0
 800810c:	dd05      	ble.n	800811a <_dtoa_r+0x872>
 800810e:	4631      	mov	r1, r6
 8008110:	461a      	mov	r2, r3
 8008112:	4620      	mov	r0, r4
 8008114:	f000 fb6c 	bl	80087f0 <__lshift>
 8008118:	4606      	mov	r6, r0
 800811a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800811c:	b353      	cbz	r3, 8008174 <_dtoa_r+0x8cc>
 800811e:	4631      	mov	r1, r6
 8008120:	4658      	mov	r0, fp
 8008122:	f000 fbb9 	bl	8008898 <__mcmp>
 8008126:	2800      	cmp	r0, #0
 8008128:	da24      	bge.n	8008174 <_dtoa_r+0x8cc>
 800812a:	2300      	movs	r3, #0
 800812c:	4659      	mov	r1, fp
 800812e:	220a      	movs	r2, #10
 8008130:	4620      	mov	r0, r4
 8008132:	f000 f9e7 	bl	8008504 <__multadd>
 8008136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008138:	f10a 3aff 	add.w	sl, sl, #4294967295
 800813c:	4683      	mov	fp, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 8144 	beq.w	80083cc <_dtoa_r+0xb24>
 8008144:	2300      	movs	r3, #0
 8008146:	4639      	mov	r1, r7
 8008148:	220a      	movs	r2, #10
 800814a:	4620      	mov	r0, r4
 800814c:	f000 f9da 	bl	8008504 <__multadd>
 8008150:	9b04      	ldr	r3, [sp, #16]
 8008152:	4607      	mov	r7, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	dc4d      	bgt.n	80081f4 <_dtoa_r+0x94c>
 8008158:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800815a:	2b02      	cmp	r3, #2
 800815c:	dd4a      	ble.n	80081f4 <_dtoa_r+0x94c>
 800815e:	e011      	b.n	8008184 <_dtoa_r+0x8dc>
 8008160:	d0c9      	beq.n	80080f6 <_dtoa_r+0x84e>
 8008162:	9a07      	ldr	r2, [sp, #28]
 8008164:	331c      	adds	r3, #28
 8008166:	441a      	add	r2, r3
 8008168:	4499      	add	r9, r3
 800816a:	441d      	add	r5, r3
 800816c:	4613      	mov	r3, r2
 800816e:	e7c1      	b.n	80080f4 <_dtoa_r+0x84c>
 8008170:	4603      	mov	r3, r0
 8008172:	e7f6      	b.n	8008162 <_dtoa_r+0x8ba>
 8008174:	f1b8 0f00 	cmp.w	r8, #0
 8008178:	dc36      	bgt.n	80081e8 <_dtoa_r+0x940>
 800817a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800817c:	2b02      	cmp	r3, #2
 800817e:	dd33      	ble.n	80081e8 <_dtoa_r+0x940>
 8008180:	f8cd 8010 	str.w	r8, [sp, #16]
 8008184:	9b04      	ldr	r3, [sp, #16]
 8008186:	b963      	cbnz	r3, 80081a2 <_dtoa_r+0x8fa>
 8008188:	4631      	mov	r1, r6
 800818a:	2205      	movs	r2, #5
 800818c:	4620      	mov	r0, r4
 800818e:	f000 f9b9 	bl	8008504 <__multadd>
 8008192:	4601      	mov	r1, r0
 8008194:	4606      	mov	r6, r0
 8008196:	4658      	mov	r0, fp
 8008198:	f000 fb7e 	bl	8008898 <__mcmp>
 800819c:	2800      	cmp	r0, #0
 800819e:	f73f add3 	bgt.w	8007d48 <_dtoa_r+0x4a0>
 80081a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80081a4:	9d06      	ldr	r5, [sp, #24]
 80081a6:	ea6f 0a03 	mvn.w	sl, r3
 80081aa:	f04f 0900 	mov.w	r9, #0
 80081ae:	4631      	mov	r1, r6
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 f990 	bl	80084d6 <_Bfree>
 80081b6:	2f00      	cmp	r7, #0
 80081b8:	f43f aebd 	beq.w	8007f36 <_dtoa_r+0x68e>
 80081bc:	f1b9 0f00 	cmp.w	r9, #0
 80081c0:	d005      	beq.n	80081ce <_dtoa_r+0x926>
 80081c2:	45b9      	cmp	r9, r7
 80081c4:	d003      	beq.n	80081ce <_dtoa_r+0x926>
 80081c6:	4649      	mov	r1, r9
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 f984 	bl	80084d6 <_Bfree>
 80081ce:	4639      	mov	r1, r7
 80081d0:	4620      	mov	r0, r4
 80081d2:	f000 f980 	bl	80084d6 <_Bfree>
 80081d6:	e6ae      	b.n	8007f36 <_dtoa_r+0x68e>
 80081d8:	2600      	movs	r6, #0
 80081da:	4637      	mov	r7, r6
 80081dc:	e7e1      	b.n	80081a2 <_dtoa_r+0x8fa>
 80081de:	46ba      	mov	sl, r7
 80081e0:	4637      	mov	r7, r6
 80081e2:	e5b1      	b.n	8007d48 <_dtoa_r+0x4a0>
 80081e4:	40240000 	.word	0x40240000
 80081e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80f3 	beq.w	80083da <_dtoa_r+0xb32>
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	dd05      	ble.n	8008204 <_dtoa_r+0x95c>
 80081f8:	4639      	mov	r1, r7
 80081fa:	462a      	mov	r2, r5
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 faf7 	bl	80087f0 <__lshift>
 8008202:	4607      	mov	r7, r0
 8008204:	9b08      	ldr	r3, [sp, #32]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d04c      	beq.n	80082a4 <_dtoa_r+0x9fc>
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4620      	mov	r0, r4
 800820e:	f000 f92e 	bl	800846e <_Balloc>
 8008212:	4605      	mov	r5, r0
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	f107 010c 	add.w	r1, r7, #12
 800821a:	3202      	adds	r2, #2
 800821c:	0092      	lsls	r2, r2, #2
 800821e:	300c      	adds	r0, #12
 8008220:	f000 f91a 	bl	8008458 <memcpy>
 8008224:	2201      	movs	r2, #1
 8008226:	4629      	mov	r1, r5
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fae1 	bl	80087f0 <__lshift>
 800822e:	46b9      	mov	r9, r7
 8008230:	4607      	mov	r7, r0
 8008232:	9b06      	ldr	r3, [sp, #24]
 8008234:	9307      	str	r3, [sp, #28]
 8008236:	9b02      	ldr	r3, [sp, #8]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	9308      	str	r3, [sp, #32]
 800823e:	4631      	mov	r1, r6
 8008240:	4658      	mov	r0, fp
 8008242:	f7ff faa3 	bl	800778c <quorem>
 8008246:	4649      	mov	r1, r9
 8008248:	4605      	mov	r5, r0
 800824a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800824e:	4658      	mov	r0, fp
 8008250:	f000 fb22 	bl	8008898 <__mcmp>
 8008254:	463a      	mov	r2, r7
 8008256:	9002      	str	r0, [sp, #8]
 8008258:	4631      	mov	r1, r6
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fb36 	bl	80088cc <__mdiff>
 8008260:	68c3      	ldr	r3, [r0, #12]
 8008262:	4602      	mov	r2, r0
 8008264:	bb03      	cbnz	r3, 80082a8 <_dtoa_r+0xa00>
 8008266:	4601      	mov	r1, r0
 8008268:	9009      	str	r0, [sp, #36]	; 0x24
 800826a:	4658      	mov	r0, fp
 800826c:	f000 fb14 	bl	8008898 <__mcmp>
 8008270:	4603      	mov	r3, r0
 8008272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008274:	4611      	mov	r1, r2
 8008276:	4620      	mov	r0, r4
 8008278:	9309      	str	r3, [sp, #36]	; 0x24
 800827a:	f000 f92c 	bl	80084d6 <_Bfree>
 800827e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008280:	b9a3      	cbnz	r3, 80082ac <_dtoa_r+0xa04>
 8008282:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008284:	b992      	cbnz	r2, 80082ac <_dtoa_r+0xa04>
 8008286:	9a08      	ldr	r2, [sp, #32]
 8008288:	b982      	cbnz	r2, 80082ac <_dtoa_r+0xa04>
 800828a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800828e:	d029      	beq.n	80082e4 <_dtoa_r+0xa3c>
 8008290:	9b02      	ldr	r3, [sp, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	dd01      	ble.n	800829a <_dtoa_r+0x9f2>
 8008296:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800829a:	9b07      	ldr	r3, [sp, #28]
 800829c:	1c5d      	adds	r5, r3, #1
 800829e:	f883 8000 	strb.w	r8, [r3]
 80082a2:	e784      	b.n	80081ae <_dtoa_r+0x906>
 80082a4:	4638      	mov	r0, r7
 80082a6:	e7c2      	b.n	800822e <_dtoa_r+0x986>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e7e3      	b.n	8008274 <_dtoa_r+0x9cc>
 80082ac:	9a02      	ldr	r2, [sp, #8]
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	db04      	blt.n	80082bc <_dtoa_r+0xa14>
 80082b2:	d123      	bne.n	80082fc <_dtoa_r+0xa54>
 80082b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80082b6:	bb0a      	cbnz	r2, 80082fc <_dtoa_r+0xa54>
 80082b8:	9a08      	ldr	r2, [sp, #32]
 80082ba:	b9fa      	cbnz	r2, 80082fc <_dtoa_r+0xa54>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	ddec      	ble.n	800829a <_dtoa_r+0x9f2>
 80082c0:	4659      	mov	r1, fp
 80082c2:	2201      	movs	r2, #1
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 fa93 	bl	80087f0 <__lshift>
 80082ca:	4631      	mov	r1, r6
 80082cc:	4683      	mov	fp, r0
 80082ce:	f000 fae3 	bl	8008898 <__mcmp>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	dc03      	bgt.n	80082de <_dtoa_r+0xa36>
 80082d6:	d1e0      	bne.n	800829a <_dtoa_r+0x9f2>
 80082d8:	f018 0f01 	tst.w	r8, #1
 80082dc:	d0dd      	beq.n	800829a <_dtoa_r+0x9f2>
 80082de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80082e2:	d1d8      	bne.n	8008296 <_dtoa_r+0x9ee>
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	9a07      	ldr	r2, [sp, #28]
 80082e8:	1c5d      	adds	r5, r3, #1
 80082ea:	2339      	movs	r3, #57	; 0x39
 80082ec:	7013      	strb	r3, [r2, #0]
 80082ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082f2:	1e6a      	subs	r2, r5, #1
 80082f4:	2b39      	cmp	r3, #57	; 0x39
 80082f6:	d04d      	beq.n	8008394 <_dtoa_r+0xaec>
 80082f8:	3301      	adds	r3, #1
 80082fa:	e052      	b.n	80083a2 <_dtoa_r+0xafa>
 80082fc:	9a07      	ldr	r2, [sp, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f102 0501 	add.w	r5, r2, #1
 8008304:	dd06      	ble.n	8008314 <_dtoa_r+0xa6c>
 8008306:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800830a:	d0eb      	beq.n	80082e4 <_dtoa_r+0xa3c>
 800830c:	f108 0801 	add.w	r8, r8, #1
 8008310:	9b07      	ldr	r3, [sp, #28]
 8008312:	e7c4      	b.n	800829e <_dtoa_r+0x9f6>
 8008314:	9b06      	ldr	r3, [sp, #24]
 8008316:	9a04      	ldr	r2, [sp, #16]
 8008318:	1aeb      	subs	r3, r5, r3
 800831a:	4293      	cmp	r3, r2
 800831c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008320:	d021      	beq.n	8008366 <_dtoa_r+0xabe>
 8008322:	4659      	mov	r1, fp
 8008324:	2300      	movs	r3, #0
 8008326:	220a      	movs	r2, #10
 8008328:	4620      	mov	r0, r4
 800832a:	f000 f8eb 	bl	8008504 <__multadd>
 800832e:	45b9      	cmp	r9, r7
 8008330:	4683      	mov	fp, r0
 8008332:	f04f 0300 	mov.w	r3, #0
 8008336:	f04f 020a 	mov.w	r2, #10
 800833a:	4649      	mov	r1, r9
 800833c:	4620      	mov	r0, r4
 800833e:	d105      	bne.n	800834c <_dtoa_r+0xaa4>
 8008340:	f000 f8e0 	bl	8008504 <__multadd>
 8008344:	4681      	mov	r9, r0
 8008346:	4607      	mov	r7, r0
 8008348:	9507      	str	r5, [sp, #28]
 800834a:	e778      	b.n	800823e <_dtoa_r+0x996>
 800834c:	f000 f8da 	bl	8008504 <__multadd>
 8008350:	4639      	mov	r1, r7
 8008352:	4681      	mov	r9, r0
 8008354:	2300      	movs	r3, #0
 8008356:	220a      	movs	r2, #10
 8008358:	4620      	mov	r0, r4
 800835a:	f000 f8d3 	bl	8008504 <__multadd>
 800835e:	4607      	mov	r7, r0
 8008360:	e7f2      	b.n	8008348 <_dtoa_r+0xaa0>
 8008362:	f04f 0900 	mov.w	r9, #0
 8008366:	4659      	mov	r1, fp
 8008368:	2201      	movs	r2, #1
 800836a:	4620      	mov	r0, r4
 800836c:	f000 fa40 	bl	80087f0 <__lshift>
 8008370:	4631      	mov	r1, r6
 8008372:	4683      	mov	fp, r0
 8008374:	f000 fa90 	bl	8008898 <__mcmp>
 8008378:	2800      	cmp	r0, #0
 800837a:	dcb8      	bgt.n	80082ee <_dtoa_r+0xa46>
 800837c:	d102      	bne.n	8008384 <_dtoa_r+0xadc>
 800837e:	f018 0f01 	tst.w	r8, #1
 8008382:	d1b4      	bne.n	80082ee <_dtoa_r+0xa46>
 8008384:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008388:	1e6a      	subs	r2, r5, #1
 800838a:	2b30      	cmp	r3, #48	; 0x30
 800838c:	f47f af0f 	bne.w	80081ae <_dtoa_r+0x906>
 8008390:	4615      	mov	r5, r2
 8008392:	e7f7      	b.n	8008384 <_dtoa_r+0xadc>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	4293      	cmp	r3, r2
 8008398:	d105      	bne.n	80083a6 <_dtoa_r+0xafe>
 800839a:	2331      	movs	r3, #49	; 0x31
 800839c:	9a06      	ldr	r2, [sp, #24]
 800839e:	f10a 0a01 	add.w	sl, sl, #1
 80083a2:	7013      	strb	r3, [r2, #0]
 80083a4:	e703      	b.n	80081ae <_dtoa_r+0x906>
 80083a6:	4615      	mov	r5, r2
 80083a8:	e7a1      	b.n	80082ee <_dtoa_r+0xa46>
 80083aa:	4b17      	ldr	r3, [pc, #92]	; (8008408 <_dtoa_r+0xb60>)
 80083ac:	f7ff bae1 	b.w	8007972 <_dtoa_r+0xca>
 80083b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f47f aabb 	bne.w	800792e <_dtoa_r+0x86>
 80083b8:	4b14      	ldr	r3, [pc, #80]	; (800840c <_dtoa_r+0xb64>)
 80083ba:	f7ff bada 	b.w	8007972 <_dtoa_r+0xca>
 80083be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	f77f ae3f 	ble.w	8008044 <_dtoa_r+0x79c>
 80083c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c8:	9308      	str	r3, [sp, #32]
 80083ca:	e653      	b.n	8008074 <_dtoa_r+0x7cc>
 80083cc:	9b04      	ldr	r3, [sp, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	dc03      	bgt.n	80083da <_dtoa_r+0xb32>
 80083d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	f73f aed5 	bgt.w	8008184 <_dtoa_r+0x8dc>
 80083da:	9d06      	ldr	r5, [sp, #24]
 80083dc:	4631      	mov	r1, r6
 80083de:	4658      	mov	r0, fp
 80083e0:	f7ff f9d4 	bl	800778c <quorem>
 80083e4:	9b06      	ldr	r3, [sp, #24]
 80083e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80083ea:	f805 8b01 	strb.w	r8, [r5], #1
 80083ee:	9a04      	ldr	r2, [sp, #16]
 80083f0:	1aeb      	subs	r3, r5, r3
 80083f2:	429a      	cmp	r2, r3
 80083f4:	ddb5      	ble.n	8008362 <_dtoa_r+0xaba>
 80083f6:	4659      	mov	r1, fp
 80083f8:	2300      	movs	r3, #0
 80083fa:	220a      	movs	r2, #10
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 f881 	bl	8008504 <__multadd>
 8008402:	4683      	mov	fp, r0
 8008404:	e7ea      	b.n	80083dc <_dtoa_r+0xb34>
 8008406:	bf00      	nop
 8008408:	08009384 	.word	0x08009384
 800840c:	080093a8 	.word	0x080093a8

08008410 <_localeconv_r>:
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <_localeconv_r+0x14>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6a18      	ldr	r0, [r3, #32]
 8008416:	4b04      	ldr	r3, [pc, #16]	; (8008428 <_localeconv_r+0x18>)
 8008418:	2800      	cmp	r0, #0
 800841a:	bf08      	it	eq
 800841c:	4618      	moveq	r0, r3
 800841e:	30f0      	adds	r0, #240	; 0xf0
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	2000000c 	.word	0x2000000c
 8008428:	20000070 	.word	0x20000070

0800842c <malloc>:
 800842c:	4b02      	ldr	r3, [pc, #8]	; (8008438 <malloc+0xc>)
 800842e:	4601      	mov	r1, r0
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	f000 bb53 	b.w	8008adc <_malloc_r>
 8008436:	bf00      	nop
 8008438:	2000000c 	.word	0x2000000c

0800843c <memchr>:
 800843c:	b510      	push	{r4, lr}
 800843e:	b2c9      	uxtb	r1, r1
 8008440:	4402      	add	r2, r0
 8008442:	4290      	cmp	r0, r2
 8008444:	4603      	mov	r3, r0
 8008446:	d101      	bne.n	800844c <memchr+0x10>
 8008448:	2300      	movs	r3, #0
 800844a:	e003      	b.n	8008454 <memchr+0x18>
 800844c:	781c      	ldrb	r4, [r3, #0]
 800844e:	3001      	adds	r0, #1
 8008450:	428c      	cmp	r4, r1
 8008452:	d1f6      	bne.n	8008442 <memchr+0x6>
 8008454:	4618      	mov	r0, r3
 8008456:	bd10      	pop	{r4, pc}

08008458 <memcpy>:
 8008458:	b510      	push	{r4, lr}
 800845a:	1e43      	subs	r3, r0, #1
 800845c:	440a      	add	r2, r1
 800845e:	4291      	cmp	r1, r2
 8008460:	d100      	bne.n	8008464 <memcpy+0xc>
 8008462:	bd10      	pop	{r4, pc}
 8008464:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800846c:	e7f7      	b.n	800845e <memcpy+0x6>

0800846e <_Balloc>:
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008472:	4604      	mov	r4, r0
 8008474:	460e      	mov	r6, r1
 8008476:	b93d      	cbnz	r5, 8008488 <_Balloc+0x1a>
 8008478:	2010      	movs	r0, #16
 800847a:	f7ff ffd7 	bl	800842c <malloc>
 800847e:	6260      	str	r0, [r4, #36]	; 0x24
 8008480:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008484:	6005      	str	r5, [r0, #0]
 8008486:	60c5      	str	r5, [r0, #12]
 8008488:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800848a:	68eb      	ldr	r3, [r5, #12]
 800848c:	b183      	cbz	r3, 80084b0 <_Balloc+0x42>
 800848e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008496:	b9b8      	cbnz	r0, 80084c8 <_Balloc+0x5a>
 8008498:	2101      	movs	r1, #1
 800849a:	fa01 f506 	lsl.w	r5, r1, r6
 800849e:	1d6a      	adds	r2, r5, #5
 80084a0:	0092      	lsls	r2, r2, #2
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 fabf 	bl	8008a26 <_calloc_r>
 80084a8:	b160      	cbz	r0, 80084c4 <_Balloc+0x56>
 80084aa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80084ae:	e00e      	b.n	80084ce <_Balloc+0x60>
 80084b0:	2221      	movs	r2, #33	; 0x21
 80084b2:	2104      	movs	r1, #4
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 fab6 	bl	8008a26 <_calloc_r>
 80084ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084bc:	60e8      	str	r0, [r5, #12]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e4      	bne.n	800848e <_Balloc+0x20>
 80084c4:	2000      	movs	r0, #0
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	6802      	ldr	r2, [r0, #0]
 80084ca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80084ce:	2300      	movs	r3, #0
 80084d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084d4:	e7f7      	b.n	80084c6 <_Balloc+0x58>

080084d6 <_Bfree>:
 80084d6:	b570      	push	{r4, r5, r6, lr}
 80084d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80084da:	4606      	mov	r6, r0
 80084dc:	460d      	mov	r5, r1
 80084de:	b93c      	cbnz	r4, 80084f0 <_Bfree+0x1a>
 80084e0:	2010      	movs	r0, #16
 80084e2:	f7ff ffa3 	bl	800842c <malloc>
 80084e6:	6270      	str	r0, [r6, #36]	; 0x24
 80084e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084ec:	6004      	str	r4, [r0, #0]
 80084ee:	60c4      	str	r4, [r0, #12]
 80084f0:	b13d      	cbz	r5, 8008502 <_Bfree+0x2c>
 80084f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80084f4:	686a      	ldr	r2, [r5, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084fc:	6029      	str	r1, [r5, #0]
 80084fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008502:	bd70      	pop	{r4, r5, r6, pc}

08008504 <__multadd>:
 8008504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008508:	461f      	mov	r7, r3
 800850a:	4606      	mov	r6, r0
 800850c:	460c      	mov	r4, r1
 800850e:	2300      	movs	r3, #0
 8008510:	690d      	ldr	r5, [r1, #16]
 8008512:	f101 0c14 	add.w	ip, r1, #20
 8008516:	f8dc 0000 	ldr.w	r0, [ip]
 800851a:	3301      	adds	r3, #1
 800851c:	b281      	uxth	r1, r0
 800851e:	fb02 7101 	mla	r1, r2, r1, r7
 8008522:	0c00      	lsrs	r0, r0, #16
 8008524:	0c0f      	lsrs	r7, r1, #16
 8008526:	fb02 7000 	mla	r0, r2, r0, r7
 800852a:	b289      	uxth	r1, r1
 800852c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008530:	429d      	cmp	r5, r3
 8008532:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008536:	f84c 1b04 	str.w	r1, [ip], #4
 800853a:	dcec      	bgt.n	8008516 <__multadd+0x12>
 800853c:	b1d7      	cbz	r7, 8008574 <__multadd+0x70>
 800853e:	68a3      	ldr	r3, [r4, #8]
 8008540:	42ab      	cmp	r3, r5
 8008542:	dc12      	bgt.n	800856a <__multadd+0x66>
 8008544:	6861      	ldr	r1, [r4, #4]
 8008546:	4630      	mov	r0, r6
 8008548:	3101      	adds	r1, #1
 800854a:	f7ff ff90 	bl	800846e <_Balloc>
 800854e:	4680      	mov	r8, r0
 8008550:	6922      	ldr	r2, [r4, #16]
 8008552:	f104 010c 	add.w	r1, r4, #12
 8008556:	3202      	adds	r2, #2
 8008558:	0092      	lsls	r2, r2, #2
 800855a:	300c      	adds	r0, #12
 800855c:	f7ff ff7c 	bl	8008458 <memcpy>
 8008560:	4621      	mov	r1, r4
 8008562:	4630      	mov	r0, r6
 8008564:	f7ff ffb7 	bl	80084d6 <_Bfree>
 8008568:	4644      	mov	r4, r8
 800856a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800856e:	3501      	adds	r5, #1
 8008570:	615f      	str	r7, [r3, #20]
 8008572:	6125      	str	r5, [r4, #16]
 8008574:	4620      	mov	r0, r4
 8008576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800857a <__hi0bits>:
 800857a:	0c02      	lsrs	r2, r0, #16
 800857c:	0412      	lsls	r2, r2, #16
 800857e:	4603      	mov	r3, r0
 8008580:	b9b2      	cbnz	r2, 80085b0 <__hi0bits+0x36>
 8008582:	0403      	lsls	r3, r0, #16
 8008584:	2010      	movs	r0, #16
 8008586:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800858a:	bf04      	itt	eq
 800858c:	021b      	lsleq	r3, r3, #8
 800858e:	3008      	addeq	r0, #8
 8008590:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008594:	bf04      	itt	eq
 8008596:	011b      	lsleq	r3, r3, #4
 8008598:	3004      	addeq	r0, #4
 800859a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800859e:	bf04      	itt	eq
 80085a0:	009b      	lsleq	r3, r3, #2
 80085a2:	3002      	addeq	r0, #2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	db06      	blt.n	80085b6 <__hi0bits+0x3c>
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	d503      	bpl.n	80085b4 <__hi0bits+0x3a>
 80085ac:	3001      	adds	r0, #1
 80085ae:	4770      	bx	lr
 80085b0:	2000      	movs	r0, #0
 80085b2:	e7e8      	b.n	8008586 <__hi0bits+0xc>
 80085b4:	2020      	movs	r0, #32
 80085b6:	4770      	bx	lr

080085b8 <__lo0bits>:
 80085b8:	6803      	ldr	r3, [r0, #0]
 80085ba:	4601      	mov	r1, r0
 80085bc:	f013 0207 	ands.w	r2, r3, #7
 80085c0:	d00b      	beq.n	80085da <__lo0bits+0x22>
 80085c2:	07da      	lsls	r2, r3, #31
 80085c4:	d423      	bmi.n	800860e <__lo0bits+0x56>
 80085c6:	0798      	lsls	r0, r3, #30
 80085c8:	bf49      	itett	mi
 80085ca:	085b      	lsrmi	r3, r3, #1
 80085cc:	089b      	lsrpl	r3, r3, #2
 80085ce:	2001      	movmi	r0, #1
 80085d0:	600b      	strmi	r3, [r1, #0]
 80085d2:	bf5c      	itt	pl
 80085d4:	600b      	strpl	r3, [r1, #0]
 80085d6:	2002      	movpl	r0, #2
 80085d8:	4770      	bx	lr
 80085da:	b298      	uxth	r0, r3
 80085dc:	b9a8      	cbnz	r0, 800860a <__lo0bits+0x52>
 80085de:	2010      	movs	r0, #16
 80085e0:	0c1b      	lsrs	r3, r3, #16
 80085e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80085e6:	bf04      	itt	eq
 80085e8:	0a1b      	lsreq	r3, r3, #8
 80085ea:	3008      	addeq	r0, #8
 80085ec:	071a      	lsls	r2, r3, #28
 80085ee:	bf04      	itt	eq
 80085f0:	091b      	lsreq	r3, r3, #4
 80085f2:	3004      	addeq	r0, #4
 80085f4:	079a      	lsls	r2, r3, #30
 80085f6:	bf04      	itt	eq
 80085f8:	089b      	lsreq	r3, r3, #2
 80085fa:	3002      	addeq	r0, #2
 80085fc:	07da      	lsls	r2, r3, #31
 80085fe:	d402      	bmi.n	8008606 <__lo0bits+0x4e>
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	d006      	beq.n	8008612 <__lo0bits+0x5a>
 8008604:	3001      	adds	r0, #1
 8008606:	600b      	str	r3, [r1, #0]
 8008608:	4770      	bx	lr
 800860a:	4610      	mov	r0, r2
 800860c:	e7e9      	b.n	80085e2 <__lo0bits+0x2a>
 800860e:	2000      	movs	r0, #0
 8008610:	4770      	bx	lr
 8008612:	2020      	movs	r0, #32
 8008614:	4770      	bx	lr

08008616 <__i2b>:
 8008616:	b510      	push	{r4, lr}
 8008618:	460c      	mov	r4, r1
 800861a:	2101      	movs	r1, #1
 800861c:	f7ff ff27 	bl	800846e <_Balloc>
 8008620:	2201      	movs	r2, #1
 8008622:	6144      	str	r4, [r0, #20]
 8008624:	6102      	str	r2, [r0, #16]
 8008626:	bd10      	pop	{r4, pc}

08008628 <__multiply>:
 8008628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	4614      	mov	r4, r2
 800862e:	690a      	ldr	r2, [r1, #16]
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	4688      	mov	r8, r1
 8008634:	429a      	cmp	r2, r3
 8008636:	bfbe      	ittt	lt
 8008638:	460b      	movlt	r3, r1
 800863a:	46a0      	movlt	r8, r4
 800863c:	461c      	movlt	r4, r3
 800863e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008642:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800864a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800864e:	eb07 0609 	add.w	r6, r7, r9
 8008652:	42b3      	cmp	r3, r6
 8008654:	bfb8      	it	lt
 8008656:	3101      	addlt	r1, #1
 8008658:	f7ff ff09 	bl	800846e <_Balloc>
 800865c:	f100 0514 	add.w	r5, r0, #20
 8008660:	462b      	mov	r3, r5
 8008662:	2200      	movs	r2, #0
 8008664:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008668:	4573      	cmp	r3, lr
 800866a:	d316      	bcc.n	800869a <__multiply+0x72>
 800866c:	f104 0214 	add.w	r2, r4, #20
 8008670:	f108 0114 	add.w	r1, r8, #20
 8008674:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008678:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	9b00      	ldr	r3, [sp, #0]
 8008680:	9201      	str	r2, [sp, #4]
 8008682:	4293      	cmp	r3, r2
 8008684:	d80c      	bhi.n	80086a0 <__multiply+0x78>
 8008686:	2e00      	cmp	r6, #0
 8008688:	dd03      	ble.n	8008692 <__multiply+0x6a>
 800868a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800868e:	2b00      	cmp	r3, #0
 8008690:	d05d      	beq.n	800874e <__multiply+0x126>
 8008692:	6106      	str	r6, [r0, #16]
 8008694:	b003      	add	sp, #12
 8008696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869a:	f843 2b04 	str.w	r2, [r3], #4
 800869e:	e7e3      	b.n	8008668 <__multiply+0x40>
 80086a0:	f8b2 b000 	ldrh.w	fp, [r2]
 80086a4:	f1bb 0f00 	cmp.w	fp, #0
 80086a8:	d023      	beq.n	80086f2 <__multiply+0xca>
 80086aa:	4689      	mov	r9, r1
 80086ac:	46ac      	mov	ip, r5
 80086ae:	f04f 0800 	mov.w	r8, #0
 80086b2:	f859 4b04 	ldr.w	r4, [r9], #4
 80086b6:	f8dc a000 	ldr.w	sl, [ip]
 80086ba:	b2a3      	uxth	r3, r4
 80086bc:	fa1f fa8a 	uxth.w	sl, sl
 80086c0:	fb0b a303 	mla	r3, fp, r3, sl
 80086c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80086c8:	f8dc 4000 	ldr.w	r4, [ip]
 80086cc:	4443      	add	r3, r8
 80086ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80086d2:	fb0b 840a 	mla	r4, fp, sl, r8
 80086d6:	46e2      	mov	sl, ip
 80086d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80086dc:	b29b      	uxth	r3, r3
 80086de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80086e2:	454f      	cmp	r7, r9
 80086e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80086e8:	f84a 3b04 	str.w	r3, [sl], #4
 80086ec:	d82b      	bhi.n	8008746 <__multiply+0x11e>
 80086ee:	f8cc 8004 	str.w	r8, [ip, #4]
 80086f2:	9b01      	ldr	r3, [sp, #4]
 80086f4:	3204      	adds	r2, #4
 80086f6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80086fa:	f1ba 0f00 	cmp.w	sl, #0
 80086fe:	d020      	beq.n	8008742 <__multiply+0x11a>
 8008700:	4689      	mov	r9, r1
 8008702:	46a8      	mov	r8, r5
 8008704:	f04f 0b00 	mov.w	fp, #0
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	f8b9 c000 	ldrh.w	ip, [r9]
 800870e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008712:	b29b      	uxth	r3, r3
 8008714:	fb0a 440c 	mla	r4, sl, ip, r4
 8008718:	46c4      	mov	ip, r8
 800871a:	445c      	add	r4, fp
 800871c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008720:	f84c 3b04 	str.w	r3, [ip], #4
 8008724:	f859 3b04 	ldr.w	r3, [r9], #4
 8008728:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800872c:	0c1b      	lsrs	r3, r3, #16
 800872e:	fb0a b303 	mla	r3, sl, r3, fp
 8008732:	454f      	cmp	r7, r9
 8008734:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008738:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800873c:	d805      	bhi.n	800874a <__multiply+0x122>
 800873e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008742:	3504      	adds	r5, #4
 8008744:	e79b      	b.n	800867e <__multiply+0x56>
 8008746:	46d4      	mov	ip, sl
 8008748:	e7b3      	b.n	80086b2 <__multiply+0x8a>
 800874a:	46e0      	mov	r8, ip
 800874c:	e7dd      	b.n	800870a <__multiply+0xe2>
 800874e:	3e01      	subs	r6, #1
 8008750:	e799      	b.n	8008686 <__multiply+0x5e>
	...

08008754 <__pow5mult>:
 8008754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008758:	4615      	mov	r5, r2
 800875a:	f012 0203 	ands.w	r2, r2, #3
 800875e:	4606      	mov	r6, r0
 8008760:	460f      	mov	r7, r1
 8008762:	d007      	beq.n	8008774 <__pow5mult+0x20>
 8008764:	4c21      	ldr	r4, [pc, #132]	; (80087ec <__pow5mult+0x98>)
 8008766:	3a01      	subs	r2, #1
 8008768:	2300      	movs	r3, #0
 800876a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800876e:	f7ff fec9 	bl	8008504 <__multadd>
 8008772:	4607      	mov	r7, r0
 8008774:	10ad      	asrs	r5, r5, #2
 8008776:	d035      	beq.n	80087e4 <__pow5mult+0x90>
 8008778:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800877a:	b93c      	cbnz	r4, 800878c <__pow5mult+0x38>
 800877c:	2010      	movs	r0, #16
 800877e:	f7ff fe55 	bl	800842c <malloc>
 8008782:	6270      	str	r0, [r6, #36]	; 0x24
 8008784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008788:	6004      	str	r4, [r0, #0]
 800878a:	60c4      	str	r4, [r0, #12]
 800878c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008794:	b94c      	cbnz	r4, 80087aa <__pow5mult+0x56>
 8008796:	f240 2171 	movw	r1, #625	; 0x271
 800879a:	4630      	mov	r0, r6
 800879c:	f7ff ff3b 	bl	8008616 <__i2b>
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80087a8:	6003      	str	r3, [r0, #0]
 80087aa:	f04f 0800 	mov.w	r8, #0
 80087ae:	07eb      	lsls	r3, r5, #31
 80087b0:	d50a      	bpl.n	80087c8 <__pow5mult+0x74>
 80087b2:	4639      	mov	r1, r7
 80087b4:	4622      	mov	r2, r4
 80087b6:	4630      	mov	r0, r6
 80087b8:	f7ff ff36 	bl	8008628 <__multiply>
 80087bc:	4681      	mov	r9, r0
 80087be:	4639      	mov	r1, r7
 80087c0:	4630      	mov	r0, r6
 80087c2:	f7ff fe88 	bl	80084d6 <_Bfree>
 80087c6:	464f      	mov	r7, r9
 80087c8:	106d      	asrs	r5, r5, #1
 80087ca:	d00b      	beq.n	80087e4 <__pow5mult+0x90>
 80087cc:	6820      	ldr	r0, [r4, #0]
 80087ce:	b938      	cbnz	r0, 80087e0 <__pow5mult+0x8c>
 80087d0:	4622      	mov	r2, r4
 80087d2:	4621      	mov	r1, r4
 80087d4:	4630      	mov	r0, r6
 80087d6:	f7ff ff27 	bl	8008628 <__multiply>
 80087da:	6020      	str	r0, [r4, #0]
 80087dc:	f8c0 8000 	str.w	r8, [r0]
 80087e0:	4604      	mov	r4, r0
 80087e2:	e7e4      	b.n	80087ae <__pow5mult+0x5a>
 80087e4:	4638      	mov	r0, r7
 80087e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ea:	bf00      	nop
 80087ec:	080094a8 	.word	0x080094a8

080087f0 <__lshift>:
 80087f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f4:	460c      	mov	r4, r1
 80087f6:	4607      	mov	r7, r0
 80087f8:	4616      	mov	r6, r2
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008800:	eb0a 0903 	add.w	r9, sl, r3
 8008804:	6849      	ldr	r1, [r1, #4]
 8008806:	68a3      	ldr	r3, [r4, #8]
 8008808:	f109 0501 	add.w	r5, r9, #1
 800880c:	42ab      	cmp	r3, r5
 800880e:	db32      	blt.n	8008876 <__lshift+0x86>
 8008810:	4638      	mov	r0, r7
 8008812:	f7ff fe2c 	bl	800846e <_Balloc>
 8008816:	2300      	movs	r3, #0
 8008818:	4680      	mov	r8, r0
 800881a:	461a      	mov	r2, r3
 800881c:	f100 0114 	add.w	r1, r0, #20
 8008820:	4553      	cmp	r3, sl
 8008822:	db2b      	blt.n	800887c <__lshift+0x8c>
 8008824:	6920      	ldr	r0, [r4, #16]
 8008826:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800882a:	f104 0314 	add.w	r3, r4, #20
 800882e:	f016 021f 	ands.w	r2, r6, #31
 8008832:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008836:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800883a:	d025      	beq.n	8008888 <__lshift+0x98>
 800883c:	2000      	movs	r0, #0
 800883e:	f1c2 0e20 	rsb	lr, r2, #32
 8008842:	468a      	mov	sl, r1
 8008844:	681e      	ldr	r6, [r3, #0]
 8008846:	4096      	lsls	r6, r2
 8008848:	4330      	orrs	r0, r6
 800884a:	f84a 0b04 	str.w	r0, [sl], #4
 800884e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008852:	459c      	cmp	ip, r3
 8008854:	fa20 f00e 	lsr.w	r0, r0, lr
 8008858:	d814      	bhi.n	8008884 <__lshift+0x94>
 800885a:	6048      	str	r0, [r1, #4]
 800885c:	b108      	cbz	r0, 8008862 <__lshift+0x72>
 800885e:	f109 0502 	add.w	r5, r9, #2
 8008862:	3d01      	subs	r5, #1
 8008864:	4638      	mov	r0, r7
 8008866:	f8c8 5010 	str.w	r5, [r8, #16]
 800886a:	4621      	mov	r1, r4
 800886c:	f7ff fe33 	bl	80084d6 <_Bfree>
 8008870:	4640      	mov	r0, r8
 8008872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008876:	3101      	adds	r1, #1
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	e7c7      	b.n	800880c <__lshift+0x1c>
 800887c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008880:	3301      	adds	r3, #1
 8008882:	e7cd      	b.n	8008820 <__lshift+0x30>
 8008884:	4651      	mov	r1, sl
 8008886:	e7dc      	b.n	8008842 <__lshift+0x52>
 8008888:	3904      	subs	r1, #4
 800888a:	f853 2b04 	ldr.w	r2, [r3], #4
 800888e:	459c      	cmp	ip, r3
 8008890:	f841 2f04 	str.w	r2, [r1, #4]!
 8008894:	d8f9      	bhi.n	800888a <__lshift+0x9a>
 8008896:	e7e4      	b.n	8008862 <__lshift+0x72>

08008898 <__mcmp>:
 8008898:	6903      	ldr	r3, [r0, #16]
 800889a:	690a      	ldr	r2, [r1, #16]
 800889c:	b530      	push	{r4, r5, lr}
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	d10c      	bne.n	80088bc <__mcmp+0x24>
 80088a2:	0092      	lsls	r2, r2, #2
 80088a4:	3014      	adds	r0, #20
 80088a6:	3114      	adds	r1, #20
 80088a8:	1884      	adds	r4, r0, r2
 80088aa:	4411      	add	r1, r2
 80088ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088b4:	4295      	cmp	r5, r2
 80088b6:	d003      	beq.n	80088c0 <__mcmp+0x28>
 80088b8:	d305      	bcc.n	80088c6 <__mcmp+0x2e>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4618      	mov	r0, r3
 80088be:	bd30      	pop	{r4, r5, pc}
 80088c0:	42a0      	cmp	r0, r4
 80088c2:	d3f3      	bcc.n	80088ac <__mcmp+0x14>
 80088c4:	e7fa      	b.n	80088bc <__mcmp+0x24>
 80088c6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ca:	e7f7      	b.n	80088bc <__mcmp+0x24>

080088cc <__mdiff>:
 80088cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d0:	460d      	mov	r5, r1
 80088d2:	4607      	mov	r7, r0
 80088d4:	4611      	mov	r1, r2
 80088d6:	4628      	mov	r0, r5
 80088d8:	4614      	mov	r4, r2
 80088da:	f7ff ffdd 	bl	8008898 <__mcmp>
 80088de:	1e06      	subs	r6, r0, #0
 80088e0:	d108      	bne.n	80088f4 <__mdiff+0x28>
 80088e2:	4631      	mov	r1, r6
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7ff fdc2 	bl	800846e <_Balloc>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80088f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f4:	bfa4      	itt	ge
 80088f6:	4623      	movge	r3, r4
 80088f8:	462c      	movge	r4, r5
 80088fa:	4638      	mov	r0, r7
 80088fc:	6861      	ldr	r1, [r4, #4]
 80088fe:	bfa6      	itte	ge
 8008900:	461d      	movge	r5, r3
 8008902:	2600      	movge	r6, #0
 8008904:	2601      	movlt	r6, #1
 8008906:	f7ff fdb2 	bl	800846e <_Balloc>
 800890a:	f04f 0e00 	mov.w	lr, #0
 800890e:	60c6      	str	r6, [r0, #12]
 8008910:	692b      	ldr	r3, [r5, #16]
 8008912:	6926      	ldr	r6, [r4, #16]
 8008914:	f104 0214 	add.w	r2, r4, #20
 8008918:	f105 0914 	add.w	r9, r5, #20
 800891c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008920:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008924:	f100 0114 	add.w	r1, r0, #20
 8008928:	f852 ab04 	ldr.w	sl, [r2], #4
 800892c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008930:	fa1f f38a 	uxth.w	r3, sl
 8008934:	4473      	add	r3, lr
 8008936:	b2ac      	uxth	r4, r5
 8008938:	1b1b      	subs	r3, r3, r4
 800893a:	0c2c      	lsrs	r4, r5, #16
 800893c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008940:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008944:	b29b      	uxth	r3, r3
 8008946:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800894a:	45c8      	cmp	r8, r9
 800894c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008950:	4694      	mov	ip, r2
 8008952:	f841 4b04 	str.w	r4, [r1], #4
 8008956:	d8e7      	bhi.n	8008928 <__mdiff+0x5c>
 8008958:	45bc      	cmp	ip, r7
 800895a:	d304      	bcc.n	8008966 <__mdiff+0x9a>
 800895c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008960:	b183      	cbz	r3, 8008984 <__mdiff+0xb8>
 8008962:	6106      	str	r6, [r0, #16]
 8008964:	e7c4      	b.n	80088f0 <__mdiff+0x24>
 8008966:	f85c 4b04 	ldr.w	r4, [ip], #4
 800896a:	b2a2      	uxth	r2, r4
 800896c:	4472      	add	r2, lr
 800896e:	1413      	asrs	r3, r2, #16
 8008970:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008974:	b292      	uxth	r2, r2
 8008976:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800897a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800897e:	f841 2b04 	str.w	r2, [r1], #4
 8008982:	e7e9      	b.n	8008958 <__mdiff+0x8c>
 8008984:	3e01      	subs	r6, #1
 8008986:	e7e9      	b.n	800895c <__mdiff+0x90>

08008988 <__d2b>:
 8008988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800898c:	461c      	mov	r4, r3
 800898e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008992:	2101      	movs	r1, #1
 8008994:	4690      	mov	r8, r2
 8008996:	f7ff fd6a 	bl	800846e <_Balloc>
 800899a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800899e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80089a2:	4607      	mov	r7, r0
 80089a4:	bb34      	cbnz	r4, 80089f4 <__d2b+0x6c>
 80089a6:	9201      	str	r2, [sp, #4]
 80089a8:	f1b8 0200 	subs.w	r2, r8, #0
 80089ac:	d027      	beq.n	80089fe <__d2b+0x76>
 80089ae:	a802      	add	r0, sp, #8
 80089b0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80089b4:	f7ff fe00 	bl	80085b8 <__lo0bits>
 80089b8:	9900      	ldr	r1, [sp, #0]
 80089ba:	b1f0      	cbz	r0, 80089fa <__d2b+0x72>
 80089bc:	9a01      	ldr	r2, [sp, #4]
 80089be:	f1c0 0320 	rsb	r3, r0, #32
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	430b      	orrs	r3, r1
 80089c8:	40c2      	lsrs	r2, r0
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	9201      	str	r2, [sp, #4]
 80089ce:	9b01      	ldr	r3, [sp, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bf14      	ite	ne
 80089d4:	2102      	movne	r1, #2
 80089d6:	2101      	moveq	r1, #1
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	6139      	str	r1, [r7, #16]
 80089dc:	b1c4      	cbz	r4, 8008a10 <__d2b+0x88>
 80089de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80089e2:	4404      	add	r4, r0
 80089e4:	6034      	str	r4, [r6, #0]
 80089e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089ea:	6028      	str	r0, [r5, #0]
 80089ec:	4638      	mov	r0, r7
 80089ee:	b002      	add	sp, #8
 80089f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80089f8:	e7d5      	b.n	80089a6 <__d2b+0x1e>
 80089fa:	6179      	str	r1, [r7, #20]
 80089fc:	e7e7      	b.n	80089ce <__d2b+0x46>
 80089fe:	a801      	add	r0, sp, #4
 8008a00:	f7ff fdda 	bl	80085b8 <__lo0bits>
 8008a04:	2101      	movs	r1, #1
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	6139      	str	r1, [r7, #16]
 8008a0a:	617b      	str	r3, [r7, #20]
 8008a0c:	3020      	adds	r0, #32
 8008a0e:	e7e5      	b.n	80089dc <__d2b+0x54>
 8008a10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008a18:	6030      	str	r0, [r6, #0]
 8008a1a:	6918      	ldr	r0, [r3, #16]
 8008a1c:	f7ff fdad 	bl	800857a <__hi0bits>
 8008a20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a24:	e7e1      	b.n	80089ea <__d2b+0x62>

08008a26 <_calloc_r>:
 8008a26:	b538      	push	{r3, r4, r5, lr}
 8008a28:	fb02 f401 	mul.w	r4, r2, r1
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	f000 f855 	bl	8008adc <_malloc_r>
 8008a32:	4605      	mov	r5, r0
 8008a34:	b118      	cbz	r0, 8008a3e <_calloc_r+0x18>
 8008a36:	4622      	mov	r2, r4
 8008a38:	2100      	movs	r1, #0
 8008a3a:	f7fe fa15 	bl	8006e68 <memset>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	bd38      	pop	{r3, r4, r5, pc}
	...

08008a44 <_free_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4605      	mov	r5, r0
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	d043      	beq.n	8008ad4 <_free_r+0x90>
 8008a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a50:	1f0c      	subs	r4, r1, #4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bfb8      	it	lt
 8008a56:	18e4      	addlt	r4, r4, r3
 8008a58:	f000 fa27 	bl	8008eaa <__malloc_lock>
 8008a5c:	4a1e      	ldr	r2, [pc, #120]	; (8008ad8 <_free_r+0x94>)
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	4610      	mov	r0, r2
 8008a62:	b933      	cbnz	r3, 8008a72 <_free_r+0x2e>
 8008a64:	6063      	str	r3, [r4, #4]
 8008a66:	6014      	str	r4, [r2, #0]
 8008a68:	4628      	mov	r0, r5
 8008a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a6e:	f000 ba1d 	b.w	8008eac <__malloc_unlock>
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	d90b      	bls.n	8008a8e <_free_r+0x4a>
 8008a76:	6821      	ldr	r1, [r4, #0]
 8008a78:	1862      	adds	r2, r4, r1
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	bf01      	itttt	eq
 8008a7e:	681a      	ldreq	r2, [r3, #0]
 8008a80:	685b      	ldreq	r3, [r3, #4]
 8008a82:	1852      	addeq	r2, r2, r1
 8008a84:	6022      	streq	r2, [r4, #0]
 8008a86:	6063      	str	r3, [r4, #4]
 8008a88:	6004      	str	r4, [r0, #0]
 8008a8a:	e7ed      	b.n	8008a68 <_free_r+0x24>
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	b10a      	cbz	r2, 8008a96 <_free_r+0x52>
 8008a92:	42a2      	cmp	r2, r4
 8008a94:	d9fa      	bls.n	8008a8c <_free_r+0x48>
 8008a96:	6819      	ldr	r1, [r3, #0]
 8008a98:	1858      	adds	r0, r3, r1
 8008a9a:	42a0      	cmp	r0, r4
 8008a9c:	d10b      	bne.n	8008ab6 <_free_r+0x72>
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	4401      	add	r1, r0
 8008aa2:	1858      	adds	r0, r3, r1
 8008aa4:	4282      	cmp	r2, r0
 8008aa6:	6019      	str	r1, [r3, #0]
 8008aa8:	d1de      	bne.n	8008a68 <_free_r+0x24>
 8008aaa:	6810      	ldr	r0, [r2, #0]
 8008aac:	6852      	ldr	r2, [r2, #4]
 8008aae:	4401      	add	r1, r0
 8008ab0:	6019      	str	r1, [r3, #0]
 8008ab2:	605a      	str	r2, [r3, #4]
 8008ab4:	e7d8      	b.n	8008a68 <_free_r+0x24>
 8008ab6:	d902      	bls.n	8008abe <_free_r+0x7a>
 8008ab8:	230c      	movs	r3, #12
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	e7d4      	b.n	8008a68 <_free_r+0x24>
 8008abe:	6820      	ldr	r0, [r4, #0]
 8008ac0:	1821      	adds	r1, r4, r0
 8008ac2:	428a      	cmp	r2, r1
 8008ac4:	bf01      	itttt	eq
 8008ac6:	6811      	ldreq	r1, [r2, #0]
 8008ac8:	6852      	ldreq	r2, [r2, #4]
 8008aca:	1809      	addeq	r1, r1, r0
 8008acc:	6021      	streq	r1, [r4, #0]
 8008ace:	6062      	str	r2, [r4, #4]
 8008ad0:	605c      	str	r4, [r3, #4]
 8008ad2:	e7c9      	b.n	8008a68 <_free_r+0x24>
 8008ad4:	bd38      	pop	{r3, r4, r5, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000210 	.word	0x20000210

08008adc <_malloc_r>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	1ccd      	adds	r5, r1, #3
 8008ae0:	f025 0503 	bic.w	r5, r5, #3
 8008ae4:	3508      	adds	r5, #8
 8008ae6:	2d0c      	cmp	r5, #12
 8008ae8:	bf38      	it	cc
 8008aea:	250c      	movcc	r5, #12
 8008aec:	2d00      	cmp	r5, #0
 8008aee:	4606      	mov	r6, r0
 8008af0:	db01      	blt.n	8008af6 <_malloc_r+0x1a>
 8008af2:	42a9      	cmp	r1, r5
 8008af4:	d903      	bls.n	8008afe <_malloc_r+0x22>
 8008af6:	230c      	movs	r3, #12
 8008af8:	6033      	str	r3, [r6, #0]
 8008afa:	2000      	movs	r0, #0
 8008afc:	bd70      	pop	{r4, r5, r6, pc}
 8008afe:	f000 f9d4 	bl	8008eaa <__malloc_lock>
 8008b02:	4a21      	ldr	r2, [pc, #132]	; (8008b88 <_malloc_r+0xac>)
 8008b04:	6814      	ldr	r4, [r2, #0]
 8008b06:	4621      	mov	r1, r4
 8008b08:	b991      	cbnz	r1, 8008b30 <_malloc_r+0x54>
 8008b0a:	4c20      	ldr	r4, [pc, #128]	; (8008b8c <_malloc_r+0xb0>)
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	b91b      	cbnz	r3, 8008b18 <_malloc_r+0x3c>
 8008b10:	4630      	mov	r0, r6
 8008b12:	f000 f98f 	bl	8008e34 <_sbrk_r>
 8008b16:	6020      	str	r0, [r4, #0]
 8008b18:	4629      	mov	r1, r5
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f000 f98a 	bl	8008e34 <_sbrk_r>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d124      	bne.n	8008b6e <_malloc_r+0x92>
 8008b24:	230c      	movs	r3, #12
 8008b26:	4630      	mov	r0, r6
 8008b28:	6033      	str	r3, [r6, #0]
 8008b2a:	f000 f9bf 	bl	8008eac <__malloc_unlock>
 8008b2e:	e7e4      	b.n	8008afa <_malloc_r+0x1e>
 8008b30:	680b      	ldr	r3, [r1, #0]
 8008b32:	1b5b      	subs	r3, r3, r5
 8008b34:	d418      	bmi.n	8008b68 <_malloc_r+0x8c>
 8008b36:	2b0b      	cmp	r3, #11
 8008b38:	d90f      	bls.n	8008b5a <_malloc_r+0x7e>
 8008b3a:	600b      	str	r3, [r1, #0]
 8008b3c:	18cc      	adds	r4, r1, r3
 8008b3e:	50cd      	str	r5, [r1, r3]
 8008b40:	4630      	mov	r0, r6
 8008b42:	f000 f9b3 	bl	8008eac <__malloc_unlock>
 8008b46:	f104 000b 	add.w	r0, r4, #11
 8008b4a:	1d23      	adds	r3, r4, #4
 8008b4c:	f020 0007 	bic.w	r0, r0, #7
 8008b50:	1ac3      	subs	r3, r0, r3
 8008b52:	d0d3      	beq.n	8008afc <_malloc_r+0x20>
 8008b54:	425a      	negs	r2, r3
 8008b56:	50e2      	str	r2, [r4, r3]
 8008b58:	e7d0      	b.n	8008afc <_malloc_r+0x20>
 8008b5a:	684b      	ldr	r3, [r1, #4]
 8008b5c:	428c      	cmp	r4, r1
 8008b5e:	bf16      	itet	ne
 8008b60:	6063      	strne	r3, [r4, #4]
 8008b62:	6013      	streq	r3, [r2, #0]
 8008b64:	460c      	movne	r4, r1
 8008b66:	e7eb      	b.n	8008b40 <_malloc_r+0x64>
 8008b68:	460c      	mov	r4, r1
 8008b6a:	6849      	ldr	r1, [r1, #4]
 8008b6c:	e7cc      	b.n	8008b08 <_malloc_r+0x2c>
 8008b6e:	1cc4      	adds	r4, r0, #3
 8008b70:	f024 0403 	bic.w	r4, r4, #3
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d005      	beq.n	8008b84 <_malloc_r+0xa8>
 8008b78:	1a21      	subs	r1, r4, r0
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f000 f95a 	bl	8008e34 <_sbrk_r>
 8008b80:	3001      	adds	r0, #1
 8008b82:	d0cf      	beq.n	8008b24 <_malloc_r+0x48>
 8008b84:	6025      	str	r5, [r4, #0]
 8008b86:	e7db      	b.n	8008b40 <_malloc_r+0x64>
 8008b88:	20000210 	.word	0x20000210
 8008b8c:	20000214 	.word	0x20000214

08008b90 <__ssputs_r>:
 8008b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b94:	688e      	ldr	r6, [r1, #8]
 8008b96:	4682      	mov	sl, r0
 8008b98:	429e      	cmp	r6, r3
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	4690      	mov	r8, r2
 8008b9e:	4699      	mov	r9, r3
 8008ba0:	d837      	bhi.n	8008c12 <__ssputs_r+0x82>
 8008ba2:	898a      	ldrh	r2, [r1, #12]
 8008ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ba8:	d031      	beq.n	8008c0e <__ssputs_r+0x7e>
 8008baa:	2302      	movs	r3, #2
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	6909      	ldr	r1, [r1, #16]
 8008bb0:	1a6f      	subs	r7, r5, r1
 8008bb2:	6965      	ldr	r5, [r4, #20]
 8008bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008bbc:	f109 0301 	add.w	r3, r9, #1
 8008bc0:	443b      	add	r3, r7
 8008bc2:	429d      	cmp	r5, r3
 8008bc4:	bf38      	it	cc
 8008bc6:	461d      	movcc	r5, r3
 8008bc8:	0553      	lsls	r3, r2, #21
 8008bca:	d530      	bpl.n	8008c2e <__ssputs_r+0x9e>
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7ff ff85 	bl	8008adc <_malloc_r>
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	b950      	cbnz	r0, 8008bec <__ssputs_r+0x5c>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	f8ca 3000 	str.w	r3, [sl]
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bec:	463a      	mov	r2, r7
 8008bee:	6921      	ldr	r1, [r4, #16]
 8008bf0:	f7ff fc32 	bl	8008458 <memcpy>
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	6126      	str	r6, [r4, #16]
 8008c02:	443e      	add	r6, r7
 8008c04:	6026      	str	r6, [r4, #0]
 8008c06:	464e      	mov	r6, r9
 8008c08:	6165      	str	r5, [r4, #20]
 8008c0a:	1bed      	subs	r5, r5, r7
 8008c0c:	60a5      	str	r5, [r4, #8]
 8008c0e:	454e      	cmp	r6, r9
 8008c10:	d900      	bls.n	8008c14 <__ssputs_r+0x84>
 8008c12:	464e      	mov	r6, r9
 8008c14:	4632      	mov	r2, r6
 8008c16:	4641      	mov	r1, r8
 8008c18:	6820      	ldr	r0, [r4, #0]
 8008c1a:	f000 f92d 	bl	8008e78 <memmove>
 8008c1e:	68a3      	ldr	r3, [r4, #8]
 8008c20:	2000      	movs	r0, #0
 8008c22:	1b9b      	subs	r3, r3, r6
 8008c24:	60a3      	str	r3, [r4, #8]
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	441e      	add	r6, r3
 8008c2a:	6026      	str	r6, [r4, #0]
 8008c2c:	e7dc      	b.n	8008be8 <__ssputs_r+0x58>
 8008c2e:	462a      	mov	r2, r5
 8008c30:	f000 f93d 	bl	8008eae <_realloc_r>
 8008c34:	4606      	mov	r6, r0
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d1e2      	bne.n	8008c00 <__ssputs_r+0x70>
 8008c3a:	6921      	ldr	r1, [r4, #16]
 8008c3c:	4650      	mov	r0, sl
 8008c3e:	f7ff ff01 	bl	8008a44 <_free_r>
 8008c42:	e7c8      	b.n	8008bd6 <__ssputs_r+0x46>

08008c44 <_svfiprintf_r>:
 8008c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c48:	461d      	mov	r5, r3
 8008c4a:	898b      	ldrh	r3, [r1, #12]
 8008c4c:	b09d      	sub	sp, #116	; 0x74
 8008c4e:	061f      	lsls	r7, r3, #24
 8008c50:	4680      	mov	r8, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	4616      	mov	r6, r2
 8008c56:	d50f      	bpl.n	8008c78 <_svfiprintf_r+0x34>
 8008c58:	690b      	ldr	r3, [r1, #16]
 8008c5a:	b96b      	cbnz	r3, 8008c78 <_svfiprintf_r+0x34>
 8008c5c:	2140      	movs	r1, #64	; 0x40
 8008c5e:	f7ff ff3d 	bl	8008adc <_malloc_r>
 8008c62:	6020      	str	r0, [r4, #0]
 8008c64:	6120      	str	r0, [r4, #16]
 8008c66:	b928      	cbnz	r0, 8008c74 <_svfiprintf_r+0x30>
 8008c68:	230c      	movs	r3, #12
 8008c6a:	f8c8 3000 	str.w	r3, [r8]
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c72:	e0c8      	b.n	8008e06 <_svfiprintf_r+0x1c2>
 8008c74:	2340      	movs	r3, #64	; 0x40
 8008c76:	6163      	str	r3, [r4, #20]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7c:	2320      	movs	r3, #32
 8008c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c82:	2330      	movs	r3, #48	; 0x30
 8008c84:	f04f 0b01 	mov.w	fp, #1
 8008c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c8c:	9503      	str	r5, [sp, #12]
 8008c8e:	4637      	mov	r7, r6
 8008c90:	463d      	mov	r5, r7
 8008c92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c96:	b10b      	cbz	r3, 8008c9c <_svfiprintf_r+0x58>
 8008c98:	2b25      	cmp	r3, #37	; 0x25
 8008c9a:	d13e      	bne.n	8008d1a <_svfiprintf_r+0xd6>
 8008c9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ca0:	d00b      	beq.n	8008cba <_svfiprintf_r+0x76>
 8008ca2:	4653      	mov	r3, sl
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4640      	mov	r0, r8
 8008caa:	f7ff ff71 	bl	8008b90 <__ssputs_r>
 8008cae:	3001      	adds	r0, #1
 8008cb0:	f000 80a4 	beq.w	8008dfc <_svfiprintf_r+0x1b8>
 8008cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb6:	4453      	add	r3, sl
 8008cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cba:	783b      	ldrb	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 809d 	beq.w	8008dfc <_svfiprintf_r+0x1b8>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	9307      	str	r3, [sp, #28]
 8008cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8008cd6:	462f      	mov	r7, r5
 8008cd8:	2205      	movs	r2, #5
 8008cda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008cde:	4850      	ldr	r0, [pc, #320]	; (8008e20 <_svfiprintf_r+0x1dc>)
 8008ce0:	f7ff fbac 	bl	800843c <memchr>
 8008ce4:	9b04      	ldr	r3, [sp, #16]
 8008ce6:	b9d0      	cbnz	r0, 8008d1e <_svfiprintf_r+0xda>
 8008ce8:	06d9      	lsls	r1, r3, #27
 8008cea:	bf44      	itt	mi
 8008cec:	2220      	movmi	r2, #32
 8008cee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008cf2:	071a      	lsls	r2, r3, #28
 8008cf4:	bf44      	itt	mi
 8008cf6:	222b      	movmi	r2, #43	; 0x2b
 8008cf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008cfc:	782a      	ldrb	r2, [r5, #0]
 8008cfe:	2a2a      	cmp	r2, #42	; 0x2a
 8008d00:	d015      	beq.n	8008d2e <_svfiprintf_r+0xea>
 8008d02:	462f      	mov	r7, r5
 8008d04:	2000      	movs	r0, #0
 8008d06:	250a      	movs	r5, #10
 8008d08:	9a07      	ldr	r2, [sp, #28]
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d10:	3b30      	subs	r3, #48	; 0x30
 8008d12:	2b09      	cmp	r3, #9
 8008d14:	d94d      	bls.n	8008db2 <_svfiprintf_r+0x16e>
 8008d16:	b1b8      	cbz	r0, 8008d48 <_svfiprintf_r+0x104>
 8008d18:	e00f      	b.n	8008d3a <_svfiprintf_r+0xf6>
 8008d1a:	462f      	mov	r7, r5
 8008d1c:	e7b8      	b.n	8008c90 <_svfiprintf_r+0x4c>
 8008d1e:	4a40      	ldr	r2, [pc, #256]	; (8008e20 <_svfiprintf_r+0x1dc>)
 8008d20:	463d      	mov	r5, r7
 8008d22:	1a80      	subs	r0, r0, r2
 8008d24:	fa0b f000 	lsl.w	r0, fp, r0
 8008d28:	4318      	orrs	r0, r3
 8008d2a:	9004      	str	r0, [sp, #16]
 8008d2c:	e7d3      	b.n	8008cd6 <_svfiprintf_r+0x92>
 8008d2e:	9a03      	ldr	r2, [sp, #12]
 8008d30:	1d11      	adds	r1, r2, #4
 8008d32:	6812      	ldr	r2, [r2, #0]
 8008d34:	9103      	str	r1, [sp, #12]
 8008d36:	2a00      	cmp	r2, #0
 8008d38:	db01      	blt.n	8008d3e <_svfiprintf_r+0xfa>
 8008d3a:	9207      	str	r2, [sp, #28]
 8008d3c:	e004      	b.n	8008d48 <_svfiprintf_r+0x104>
 8008d3e:	4252      	negs	r2, r2
 8008d40:	f043 0302 	orr.w	r3, r3, #2
 8008d44:	9207      	str	r2, [sp, #28]
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	783b      	ldrb	r3, [r7, #0]
 8008d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d4c:	d10c      	bne.n	8008d68 <_svfiprintf_r+0x124>
 8008d4e:	787b      	ldrb	r3, [r7, #1]
 8008d50:	2b2a      	cmp	r3, #42	; 0x2a
 8008d52:	d133      	bne.n	8008dbc <_svfiprintf_r+0x178>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	3702      	adds	r7, #2
 8008d58:	1d1a      	adds	r2, r3, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	9203      	str	r2, [sp, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bfb8      	it	lt
 8008d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d66:	9305      	str	r3, [sp, #20]
 8008d68:	4d2e      	ldr	r5, [pc, #184]	; (8008e24 <_svfiprintf_r+0x1e0>)
 8008d6a:	2203      	movs	r2, #3
 8008d6c:	7839      	ldrb	r1, [r7, #0]
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f7ff fb64 	bl	800843c <memchr>
 8008d74:	b138      	cbz	r0, 8008d86 <_svfiprintf_r+0x142>
 8008d76:	2340      	movs	r3, #64	; 0x40
 8008d78:	1b40      	subs	r0, r0, r5
 8008d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8008d7e:	9b04      	ldr	r3, [sp, #16]
 8008d80:	3701      	adds	r7, #1
 8008d82:	4303      	orrs	r3, r0
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	7839      	ldrb	r1, [r7, #0]
 8008d88:	2206      	movs	r2, #6
 8008d8a:	4827      	ldr	r0, [pc, #156]	; (8008e28 <_svfiprintf_r+0x1e4>)
 8008d8c:	1c7e      	adds	r6, r7, #1
 8008d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d92:	f7ff fb53 	bl	800843c <memchr>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d038      	beq.n	8008e0c <_svfiprintf_r+0x1c8>
 8008d9a:	4b24      	ldr	r3, [pc, #144]	; (8008e2c <_svfiprintf_r+0x1e8>)
 8008d9c:	bb13      	cbnz	r3, 8008de4 <_svfiprintf_r+0x1a0>
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	3307      	adds	r3, #7
 8008da2:	f023 0307 	bic.w	r3, r3, #7
 8008da6:	3308      	adds	r3, #8
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	444b      	add	r3, r9
 8008dae:	9309      	str	r3, [sp, #36]	; 0x24
 8008db0:	e76d      	b.n	8008c8e <_svfiprintf_r+0x4a>
 8008db2:	fb05 3202 	mla	r2, r5, r2, r3
 8008db6:	2001      	movs	r0, #1
 8008db8:	460f      	mov	r7, r1
 8008dba:	e7a6      	b.n	8008d0a <_svfiprintf_r+0xc6>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	250a      	movs	r5, #10
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	3701      	adds	r7, #1
 8008dc4:	9305      	str	r3, [sp, #20]
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dcc:	3a30      	subs	r2, #48	; 0x30
 8008dce:	2a09      	cmp	r2, #9
 8008dd0:	d903      	bls.n	8008dda <_svfiprintf_r+0x196>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0c8      	beq.n	8008d68 <_svfiprintf_r+0x124>
 8008dd6:	9105      	str	r1, [sp, #20]
 8008dd8:	e7c6      	b.n	8008d68 <_svfiprintf_r+0x124>
 8008dda:	fb05 2101 	mla	r1, r5, r1, r2
 8008dde:	2301      	movs	r3, #1
 8008de0:	4607      	mov	r7, r0
 8008de2:	e7f0      	b.n	8008dc6 <_svfiprintf_r+0x182>
 8008de4:	ab03      	add	r3, sp, #12
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	4622      	mov	r2, r4
 8008dea:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <_svfiprintf_r+0x1ec>)
 8008dec:	a904      	add	r1, sp, #16
 8008dee:	4640      	mov	r0, r8
 8008df0:	f7fe f8d4 	bl	8006f9c <_printf_float>
 8008df4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008df8:	4681      	mov	r9, r0
 8008dfa:	d1d6      	bne.n	8008daa <_svfiprintf_r+0x166>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	065b      	lsls	r3, r3, #25
 8008e00:	f53f af35 	bmi.w	8008c6e <_svfiprintf_r+0x2a>
 8008e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e06:	b01d      	add	sp, #116	; 0x74
 8008e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0c:	ab03      	add	r3, sp, #12
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	4622      	mov	r2, r4
 8008e12:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <_svfiprintf_r+0x1ec>)
 8008e14:	a904      	add	r1, sp, #16
 8008e16:	4640      	mov	r0, r8
 8008e18:	f7fe fb6c 	bl	80074f4 <_printf_i>
 8008e1c:	e7ea      	b.n	8008df4 <_svfiprintf_r+0x1b0>
 8008e1e:	bf00      	nop
 8008e20:	080094b4 	.word	0x080094b4
 8008e24:	080094ba 	.word	0x080094ba
 8008e28:	080094be 	.word	0x080094be
 8008e2c:	08006f9d 	.word	0x08006f9d
 8008e30:	08008b91 	.word	0x08008b91

08008e34 <_sbrk_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	2300      	movs	r3, #0
 8008e38:	4c05      	ldr	r4, [pc, #20]	; (8008e50 <_sbrk_r+0x1c>)
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	6023      	str	r3, [r4, #0]
 8008e40:	f7f9 fff0 	bl	8002e24 <_sbrk>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d102      	bne.n	8008e4e <_sbrk_r+0x1a>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	b103      	cbz	r3, 8008e4e <_sbrk_r+0x1a>
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	bd38      	pop	{r3, r4, r5, pc}
 8008e50:	200004d4 	.word	0x200004d4

08008e54 <__ascii_mbtowc>:
 8008e54:	b082      	sub	sp, #8
 8008e56:	b901      	cbnz	r1, 8008e5a <__ascii_mbtowc+0x6>
 8008e58:	a901      	add	r1, sp, #4
 8008e5a:	b142      	cbz	r2, 8008e6e <__ascii_mbtowc+0x1a>
 8008e5c:	b14b      	cbz	r3, 8008e72 <__ascii_mbtowc+0x1e>
 8008e5e:	7813      	ldrb	r3, [r2, #0]
 8008e60:	600b      	str	r3, [r1, #0]
 8008e62:	7812      	ldrb	r2, [r2, #0]
 8008e64:	1c10      	adds	r0, r2, #0
 8008e66:	bf18      	it	ne
 8008e68:	2001      	movne	r0, #1
 8008e6a:	b002      	add	sp, #8
 8008e6c:	4770      	bx	lr
 8008e6e:	4610      	mov	r0, r2
 8008e70:	e7fb      	b.n	8008e6a <__ascii_mbtowc+0x16>
 8008e72:	f06f 0001 	mvn.w	r0, #1
 8008e76:	e7f8      	b.n	8008e6a <__ascii_mbtowc+0x16>

08008e78 <memmove>:
 8008e78:	4288      	cmp	r0, r1
 8008e7a:	b510      	push	{r4, lr}
 8008e7c:	eb01 0302 	add.w	r3, r1, r2
 8008e80:	d807      	bhi.n	8008e92 <memmove+0x1a>
 8008e82:	1e42      	subs	r2, r0, #1
 8008e84:	4299      	cmp	r1, r3
 8008e86:	d00a      	beq.n	8008e9e <memmove+0x26>
 8008e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008e90:	e7f8      	b.n	8008e84 <memmove+0xc>
 8008e92:	4283      	cmp	r3, r0
 8008e94:	d9f5      	bls.n	8008e82 <memmove+0xa>
 8008e96:	1881      	adds	r1, r0, r2
 8008e98:	1ad2      	subs	r2, r2, r3
 8008e9a:	42d3      	cmn	r3, r2
 8008e9c:	d100      	bne.n	8008ea0 <memmove+0x28>
 8008e9e:	bd10      	pop	{r4, pc}
 8008ea0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ea4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ea8:	e7f7      	b.n	8008e9a <memmove+0x22>

08008eaa <__malloc_lock>:
 8008eaa:	4770      	bx	lr

08008eac <__malloc_unlock>:
 8008eac:	4770      	bx	lr

08008eae <_realloc_r>:
 8008eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	4614      	mov	r4, r2
 8008eb4:	460e      	mov	r6, r1
 8008eb6:	b921      	cbnz	r1, 8008ec2 <_realloc_r+0x14>
 8008eb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	f7ff be0d 	b.w	8008adc <_malloc_r>
 8008ec2:	b922      	cbnz	r2, 8008ece <_realloc_r+0x20>
 8008ec4:	f7ff fdbe 	bl	8008a44 <_free_r>
 8008ec8:	4625      	mov	r5, r4
 8008eca:	4628      	mov	r0, r5
 8008ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ece:	f000 f821 	bl	8008f14 <_malloc_usable_size_r>
 8008ed2:	42a0      	cmp	r0, r4
 8008ed4:	d20f      	bcs.n	8008ef6 <_realloc_r+0x48>
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7ff fdff 	bl	8008adc <_malloc_r>
 8008ede:	4605      	mov	r5, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d0f2      	beq.n	8008eca <_realloc_r+0x1c>
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4622      	mov	r2, r4
 8008ee8:	f7ff fab6 	bl	8008458 <memcpy>
 8008eec:	4631      	mov	r1, r6
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f7ff fda8 	bl	8008a44 <_free_r>
 8008ef4:	e7e9      	b.n	8008eca <_realloc_r+0x1c>
 8008ef6:	4635      	mov	r5, r6
 8008ef8:	e7e7      	b.n	8008eca <_realloc_r+0x1c>

08008efa <__ascii_wctomb>:
 8008efa:	b149      	cbz	r1, 8008f10 <__ascii_wctomb+0x16>
 8008efc:	2aff      	cmp	r2, #255	; 0xff
 8008efe:	bf8b      	itete	hi
 8008f00:	238a      	movhi	r3, #138	; 0x8a
 8008f02:	700a      	strbls	r2, [r1, #0]
 8008f04:	6003      	strhi	r3, [r0, #0]
 8008f06:	2001      	movls	r0, #1
 8008f08:	bf88      	it	hi
 8008f0a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f0e:	4770      	bx	lr
 8008f10:	4608      	mov	r0, r1
 8008f12:	4770      	bx	lr

08008f14 <_malloc_usable_size_r>:
 8008f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f18:	1f18      	subs	r0, r3, #4
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	bfbc      	itt	lt
 8008f1e:	580b      	ldrlt	r3, [r1, r0]
 8008f20:	18c0      	addlt	r0, r0, r3
 8008f22:	4770      	bx	lr

08008f24 <roundf>:
 8008f24:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008f28:	3b7f      	subs	r3, #127	; 0x7f
 8008f2a:	2b16      	cmp	r3, #22
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	4601      	mov	r1, r0
 8008f30:	dc14      	bgt.n	8008f5c <roundf+0x38>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da07      	bge.n	8008f46 <roundf+0x22>
 8008f36:	3301      	adds	r3, #1
 8008f38:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8008f3c:	d101      	bne.n	8008f42 <roundf+0x1e>
 8008f3e:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8008f42:	4608      	mov	r0, r1
 8008f44:	bd10      	pop	{r4, pc}
 8008f46:	4a08      	ldr	r2, [pc, #32]	; (8008f68 <roundf+0x44>)
 8008f48:	411a      	asrs	r2, r3
 8008f4a:	4210      	tst	r0, r2
 8008f4c:	d0f9      	beq.n	8008f42 <roundf+0x1e>
 8008f4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f52:	4119      	asrs	r1, r3
 8008f54:	4401      	add	r1, r0
 8008f56:	ea21 0102 	bic.w	r1, r1, r2
 8008f5a:	e7f2      	b.n	8008f42 <roundf+0x1e>
 8008f5c:	2b80      	cmp	r3, #128	; 0x80
 8008f5e:	d1f0      	bne.n	8008f42 <roundf+0x1e>
 8008f60:	f7f7 fde8 	bl	8000b34 <__addsf3>
 8008f64:	4601      	mov	r1, r0
 8008f66:	e7ec      	b.n	8008f42 <roundf+0x1e>
 8008f68:	007fffff 	.word	0x007fffff

08008f6c <_init>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	bf00      	nop
 8008f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f72:	bc08      	pop	{r3}
 8008f74:	469e      	mov	lr, r3
 8008f76:	4770      	bx	lr

08008f78 <_fini>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr
