
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08008e40  08008e40  00018e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b8  080090b8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080090b8  080090b8  000190b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090c0  080090c0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080090c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e8  080092b0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080092b0  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8a1  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000274b  00000000  00000000  0002eab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00031200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00032048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016065  00000000  00000000  00032d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c8cf  00000000  00000000  00048dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075c52  00000000  00000000  0005568c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb2de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000433c  00000000  00000000  000cb35c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e28 	.word	0x08008e28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008e28 	.word	0x08008e28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <__aeabi_ldivmod>:
 80010b0:	b97b      	cbnz	r3, 80010d2 <__aeabi_ldivmod+0x22>
 80010b2:	b972      	cbnz	r2, 80010d2 <__aeabi_ldivmod+0x22>
 80010b4:	2900      	cmp	r1, #0
 80010b6:	bfbe      	ittt	lt
 80010b8:	2000      	movlt	r0, #0
 80010ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80010be:	e006      	blt.n	80010ce <__aeabi_ldivmod+0x1e>
 80010c0:	bf08      	it	eq
 80010c2:	2800      	cmpeq	r0, #0
 80010c4:	bf1c      	itt	ne
 80010c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80010ca:	f04f 30ff 	movne.w	r0, #4294967295
 80010ce:	f000 b9a7 	b.w	8001420 <__aeabi_idiv0>
 80010d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80010d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010da:	2900      	cmp	r1, #0
 80010dc:	db09      	blt.n	80010f2 <__aeabi_ldivmod+0x42>
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db1a      	blt.n	8001118 <__aeabi_ldivmod+0x68>
 80010e2:	f000 f835 	bl	8001150 <__udivmoddi4>
 80010e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ee:	b004      	add	sp, #16
 80010f0:	4770      	bx	lr
 80010f2:	4240      	negs	r0, r0
 80010f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db1b      	blt.n	8001134 <__aeabi_ldivmod+0x84>
 80010fc:	f000 f828 	bl	8001150 <__udivmoddi4>
 8001100:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001108:	b004      	add	sp, #16
 800110a:	4240      	negs	r0, r0
 800110c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001110:	4252      	negs	r2, r2
 8001112:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001116:	4770      	bx	lr
 8001118:	4252      	negs	r2, r2
 800111a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800111e:	f000 f817 	bl	8001150 <__udivmoddi4>
 8001122:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800112a:	b004      	add	sp, #16
 800112c:	4240      	negs	r0, r0
 800112e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001132:	4770      	bx	lr
 8001134:	4252      	negs	r2, r2
 8001136:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800113a:	f000 f809 	bl	8001150 <__udivmoddi4>
 800113e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001146:	b004      	add	sp, #16
 8001148:	4252      	negs	r2, r2
 800114a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800114e:	4770      	bx	lr

08001150 <__udivmoddi4>:
 8001150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001154:	468c      	mov	ip, r1
 8001156:	4604      	mov	r4, r0
 8001158:	9e08      	ldr	r6, [sp, #32]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d14b      	bne.n	80011f6 <__udivmoddi4+0xa6>
 800115e:	428a      	cmp	r2, r1
 8001160:	4615      	mov	r5, r2
 8001162:	d967      	bls.n	8001234 <__udivmoddi4+0xe4>
 8001164:	fab2 f282 	clz	r2, r2
 8001168:	b14a      	cbz	r2, 800117e <__udivmoddi4+0x2e>
 800116a:	f1c2 0720 	rsb	r7, r2, #32
 800116e:	fa01 f302 	lsl.w	r3, r1, r2
 8001172:	fa20 f707 	lsr.w	r7, r0, r7
 8001176:	4095      	lsls	r5, r2
 8001178:	ea47 0c03 	orr.w	ip, r7, r3
 800117c:	4094      	lsls	r4, r2
 800117e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001182:	fbbc f7fe 	udiv	r7, ip, lr
 8001186:	fa1f f885 	uxth.w	r8, r5
 800118a:	fb0e c317 	mls	r3, lr, r7, ip
 800118e:	fb07 f908 	mul.w	r9, r7, r8
 8001192:	0c21      	lsrs	r1, r4, #16
 8001194:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001198:	4599      	cmp	r9, r3
 800119a:	d909      	bls.n	80011b0 <__udivmoddi4+0x60>
 800119c:	18eb      	adds	r3, r5, r3
 800119e:	f107 31ff 	add.w	r1, r7, #4294967295
 80011a2:	f080 811c 	bcs.w	80013de <__udivmoddi4+0x28e>
 80011a6:	4599      	cmp	r9, r3
 80011a8:	f240 8119 	bls.w	80013de <__udivmoddi4+0x28e>
 80011ac:	3f02      	subs	r7, #2
 80011ae:	442b      	add	r3, r5
 80011b0:	eba3 0309 	sub.w	r3, r3, r9
 80011b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80011b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80011bc:	fb00 f108 	mul.w	r1, r0, r8
 80011c0:	b2a4      	uxth	r4, r4
 80011c2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011c6:	42a1      	cmp	r1, r4
 80011c8:	d909      	bls.n	80011de <__udivmoddi4+0x8e>
 80011ca:	192c      	adds	r4, r5, r4
 80011cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80011d0:	f080 8107 	bcs.w	80013e2 <__udivmoddi4+0x292>
 80011d4:	42a1      	cmp	r1, r4
 80011d6:	f240 8104 	bls.w	80013e2 <__udivmoddi4+0x292>
 80011da:	3802      	subs	r0, #2
 80011dc:	442c      	add	r4, r5
 80011de:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011e2:	2700      	movs	r7, #0
 80011e4:	1a64      	subs	r4, r4, r1
 80011e6:	b11e      	cbz	r6, 80011f0 <__udivmoddi4+0xa0>
 80011e8:	2300      	movs	r3, #0
 80011ea:	40d4      	lsrs	r4, r2
 80011ec:	e9c6 4300 	strd	r4, r3, [r6]
 80011f0:	4639      	mov	r1, r7
 80011f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d909      	bls.n	800120e <__udivmoddi4+0xbe>
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	f000 80ec 	beq.w	80013d8 <__udivmoddi4+0x288>
 8001200:	2700      	movs	r7, #0
 8001202:	e9c6 0100 	strd	r0, r1, [r6]
 8001206:	4638      	mov	r0, r7
 8001208:	4639      	mov	r1, r7
 800120a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120e:	fab3 f783 	clz	r7, r3
 8001212:	2f00      	cmp	r7, #0
 8001214:	d148      	bne.n	80012a8 <__udivmoddi4+0x158>
 8001216:	428b      	cmp	r3, r1
 8001218:	d302      	bcc.n	8001220 <__udivmoddi4+0xd0>
 800121a:	4282      	cmp	r2, r0
 800121c:	f200 80fb 	bhi.w	8001416 <__udivmoddi4+0x2c6>
 8001220:	1a84      	subs	r4, r0, r2
 8001222:	eb61 0303 	sbc.w	r3, r1, r3
 8001226:	2001      	movs	r0, #1
 8001228:	469c      	mov	ip, r3
 800122a:	2e00      	cmp	r6, #0
 800122c:	d0e0      	beq.n	80011f0 <__udivmoddi4+0xa0>
 800122e:	e9c6 4c00 	strd	r4, ip, [r6]
 8001232:	e7dd      	b.n	80011f0 <__udivmoddi4+0xa0>
 8001234:	b902      	cbnz	r2, 8001238 <__udivmoddi4+0xe8>
 8001236:	deff      	udf	#255	; 0xff
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	2a00      	cmp	r2, #0
 800123e:	f040 808f 	bne.w	8001360 <__udivmoddi4+0x210>
 8001242:	2701      	movs	r7, #1
 8001244:	1b49      	subs	r1, r1, r5
 8001246:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800124a:	fa1f f985 	uxth.w	r9, r5
 800124e:	fbb1 fef8 	udiv	lr, r1, r8
 8001252:	fb08 111e 	mls	r1, r8, lr, r1
 8001256:	fb09 f00e 	mul.w	r0, r9, lr
 800125a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800125e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001262:	4298      	cmp	r0, r3
 8001264:	d907      	bls.n	8001276 <__udivmoddi4+0x126>
 8001266:	18eb      	adds	r3, r5, r3
 8001268:	f10e 31ff 	add.w	r1, lr, #4294967295
 800126c:	d202      	bcs.n	8001274 <__udivmoddi4+0x124>
 800126e:	4298      	cmp	r0, r3
 8001270:	f200 80cd 	bhi.w	800140e <__udivmoddi4+0x2be>
 8001274:	468e      	mov	lr, r1
 8001276:	1a1b      	subs	r3, r3, r0
 8001278:	fbb3 f0f8 	udiv	r0, r3, r8
 800127c:	fb08 3310 	mls	r3, r8, r0, r3
 8001280:	fb09 f900 	mul.w	r9, r9, r0
 8001284:	b2a4      	uxth	r4, r4
 8001286:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800128a:	45a1      	cmp	r9, r4
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0x14e>
 800128e:	192c      	adds	r4, r5, r4
 8001290:	f100 33ff 	add.w	r3, r0, #4294967295
 8001294:	d202      	bcs.n	800129c <__udivmoddi4+0x14c>
 8001296:	45a1      	cmp	r9, r4
 8001298:	f200 80b6 	bhi.w	8001408 <__udivmoddi4+0x2b8>
 800129c:	4618      	mov	r0, r3
 800129e:	eba4 0409 	sub.w	r4, r4, r9
 80012a2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80012a6:	e79e      	b.n	80011e6 <__udivmoddi4+0x96>
 80012a8:	f1c7 0520 	rsb	r5, r7, #32
 80012ac:	40bb      	lsls	r3, r7
 80012ae:	fa22 fc05 	lsr.w	ip, r2, r5
 80012b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80012b6:	fa21 f405 	lsr.w	r4, r1, r5
 80012ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80012be:	fbb4 f9fe 	udiv	r9, r4, lr
 80012c2:	fa1f f88c 	uxth.w	r8, ip
 80012c6:	fb0e 4419 	mls	r4, lr, r9, r4
 80012ca:	fa20 f305 	lsr.w	r3, r0, r5
 80012ce:	40b9      	lsls	r1, r7
 80012d0:	fb09 fa08 	mul.w	sl, r9, r8
 80012d4:	4319      	orrs	r1, r3
 80012d6:	0c0b      	lsrs	r3, r1, #16
 80012d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80012dc:	45a2      	cmp	sl, r4
 80012de:	fa02 f207 	lsl.w	r2, r2, r7
 80012e2:	fa00 f307 	lsl.w	r3, r0, r7
 80012e6:	d90b      	bls.n	8001300 <__udivmoddi4+0x1b0>
 80012e8:	eb1c 0404 	adds.w	r4, ip, r4
 80012ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80012f0:	f080 8088 	bcs.w	8001404 <__udivmoddi4+0x2b4>
 80012f4:	45a2      	cmp	sl, r4
 80012f6:	f240 8085 	bls.w	8001404 <__udivmoddi4+0x2b4>
 80012fa:	f1a9 0902 	sub.w	r9, r9, #2
 80012fe:	4464      	add	r4, ip
 8001300:	eba4 040a 	sub.w	r4, r4, sl
 8001304:	fbb4 f0fe 	udiv	r0, r4, lr
 8001308:	fb0e 4410 	mls	r4, lr, r0, r4
 800130c:	fb00 fa08 	mul.w	sl, r0, r8
 8001310:	b289      	uxth	r1, r1
 8001312:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001316:	45a2      	cmp	sl, r4
 8001318:	d908      	bls.n	800132c <__udivmoddi4+0x1dc>
 800131a:	eb1c 0404 	adds.w	r4, ip, r4
 800131e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001322:	d26b      	bcs.n	80013fc <__udivmoddi4+0x2ac>
 8001324:	45a2      	cmp	sl, r4
 8001326:	d969      	bls.n	80013fc <__udivmoddi4+0x2ac>
 8001328:	3802      	subs	r0, #2
 800132a:	4464      	add	r4, ip
 800132c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001330:	fba0 8902 	umull	r8, r9, r0, r2
 8001334:	eba4 040a 	sub.w	r4, r4, sl
 8001338:	454c      	cmp	r4, r9
 800133a:	4641      	mov	r1, r8
 800133c:	46ce      	mov	lr, r9
 800133e:	d354      	bcc.n	80013ea <__udivmoddi4+0x29a>
 8001340:	d051      	beq.n	80013e6 <__udivmoddi4+0x296>
 8001342:	2e00      	cmp	r6, #0
 8001344:	d069      	beq.n	800141a <__udivmoddi4+0x2ca>
 8001346:	1a5a      	subs	r2, r3, r1
 8001348:	eb64 040e 	sbc.w	r4, r4, lr
 800134c:	fa04 f505 	lsl.w	r5, r4, r5
 8001350:	fa22 f307 	lsr.w	r3, r2, r7
 8001354:	40fc      	lsrs	r4, r7
 8001356:	431d      	orrs	r5, r3
 8001358:	e9c6 5400 	strd	r5, r4, [r6]
 800135c:	2700      	movs	r7, #0
 800135e:	e747      	b.n	80011f0 <__udivmoddi4+0xa0>
 8001360:	4095      	lsls	r5, r2
 8001362:	f1c2 0320 	rsb	r3, r2, #32
 8001366:	fa21 f003 	lsr.w	r0, r1, r3
 800136a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800136e:	fbb0 f7f8 	udiv	r7, r0, r8
 8001372:	fa1f f985 	uxth.w	r9, r5
 8001376:	fb08 0017 	mls	r0, r8, r7, r0
 800137a:	fa24 f303 	lsr.w	r3, r4, r3
 800137e:	4091      	lsls	r1, r2
 8001380:	fb07 fc09 	mul.w	ip, r7, r9
 8001384:	430b      	orrs	r3, r1
 8001386:	0c19      	lsrs	r1, r3, #16
 8001388:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800138c:	458c      	cmp	ip, r1
 800138e:	fa04 f402 	lsl.w	r4, r4, r2
 8001392:	d907      	bls.n	80013a4 <__udivmoddi4+0x254>
 8001394:	1869      	adds	r1, r5, r1
 8001396:	f107 30ff 	add.w	r0, r7, #4294967295
 800139a:	d231      	bcs.n	8001400 <__udivmoddi4+0x2b0>
 800139c:	458c      	cmp	ip, r1
 800139e:	d92f      	bls.n	8001400 <__udivmoddi4+0x2b0>
 80013a0:	3f02      	subs	r7, #2
 80013a2:	4429      	add	r1, r5
 80013a4:	eba1 010c 	sub.w	r1, r1, ip
 80013a8:	fbb1 f0f8 	udiv	r0, r1, r8
 80013ac:	fb08 1c10 	mls	ip, r8, r0, r1
 80013b0:	fb00 fe09 	mul.w	lr, r0, r9
 80013b4:	b299      	uxth	r1, r3
 80013b6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013ba:	458e      	cmp	lr, r1
 80013bc:	d907      	bls.n	80013ce <__udivmoddi4+0x27e>
 80013be:	1869      	adds	r1, r5, r1
 80013c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80013c4:	d218      	bcs.n	80013f8 <__udivmoddi4+0x2a8>
 80013c6:	458e      	cmp	lr, r1
 80013c8:	d916      	bls.n	80013f8 <__udivmoddi4+0x2a8>
 80013ca:	3802      	subs	r0, #2
 80013cc:	4429      	add	r1, r5
 80013ce:	eba1 010e 	sub.w	r1, r1, lr
 80013d2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80013d6:	e73a      	b.n	800124e <__udivmoddi4+0xfe>
 80013d8:	4637      	mov	r7, r6
 80013da:	4630      	mov	r0, r6
 80013dc:	e708      	b.n	80011f0 <__udivmoddi4+0xa0>
 80013de:	460f      	mov	r7, r1
 80013e0:	e6e6      	b.n	80011b0 <__udivmoddi4+0x60>
 80013e2:	4618      	mov	r0, r3
 80013e4:	e6fb      	b.n	80011de <__udivmoddi4+0x8e>
 80013e6:	4543      	cmp	r3, r8
 80013e8:	d2ab      	bcs.n	8001342 <__udivmoddi4+0x1f2>
 80013ea:	ebb8 0102 	subs.w	r1, r8, r2
 80013ee:	eb69 020c 	sbc.w	r2, r9, ip
 80013f2:	3801      	subs	r0, #1
 80013f4:	4696      	mov	lr, r2
 80013f6:	e7a4      	b.n	8001342 <__udivmoddi4+0x1f2>
 80013f8:	4618      	mov	r0, r3
 80013fa:	e7e8      	b.n	80013ce <__udivmoddi4+0x27e>
 80013fc:	4608      	mov	r0, r1
 80013fe:	e795      	b.n	800132c <__udivmoddi4+0x1dc>
 8001400:	4607      	mov	r7, r0
 8001402:	e7cf      	b.n	80013a4 <__udivmoddi4+0x254>
 8001404:	4681      	mov	r9, r0
 8001406:	e77b      	b.n	8001300 <__udivmoddi4+0x1b0>
 8001408:	3802      	subs	r0, #2
 800140a:	442c      	add	r4, r5
 800140c:	e747      	b.n	800129e <__udivmoddi4+0x14e>
 800140e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001412:	442b      	add	r3, r5
 8001414:	e72f      	b.n	8001276 <__udivmoddi4+0x126>
 8001416:	4638      	mov	r0, r7
 8001418:	e707      	b.n	800122a <__udivmoddi4+0xda>
 800141a:	4637      	mov	r7, r6
 800141c:	e6e8      	b.n	80011f0 <__udivmoddi4+0xa0>
 800141e:	bf00      	nop

08001420 <__aeabi_idiv0>:
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop

08001424 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_ADC1_Init+0x74>)
 8001436:	4a19      	ldr	r2, [pc, #100]	; (800149c <MX_ADC1_Init+0x78>)
 8001438:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_ADC1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <MX_ADC1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_ADC1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_ADC1_Init+0x74>)
 800144e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001452:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_ADC1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_ADC1_Init+0x74>)
 800145c:	2201      	movs	r2, #1
 800145e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_ADC1_Init+0x74>)
 8001462:	f002 f805 	bl	8003470 <HAL_ADC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800146c:	f001 fd60 	bl	8002f30 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001474:	2301      	movs	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_ADC1_Init+0x74>)
 8001482:	f002 faad 	bl	80039e0 <HAL_ADC_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800148c:	f001 fd50 	bl	8002f30 <Error_Handler>
  }

}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000220 	.word	0x20000220
 800149c:	40012400 	.word	0x40012400

080014a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a14      	ldr	r2, [pc, #80]	; (800150c <HAL_ADC_MspInit+0x6c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d121      	bne.n	8001504 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_ADC_MspInit+0x70>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_ADC_MspInit+0x70>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_ADC_MspInit+0x70>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_ADC_MspInit+0x70>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <HAL_ADC_MspInit+0x70>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_ADC_MspInit+0x70>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = BatteryVoltage_Pin;
 80014f0:	2301      	movs	r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f4:	2303      	movs	r3, #3
 80014f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BatteryVoltage_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_ADC_MspInit+0x74>)
 8001500:	f002 fd00 	bl	8003f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001504:	bf00      	nop
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40012400 	.word	0x40012400
 8001510:	40021000 	.word	0x40021000
 8001514:	40010800 	.word	0x40010800

08001518 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <MX_GPIO_Init+0x164>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a52      	ldr	r2, [pc, #328]	; (800167c <MX_GPIO_Init+0x164>)
 8001532:	f043 0310 	orr.w	r3, r3, #16
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <MX_GPIO_Init+0x164>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001544:	4b4d      	ldr	r3, [pc, #308]	; (800167c <MX_GPIO_Init+0x164>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a4c      	ldr	r2, [pc, #304]	; (800167c <MX_GPIO_Init+0x164>)
 800154a:	f043 0320 	orr.w	r3, r3, #32
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <MX_GPIO_Init+0x164>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b47      	ldr	r3, [pc, #284]	; (800167c <MX_GPIO_Init+0x164>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a46      	ldr	r2, [pc, #280]	; (800167c <MX_GPIO_Init+0x164>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b44      	ldr	r3, [pc, #272]	; (800167c <MX_GPIO_Init+0x164>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <MX_GPIO_Init+0x164>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a40      	ldr	r2, [pc, #256]	; (800167c <MX_GPIO_Init+0x164>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b3e      	ldr	r3, [pc, #248]	; (800167c <MX_GPIO_Init+0x164>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CSN_Pin|SPI1_CE_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2118      	movs	r1, #24
 8001590:	483b      	ldr	r0, [pc, #236]	; (8001680 <MX_GPIO_Init+0x168>)
 8001592:	f002 fe11 	bl	80041b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GreenLed_Pin|YellowLed_Pin|RedLed_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2143      	movs	r1, #67	; 0x43
 800159a:	483a      	ldr	r0, [pc, #232]	; (8001684 <MX_GPIO_Init+0x16c>)
 800159c:	f002 fe0c 	bl	80041b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a6:	2303      	movs	r3, #3
 80015a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4835      	ldr	r0, [pc, #212]	; (8001688 <MX_GPIO_Init+0x170>)
 80015b2:	f002 fca7 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015b6:	2303      	movs	r3, #3
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ba:	2303      	movs	r3, #3
 80015bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4831      	ldr	r0, [pc, #196]	; (800168c <MX_GPIO_Init+0x174>)
 80015c6:	f002 fc9d 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedsControlButton_Pin;
 80015ca:	2302      	movs	r3, #2
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <MX_GPIO_Init+0x178>)
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedsControlButton_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <MX_GPIO_Init+0x168>)
 80015de:	f002 fc91 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80015e2:	f649 7304 	movw	r3, #40708	; 0x9f04
 80015e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e8:	2303      	movs	r3, #3
 80015ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4823      	ldr	r0, [pc, #140]	; (8001680 <MX_GPIO_Init+0x168>)
 80015f4:	f002 fc86 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|SPI1_CE_Pin;
 80015f8:	2318      	movs	r3, #24
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2302      	movs	r3, #2
 8001606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	481c      	ldr	r0, [pc, #112]	; (8001680 <MX_GPIO_Init+0x168>)
 8001610:	f002 fc78 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB15 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8001614:	f648 733f 	movw	r3, #36671	; 0x8f3f
 8001618:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161a:	2303      	movs	r3, #3
 800161c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4817      	ldr	r0, [pc, #92]	; (8001684 <MX_GPIO_Init+0x16c>)
 8001626:	f002 fc6d 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GreenLed_Pin|YellowLed_Pin|RedLed_Pin;
 800162a:	2343      	movs	r3, #67	; 0x43
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4810      	ldr	r0, [pc, #64]	; (8001684 <MX_GPIO_Init+0x16c>)
 8001642:	f002 fc5f 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_GPIO_Init+0x17c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <MX_GPIO_Init+0x17c>)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2007      	movs	r0, #7
 8001668:	f002 fc15 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800166c:	2007      	movs	r0, #7
 800166e:	f002 fc2e 	bl	8003ece <HAL_NVIC_EnableIRQ>

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	40010800 	.word	0x40010800
 8001684:	40010c00 	.word	0x40010c00
 8001688:	40011000 	.word	0x40011000
 800168c:	40011400 	.word	0x40011400
 8001690:	10110000 	.word	0x10110000
 8001694:	40010000 	.word	0x40010000

08001698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_I2C1_Init+0x50>)
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_I2C1_Init+0x54>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x58>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d6:	f002 fd9f 	bl	8004218 <HAL_I2C_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e0:	f001 fc26 	bl	8002f30 <Error_Handler>
  }

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000250 	.word	0x20000250
 80016ec:	40005400 	.word	0x40005400
 80016f0:	000186a0 	.word	0x000186a0

080016f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <HAL_I2C_MspInit+0x70>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d123      	bne.n	800175c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_I2C_MspInit+0x74>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a13      	ldr	r2, [pc, #76]	; (8001768 <HAL_I2C_MspInit+0x74>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_I2C_MspInit+0x74>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = BME280_SCL_Pin|BME280_SDA_Pin;
 800172c:	23c0      	movs	r3, #192	; 0xc0
 800172e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001730:	2312      	movs	r3, #18
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <HAL_I2C_MspInit+0x78>)
 8001740:	f002 fbe0 	bl	8003f04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_I2C_MspInit+0x74>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_I2C_MspInit+0x74>)
 800174a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800174e:	61d3      	str	r3, [r2, #28]
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_I2C_MspInit+0x74>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40005400 	.word	0x40005400
 8001768:	40021000 	.word	0x40021000
 800176c:	40010c00 	.word	0x40010c00

08001770 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001774:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <__NVIC_SystemReset+0x20>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001780:	4903      	ldr	r1, [pc, #12]	; (8001790 <__NVIC_SystemReset+0x20>)
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_SystemReset+0x24>)
 8001784:	4313      	orrs	r3, r2
 8001786:	60cb      	str	r3, [r1, #12]
 8001788:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <__NVIC_SystemReset+0x1c>
 8001790:	e000ed00 	.word	0xe000ed00
 8001794:	05fa0004 	.word	0x05fa0004

08001798 <BME280_Error>:
BME280_CalibData CalibData;
int32_t temper_int;
BME280_WeatherData BME280_CurrentWeatherData;
//------------------------------------------------
void BME280_Error(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
    
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	460b      	mov	r3, r1
 80017b0:	717b      	strb	r3, [r7, #5]
 80017b2:	4613      	mov	r3, r2
 80017b4:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 80017ba:	797b      	ldrb	r3, [r7, #5]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	88f9      	ldrh	r1, [r7, #6]
 80017c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	2301      	movs	r3, #1
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <I2Cx_WriteData+0x48>)
 80017d2:	f002 fe49 	bl	8004468 <HAL_I2C_Mem_Write>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) BME280_Error();
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <I2Cx_WriteData+0x40>
 80017e0:	f7ff ffda 	bl	8001798 <BME280_Error>
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000250 	.word	0x20000250

080017f0 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af04      	add	r7, sp, #16
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	4613      	mov	r3, r2
 80017fe:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	b29a      	uxth	r2, r3
 800180c:	88f9      	ldrh	r1, [r7, #6]
 800180e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	2301      	movs	r3, #1
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	f107 030e 	add.w	r3, r7, #14
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	4807      	ldr	r0, [pc, #28]	; (8001840 <I2Cx_ReadData+0x50>)
 8001822:	f002 ff1b 	bl	800465c <HAL_I2C_Mem_Read>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) BME280_Error();
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <I2Cx_ReadData+0x44>
 8001830:	f7ff ffb2 	bl	8001798 <BME280_Error>
  return value;
 8001834:	7bbb      	ldrb	r3, [r7, #14]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000250 	.word	0x20000250

08001844 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af04      	add	r7, sp, #16
 800184a:	4603      	mov	r3, r0
 800184c:	603a      	str	r2, [r7, #0]
 800184e:	80fb      	strh	r3, [r7, #6]
 8001850:	460b      	mov	r3, r1
 8001852:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001858:	797b      	ldrb	r3, [r7, #5]
 800185a:	b29a      	uxth	r2, r3
 800185c:	88f9      	ldrh	r1, [r7, #6]
 800185e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2302      	movs	r3, #2
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2301      	movs	r3, #1
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <I2Cx_ReadData16+0x48>)
 8001870:	f002 fef4 	bl	800465c <HAL_I2C_Mem_Read>
 8001874:	4603      	mov	r3, r0
 8001876:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) BME280_Error();
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <I2Cx_ReadData16+0x3e>
 800187e:	f7ff ff8b 	bl	8001798 <BME280_Error>
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000250 	.word	0x20000250

08001890 <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af04      	add	r7, sp, #16
 8001896:	4603      	mov	r3, r0
 8001898:	603a      	str	r2, [r7, #0]
 800189a:	80fb      	strh	r3, [r7, #6]
 800189c:	460b      	mov	r3, r1
 800189e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	88f9      	ldrh	r1, [r7, #6]
 80018aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	2303      	movs	r3, #3
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2301      	movs	r3, #1
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <I2Cx_ReadData24+0x48>)
 80018bc:	f002 fece 	bl	800465c <HAL_I2C_Mem_Read>
 80018c0:	4603      	mov	r3, r0
 80018c2:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) BME280_Error();
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <I2Cx_ReadData24+0x3e>
 80018ca:	f7ff ff65 	bl	8001798 <BME280_Error>
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000250 	.word	0x20000250

080018dc <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 80018ec:	79ba      	ldrb	r2, [r7, #6]
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	4619      	mov	r1, r3
 80018f2:	20ec      	movs	r0, #236	; 0xec
 80018f4:	f7ff ff56 	bl	80017a4 <I2Cx_WriteData>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4619      	mov	r1, r3
 800190e:	20ec      	movs	r0, #236	; 0xec
 8001910:	f7ff ff6e 	bl	80017f0 <I2Cx_ReadData>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]
  return res;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	6039      	str	r1, [r7, #0]
 800192c:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	20ec      	movs	r0, #236	; 0xec
 8001936:	f7ff ff85 	bl	8001844 <I2Cx_ReadData16>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	6039      	str	r1, [r7, #0]
 800194c:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	20ec      	movs	r0, #236	; 0xec
 8001956:	f7ff ff75 	bl	8001844 <I2Cx_ReadData16>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	6039      	str	r1, [r7, #0]
 800196c:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	20ec      	movs	r0, #236	; 0xec
 8001976:	f7ff ff65 	bl	8001844 <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	b21a      	sxth	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b21b      	sxth	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b21b      	sxth	r3, r3
 8001990:	b29a      	uxth	r2, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	801a      	strh	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	6039      	str	r1, [r7, #0]
 80019a8:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	20ec      	movs	r0, #236	; 0xec
 80019b2:	f7ff ff6d 	bl	8001890 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0c1b      	lsrs	r3, r3, #16
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80019c6:	431a      	orrs	r2, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019d2:	4313      	orrs	r3, r2
 80019d4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	601a      	str	r2, [r3, #0]
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 80019ea:	20f3      	movs	r0, #243	; 0xf3
 80019ec:	f7ff ff88 	bl	8001900 <BME280_ReadReg>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 0309 	and.w	r3, r3, #9
 80019f6:	71fb      	strb	r3, [r7, #7]
  return res;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8001a04:	b598      	push	{r3, r4, r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1); 
 8001a08:	4937      	ldr	r1, [pc, #220]	; (8001ae8 <BME280_ReadCoefficients+0xe4>)
 8001a0a:	2088      	movs	r0, #136	; 0x88
 8001a0c:	f7ff ff89 	bl	8001922 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);  
 8001a10:	4936      	ldr	r1, [pc, #216]	; (8001aec <BME280_ReadCoefficients+0xe8>)
 8001a12:	208a      	movs	r0, #138	; 0x8a
 8001a14:	f7ff ff95 	bl	8001942 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);  
 8001a18:	4935      	ldr	r1, [pc, #212]	; (8001af0 <BME280_ReadCoefficients+0xec>)
 8001a1a:	208c      	movs	r0, #140	; 0x8c
 8001a1c:	f7ff ff91 	bl	8001942 <BME280_ReadReg_S16>
  
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1); 
 8001a20:	4934      	ldr	r1, [pc, #208]	; (8001af4 <BME280_ReadCoefficients+0xf0>)
 8001a22:	208e      	movs	r0, #142	; 0x8e
 8001a24:	f7ff ff7d 	bl	8001922 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);  
 8001a28:	4933      	ldr	r1, [pc, #204]	; (8001af8 <BME280_ReadCoefficients+0xf4>)
 8001a2a:	2090      	movs	r0, #144	; 0x90
 8001a2c:	f7ff ff89 	bl	8001942 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);  
 8001a30:	4932      	ldr	r1, [pc, #200]	; (8001afc <BME280_ReadCoefficients+0xf8>)
 8001a32:	2092      	movs	r0, #146	; 0x92
 8001a34:	f7ff ff85 	bl	8001942 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4); 
 8001a38:	4931      	ldr	r1, [pc, #196]	; (8001b00 <BME280_ReadCoefficients+0xfc>)
 8001a3a:	2094      	movs	r0, #148	; 0x94
 8001a3c:	f7ff ff81 	bl	8001942 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);  
 8001a40:	4930      	ldr	r1, [pc, #192]	; (8001b04 <BME280_ReadCoefficients+0x100>)
 8001a42:	2096      	movs	r0, #150	; 0x96
 8001a44:	f7ff ff7d 	bl	8001942 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);  
 8001a48:	492f      	ldr	r1, [pc, #188]	; (8001b08 <BME280_ReadCoefficients+0x104>)
 8001a4a:	2098      	movs	r0, #152	; 0x98
 8001a4c:	f7ff ff79 	bl	8001942 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8001a50:	492e      	ldr	r1, [pc, #184]	; (8001b0c <BME280_ReadCoefficients+0x108>)
 8001a52:	209a      	movs	r0, #154	; 0x9a
 8001a54:	f7ff ff75 	bl	8001942 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8001a58:	492d      	ldr	r1, [pc, #180]	; (8001b10 <BME280_ReadCoefficients+0x10c>)
 8001a5a:	209c      	movs	r0, #156	; 0x9c
 8001a5c:	f7ff ff71 	bl	8001942 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8001a60:	492c      	ldr	r1, [pc, #176]	; (8001b14 <BME280_ReadCoefficients+0x110>)
 8001a62:	209e      	movs	r0, #158	; 0x9e
 8001a64:	f7ff ff6d 	bl	8001942 <BME280_ReadReg_S16>
  
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8001a68:	20a1      	movs	r0, #161	; 0xa1
 8001a6a:	f7ff ff49 	bl	8001900 <BME280_ReadReg>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <BME280_ReadCoefficients+0xe4>)
 8001a74:	761a      	strb	r2, [r3, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2, &CalibData.dig_H2);
 8001a76:	4928      	ldr	r1, [pc, #160]	; (8001b18 <BME280_ReadCoefficients+0x114>)
 8001a78:	20e1      	movs	r0, #225	; 0xe1
 8001a7a:	f7ff ff62 	bl	8001942 <BME280_ReadReg_S16>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8001a7e:	20e3      	movs	r0, #227	; 0xe3
 8001a80:	f7ff ff3e 	bl	8001900 <BME280_ReadReg>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <BME280_ReadCoefficients+0xe4>)
 8001a8a:	771a      	strb	r2, [r3, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8001a8c:	20e4      	movs	r0, #228	; 0xe4
 8001a8e:	f7ff ff37 	bl	8001900 <BME280_ReadReg>
 8001a92:	4603      	mov	r3, r0
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	b21c      	sxth	r4, r3
 8001a98:	20e5      	movs	r0, #229	; 0xe5
 8001a9a:	f7ff ff31 	bl	8001900 <BME280_ReadReg>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4323      	orrs	r3, r4
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <BME280_ReadCoefficients+0xe4>)
 8001aae:	83da      	strh	r2, [r3, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8001ab0:	20e6      	movs	r0, #230	; 0xe6
 8001ab2:	f7ff ff25 	bl	8001900 <BME280_ReadReg>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	b21c      	sxth	r4, r3
 8001abc:	20e5      	movs	r0, #229	; 0xe5
 8001abe:	f7ff ff1f 	bl	8001900 <BME280_ReadReg>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	4323      	orrs	r3, r4
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <BME280_ReadCoefficients+0xe4>)
 8001ad0:	841a      	strh	r2, [r3, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001ad2:	20e7      	movs	r0, #231	; 0xe7
 8001ad4:	f7ff ff14 	bl	8001900 <BME280_ReadReg>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <BME280_ReadCoefficients+0xe4>)
 8001ade:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001ae2:	bf00      	nop
 8001ae4:	bd98      	pop	{r3, r4, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200002d0 	.word	0x200002d0
 8001aec:	200002d2 	.word	0x200002d2
 8001af0:	200002d4 	.word	0x200002d4
 8001af4:	200002d6 	.word	0x200002d6
 8001af8:	200002d8 	.word	0x200002d8
 8001afc:	200002da 	.word	0x200002da
 8001b00:	200002dc 	.word	0x200002dc
 8001b04:	200002de 	.word	0x200002de
 8001b08:	200002e0 	.word	0x200002e0
 8001b0c:	200002e2 	.word	0x200002e2
 8001b10:	200002e4 	.word	0x200002e4
 8001b14:	200002e6 	.word	0x200002e6
 8001b18:	200002ea 	.word	0x200002ea

08001b1c <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001b26:	20f5      	movs	r0, #245	; 0xf5
 8001b28:	f7ff feea 	bl	8001900 <BME280_ReadReg>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	f023 031f 	bic.w	r3, r3, #31
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	20f5      	movs	r0, #245	; 0xf5
 8001b4e:	f7ff fec5 	bl	80018dc <BME280_WriteReg>
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001b64:	20f5      	movs	r0, #245	; 0xf5
 8001b66:	f7ff fecb 	bl	8001900 <BME280_ReadReg>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f023 031c 	bic.w	r3, r3, #28
 8001b70:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	f003 031c 	and.w	r3, r3, #28
 8001b7a:	b25a      	sxtb	r2, r3
 8001b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	20f5      	movs	r0, #245	; 0xf5
 8001b8c:	f7ff fea6 	bl	80018dc <BME280_WriteReg>
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001ba2:	20f4      	movs	r0, #244	; 0xf4
 8001ba4:	f7ff feac 	bl	8001900 <BME280_ReadReg>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	f023 031f 	bic.w	r3, r3, #31
 8001bb8:	b25a      	sxtb	r2, r3
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	20f4      	movs	r0, #244	; 0xf4
 8001bca:	f7ff fe87 	bl	80018dc <BME280_WriteReg>
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8001be0:	20f4      	movs	r0, #244	; 0xf4
 8001be2:	f7ff fe8d 	bl	8001900 <BME280_ReadReg>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f023 031c 	bic.w	r3, r3, #28
 8001bec:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	f003 031c 	and.w	r3, r3, #28
 8001bf6:	b25a      	sxtb	r2, r3
 8001bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	4619      	mov	r1, r3
 8001c06:	20f4      	movs	r0, #244	; 0xf4
 8001c08:	f7ff fe68 	bl	80018dc <BME280_WriteReg>
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8001c1e:	20f2      	movs	r0, #242	; 0xf2
 8001c20:	f7ff fe6e 	bl	8001900 <BME280_ReadReg>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f023 0307 	bic.w	r3, r3, #7
 8001c2a:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	b25a      	sxtb	r2, r3
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	4619      	mov	r1, r3
 8001c44:	20f2      	movs	r0, #242	; 0xf2
 8001c46:	f7ff fe49 	bl	80018dc <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001c4a:	20f4      	movs	r0, #244	; 0xf4
 8001c4c:	f7ff fe58 	bl	8001900 <BME280_ReadReg>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	4619      	mov	r1, r3
 8001c58:	20f4      	movs	r0, #244	; 0xf4
 8001c5a:	f7ff fe3f 	bl	80018dc <BME280_WriteReg>
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8001c70:	20f4      	movs	r0, #244	; 0xf4
 8001c72:	f7ff fe45 	bl	8001900 <BME280_ReadReg>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f023 0303 	bic.w	r3, r3, #3
 8001c7c:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	b25a      	sxtb	r2, r3
 8001c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	4619      	mov	r1, r3
 8001c96:	20f4      	movs	r0, #244	; 0xf4
 8001c98:	f7ff fe20 	bl	80018dc <BME280_WriteReg>
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	20fa      	movs	r0, #250	; 0xfa
 8001cb6:	f7ff fe72 	bl	800199e <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	08db      	lsrs	r3, r3, #3
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <BME280_ReadTemperature+0x98>)
 8001cc6:	8812      	ldrh	r2, [r2, #0]
 8001cc8:	0052      	lsls	r2, r2, #1
 8001cca:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.dig_T2)) >> 11;
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <BME280_ReadTemperature+0x98>)
 8001cce:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 8001cd6:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001cd8:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <BME280_ReadTemperature+0x98>)
 8001ce0:	8812      	ldrh	r2, [r2, #0]
 8001ce2:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	0912      	lsrs	r2, r2, #4
 8001ce8:	4914      	ldr	r1, [pc, #80]	; (8001d3c <BME280_ReadTemperature+0x98>)
 8001cea:	8809      	ldrh	r1, [r1, #0]
 8001cec:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001cf2:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8001cf4:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <BME280_ReadTemperature+0x98>)
 8001cf6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 8001cfe:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001d00:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <BME280_ReadTemperature+0x9c>)
 8001d0a:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <BME280_ReadTemperature+0x9c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	3380      	adds	r3, #128	; 0x80
 8001d18:	121b      	asrs	r3, r3, #8
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ffde 	bl	8000cdc <__aeabi_i2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	60fb      	str	r3, [r7, #12]
	temper_float /= 100.0f;
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <BME280_ReadTemperature+0xa0>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff f8e0 	bl	8000eec <__aeabi_fdiv>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60fb      	str	r3, [r7, #12]
  return temper_float;
 8001d30:	68fb      	ldr	r3, [r7, #12]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200002d0 	.word	0x200002d0
 8001d40:	200002f4 	.word	0x200002f4
 8001d44:	42c80000 	.word	0x42c80000

08001d48 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8001d48:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001d4c:	b08a      	sub	sp, #40	; 0x28
 8001d4e:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001d56:	f7ff ffa5 	bl	8001ca4 <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	20f7      	movs	r0, #247	; 0xf7
 8001d60:	f7ff fe1d 	bl	800199e <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	603b      	str	r3, [r7, #0]
	val1 = ((int64_t) temper_int) - 128000;
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <BME280_ReadPressure+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001d74:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001d78:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001d7c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	fb02 f203 	mul.w	r2, r2, r3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	441a      	add	r2, r3
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fba1 3403 	umull	r3, r4, r1, r3
 8001d9a:	4422      	add	r2, r4
 8001d9c:	4614      	mov	r4, r2
 8001d9e:	4a59      	ldr	r2, [pc, #356]	; (8001f04 <BME280_ReadPressure+0x1bc>)
 8001da0:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001da4:	b211      	sxth	r1, r2
 8001da6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001daa:	fb01 f504 	mul.w	r5, r1, r4
 8001dae:	fb03 f002 	mul.w	r0, r3, r2
 8001db2:	4428      	add	r0, r5
 8001db4:	fba3 3401 	umull	r3, r4, r3, r1
 8001db8:	1902      	adds	r2, r0, r4
 8001dba:	4614      	mov	r4, r2
 8001dbc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001dc0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <BME280_ReadPressure+0x1bc>)
 8001dc6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	fb04 f102 	mul.w	r1, r4, r2
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	fb03 f202 	mul.w	r2, r3, r2
 8001ddc:	1888      	adds	r0, r1, r2
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	fba2 1203 	umull	r1, r2, r2, r3
 8001de4:	1883      	adds	r3, r0, r2
 8001de6:	461a      	mov	r2, r3
 8001de8:	f04f 0500 	mov.w	r5, #0
 8001dec:	f04f 0600 	mov.w	r6, #0
 8001df0:	0456      	lsls	r6, r2, #17
 8001df2:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001df6:	044d      	lsls	r5, r1, #17
 8001df8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001dfc:	186b      	adds	r3, r5, r1
 8001dfe:	eb46 0402 	adc.w	r4, r6, r2
 8001e02:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <BME280_ReadPressure+0x1bc>)
 8001e08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e0c:	b219      	sxth	r1, r3
 8001e0e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001e12:	f04f 0500 	mov.w	r5, #0
 8001e16:	f04f 0600 	mov.w	r6, #0
 8001e1a:	00ce      	lsls	r6, r1, #3
 8001e1c:	2500      	movs	r5, #0
 8001e1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e22:	186b      	adds	r3, r5, r1
 8001e24:	eb46 0402 	adc.w	r4, r6, r2
 8001e28:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	fb02 f203 	mul.w	r2, r2, r3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	69b9      	ldr	r1, [r7, #24]
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	441a      	add	r2, r3
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fba1 3403 	umull	r3, r4, r1, r3
 8001e46:	4422      	add	r2, r4
 8001e48:	4614      	mov	r4, r2
 8001e4a:	4a2e      	ldr	r2, [pc, #184]	; (8001f04 <BME280_ReadPressure+0x1bc>)
 8001e4c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001e50:	b211      	sxth	r1, r2
 8001e52:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001e56:	fb01 f504 	mul.w	r5, r1, r4
 8001e5a:	fb03 f002 	mul.w	r0, r3, r2
 8001e5e:	4428      	add	r0, r5
 8001e60:	fba3 3401 	umull	r3, r4, r3, r1
 8001e64:	1902      	adds	r2, r0, r4
 8001e66:	4614      	mov	r4, r2
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	0a19      	lsrs	r1, r3, #8
 8001e72:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001e76:	1222      	asrs	r2, r4, #8
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <BME280_ReadPressure+0x1bc>)
 8001e7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001e84:	69b8      	ldr	r0, [r7, #24]
 8001e86:	fb04 f500 	mul.w	r5, r4, r0
 8001e8a:	69f8      	ldr	r0, [r7, #28]
 8001e8c:	fb03 f000 	mul.w	r0, r3, r0
 8001e90:	4428      	add	r0, r5
 8001e92:	69bd      	ldr	r5, [r7, #24]
 8001e94:	fba5 5603 	umull	r5, r6, r5, r3
 8001e98:	1983      	adds	r3, r0, r6
 8001e9a:	461e      	mov	r6, r3
 8001e9c:	f04f 0b00 	mov.w	fp, #0
 8001ea0:	f04f 0c00 	mov.w	ip, #0
 8001ea4:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001ea8:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001eac:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8001eb0:	eb1b 0301 	adds.w	r3, fp, r1
 8001eb4:	eb4c 0402 	adc.w	r4, ip, r2
 8001eb8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 8001ebc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ec0:	1c19      	adds	r1, r3, #0
 8001ec2:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <BME280_ReadPressure+0x1bc>)
 8001ec8:	88db      	ldrh	r3, [r3, #6]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f04f 0400 	mov.w	r4, #0
 8001ed0:	fb03 f502 	mul.w	r5, r3, r2
 8001ed4:	fb01 f004 	mul.w	r0, r1, r4
 8001ed8:	4428      	add	r0, r5
 8001eda:	fba1 3403 	umull	r3, r4, r1, r3
 8001ede:	1902      	adds	r2, r0, r4
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	1061      	asrs	r1, r4, #1
 8001eec:	17e2      	asrs	r2, r4, #31
 8001eee:	e9c7 1206 	strd	r1, r2, [r7, #24]
	if (val1 == 0) {
 8001ef2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ef6:	4323      	orrs	r3, r4
 8001ef8:	d106      	bne.n	8001f08 <BME280_ReadPressure+0x1c0>
		return 0; // avoid exception caused by division by zero
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e110      	b.n	8002122 <BME280_ReadPressure+0x3da>
 8001f00:	200002f4 	.word	0x200002f4
 8001f04:	200002d0 	.word	0x200002d0
	}
	p = 1048576 - press_raw;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001f0e:	f04f 0400 	mov.w	r4, #0
 8001f12:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p = (((p << 31) - val2) * 3125) / val1;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	ea4f 0953 	mov.w	r9, r3, lsr #1
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001f22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f26:	4645      	mov	r5, r8
 8001f28:	464e      	mov	r6, r9
 8001f2a:	1aed      	subs	r5, r5, r3
 8001f2c:	eb66 0604 	sbc.w	r6, r6, r4
 8001f30:	46a8      	mov	r8, r5
 8001f32:	46b1      	mov	r9, r6
 8001f34:	eb18 0308 	adds.w	r3, r8, r8
 8001f38:	eb49 0409 	adc.w	r4, r9, r9
 8001f3c:	4698      	mov	r8, r3
 8001f3e:	46a1      	mov	r9, r4
 8001f40:	eb18 0805 	adds.w	r8, r8, r5
 8001f44:	eb49 0906 	adc.w	r9, r9, r6
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001f54:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001f58:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001f5c:	eb18 0801 	adds.w	r8, r8, r1
 8001f60:	eb49 0902 	adc.w	r9, r9, r2
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001f70:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001f74:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001f78:	4688      	mov	r8, r1
 8001f7a:	4691      	mov	r9, r2
 8001f7c:	eb18 0805 	adds.w	r8, r8, r5
 8001f80:	eb49 0906 	adc.w	r9, r9, r6
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001f90:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001f94:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001f98:	4688      	mov	r8, r1
 8001f9a:	4691      	mov	r9, r2
 8001f9c:	eb18 0005 	adds.w	r0, r8, r5
 8001fa0:	eb49 0106 	adc.w	r1, r9, r6
 8001fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa8:	f7ff f882 	bl	80010b0 <__aeabi_ldivmod>
 8001fac:	4603      	mov	r3, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001fb4:	4b5d      	ldr	r3, [pc, #372]	; (800212c <BME280_ReadPressure+0x3e4>)
 8001fb6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001fba:	b219      	sxth	r1, r3
 8001fbc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001fc0:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	f04f 0400 	mov.w	r4, #0
 8001fcc:	0b6b      	lsrs	r3, r5, #13
 8001fce:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001fd2:	1374      	asrs	r4, r6, #13
 8001fd4:	fb03 f502 	mul.w	r5, r3, r2
 8001fd8:	fb01 f004 	mul.w	r0, r1, r4
 8001fdc:	4428      	add	r0, r5
 8001fde:	fba1 1203 	umull	r1, r2, r1, r3
 8001fe2:	1883      	adds	r3, r0, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	f04f 0400 	mov.w	r4, #0
 8001ff2:	0b6b      	lsrs	r3, r5, #13
 8001ff4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001ff8:	1374      	asrs	r4, r6, #13
 8001ffa:	fb03 f502 	mul.w	r5, r3, r2
 8001ffe:	fb01 f004 	mul.w	r0, r1, r4
 8002002:	4428      	add	r0, r5
 8002004:	fba1 1203 	umull	r1, r2, r1, r3
 8002008:	1883      	adds	r3, r0, r2
 800200a:	461a      	mov	r2, r3
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	f04f 0400 	mov.w	r4, #0
 8002014:	0e4b      	lsrs	r3, r1, #25
 8002016:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800201a:	1654      	asrs	r4, r2, #25
 800201c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8002020:	4b42      	ldr	r3, [pc, #264]	; (800212c <BME280_ReadPressure+0x3e4>)
 8002022:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002026:	b21b      	sxth	r3, r3
 8002028:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	fb04 f102 	mul.w	r1, r4, r2
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	fb03 f202 	mul.w	r2, r3, r2
 8002038:	1888      	adds	r0, r1, r2
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	fba2 1203 	umull	r1, r2, r2, r3
 8002040:	1883      	adds	r3, r0, r2
 8002042:	461a      	mov	r2, r3
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	f04f 0400 	mov.w	r4, #0
 800204c:	0ccb      	lsrs	r3, r1, #19
 800204e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002052:	14d4      	asrs	r4, r2, #19
 8002054:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8002058:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800205c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002060:	eb11 0803 	adds.w	r8, r1, r3
 8002064:	eb42 0904 	adc.w	r9, r2, r4
 8002068:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800206c:	eb13 0508 	adds.w	r5, r3, r8
 8002070:	eb44 0609 	adc.w	r6, r4, r9
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	0a29      	lsrs	r1, r5, #8
 800207e:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8002082:	1232      	asrs	r2, r6, #8
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <BME280_ReadPressure+0x3e4>)
 8002086:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800208a:	b21d      	sxth	r5, r3
 800208c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002090:	f04f 0800 	mov.w	r8, #0
 8002094:	f04f 0900 	mov.w	r9, #0
 8002098:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800209c:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80020a0:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80020a4:	eb18 0301 	adds.w	r3, r8, r1
 80020a8:	eb49 0402 	adc.w	r4, r9, r2
 80020ac:	e9c7 3402 	strd	r3, r4, [r7, #8]
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 80020b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	f04f 0400 	mov.w	r4, #0
 80020bc:	0a0b      	lsrs	r3, r1, #8
 80020be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80020c2:	1214      	asrs	r4, r2, #8
 80020c4:	461a      	mov	r2, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	fb03 f502 	mul.w	r5, r3, r2
 80020ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020d2:	f04f 01ff 	mov.w	r1, #255	; 0xff
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	ea03 0801 	and.w	r8, r3, r1
 80020de:	ea04 0902 	and.w	r9, r4, r2
 80020e2:	4a13      	ldr	r2, [pc, #76]	; (8002130 <BME280_ReadPressure+0x3e8>)
 80020e4:	fb02 f109 	mul.w	r1, r2, r9
 80020e8:	2200      	movs	r2, #0
 80020ea:	fb02 f208 	mul.w	r2, r2, r8
 80020ee:	440a      	add	r2, r1
 80020f0:	490f      	ldr	r1, [pc, #60]	; (8002130 <BME280_ReadPressure+0x3e8>)
 80020f2:	fba8 0101 	umull	r0, r1, r8, r1
 80020f6:	1853      	adds	r3, r2, r1
 80020f8:	4619      	mov	r1, r3
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <BME280_ReadPressure+0x3ec>)
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	f7fe ffd6 	bl	80010b0 <__aeabi_ldivmod>
 8002104:	4603      	mov	r3, r0
 8002106:	460c      	mov	r4, r1
 8002108:	442b      	add	r3, r5
 800210a:	607b      	str	r3, [r7, #4]
	press_float = pres_int / 100.0f;
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7fe fde1 	bl	8000cd4 <__aeabi_ui2f>
 8002112:	4603      	mov	r3, r0
 8002114:	4908      	ldr	r1, [pc, #32]	; (8002138 <BME280_ReadPressure+0x3f0>)
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fee8 	bl	8000eec <__aeabi_fdiv>
 800211c:	4603      	mov	r3, r0
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  return press_float;
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002122:	4618      	mov	r0, r3
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800212c:	200002d0 	.word	0x200002d0
 8002130:	0005f5e1 	.word	0x0005f5e1
 8002134:	000186a0 	.word	0x000186a0
 8002138:	42c80000 	.word	0x42c80000

0800213c <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
	int16_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8002148:	f7ff fdac 	bl	8001ca4 <BME280_ReadTemperature>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 800214c:	1cbb      	adds	r3, r7, #2
 800214e:	4619      	mov	r1, r3
 8002150:	20fd      	movs	r0, #253	; 0xfd
 8002152:	f7ff fc06 	bl	8001962 <BME280_ReadReg_BE_S16>
	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8002156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800215a:	b29b      	uxth	r3, r3
 800215c:	60bb      	str	r3, [r7, #8]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 800215e:	4b32      	ldr	r3, [pc, #200]	; (8002228 <BME280_ReadHumidity+0xec>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002166:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	039a      	lsls	r2, r3, #14
 800216c:	4b2f      	ldr	r3, [pc, #188]	; (800222c <BME280_ReadHumidity+0xf0>)
 800216e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002172:	051b      	lsls	r3, r3, #20
 8002174:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <BME280_ReadHumidity+0xf0>)
 8002178:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800217c:	4619      	mov	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	fb03 f301 	mul.w	r3, r3, r1
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8002184:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8002186:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800218a:	13db      	asrs	r3, r3, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <BME280_ReadHumidity+0xf0>)
 800218e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8002192:	4611      	mov	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	fb02 f201 	mul.w	r2, r2, r1
 800219a:	1292      	asrs	r2, r2, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 800219c:	4923      	ldr	r1, [pc, #140]	; (800222c <BME280_ReadHumidity+0xf0>)
 800219e:	7f09      	ldrb	r1, [r1, #28]
 80021a0:	4608      	mov	r0, r1
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	fb01 f100 	mul.w	r1, r1, r0
 80021a8:	12c9      	asrs	r1, r1, #11
 80021aa:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 80021ae:	fb01 f202 	mul.w	r2, r1, r2
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80021b2:	1292      	asrs	r2, r2, #10
 80021b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 80021b8:	491c      	ldr	r1, [pc, #112]	; (800222c <BME280_ReadHumidity+0xf0>)
 80021ba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80021be:	fb01 f202 	mul.w	r2, r1, r2
 80021c2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80021c6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	13db      	asrs	r3, r3, #15
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	13d2      	asrs	r2, r2, #15
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 80021dc:	4a13      	ldr	r2, [pc, #76]	; (800222c <BME280_ReadHumidity+0xf0>)
 80021de:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_H1)) >> 4));
 80021e4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021f2:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80021fa:	bfa8      	it	ge
 80021fc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002200:	607b      	str	r3, [r7, #4]
	hum_float = (v_x1_u32r>>12);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	131b      	asrs	r3, r3, #12
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fd68 	bl	8000cdc <__aeabi_i2f>
 800220c:	4603      	mov	r3, r0
 800220e:	60fb      	str	r3, [r7, #12]
	hum_float /= 1024.0f;
 8002210:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7fe fe69 	bl	8000eec <__aeabi_fdiv>
 800221a:	4603      	mov	r3, r0
 800221c:	60fb      	str	r3, [r7, #12]
  return hum_float;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200002f4 	.word	0x200002f4
 800222c:	200002d0 	.word	0x200002d0

08002230 <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
int BME280_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
  uint32_t value32 = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	603b      	str	r3, [r7, #0]

  value = BME280_ReadReg(BME280_REG_ID);
 800223e:	20d0      	movs	r0, #208	; 0xd0
 8002240:	f7ff fb5e 	bl	8001900 <BME280_ReadReg>
 8002244:	4603      	mov	r3, r0
 8002246:	71fb      	strb	r3, [r7, #7]
	
	if(value != BME280_ID)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	2b60      	cmp	r3, #96	; 0x60
 800224c:	d003      	beq.n	8002256 <BME280_Init+0x26>
	{
		BME280_Error();
 800224e:	f7ff faa3 	bl	8001798 <BME280_Error>
		return BME280_INIT_FAIL;
 8002252:	2300      	movs	r3, #0
 8002254:	e02e      	b.n	80022b4 <BME280_Init+0x84>
	}
    
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8002256:	21b6      	movs	r1, #182	; 0xb6
 8002258:	20e0      	movs	r0, #224	; 0xe0
 800225a:	f7ff fb3f 	bl	80018dc <BME280_WriteReg>
	
  while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE);
 800225e:	bf00      	nop
 8002260:	f7ff fbc0 	bl	80019e4 <BME280_ReadStatus>
 8002264:	4603      	mov	r3, r0
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f8      	bne.n	8002260 <BME280_Init+0x30>
	
  BME280_ReadCoefficients();
 800226e:	f7ff fbc9 	bl	8001a04 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 8002272:	20a0      	movs	r0, #160	; 0xa0
 8002274:	f7ff fc52 	bl	8001b1c <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8002278:	2008      	movs	r0, #8
 800227a:	f7ff fc6e 	bl	8001b5a <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 800227e:	2060      	movs	r0, #96	; 0x60
 8002280:	f7ff fc8a 	bl	8001b98 <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8002284:	2008      	movs	r0, #8
 8002286:	f7ff fca6 	bl	8001bd6 <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 800228a:	2001      	movs	r0, #1
 800228c:	f7ff fcc2 	bl	8001c14 <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8002290:	20f4      	movs	r0, #244	; 0xf4
 8002292:	f7ff fb35 	bl	8001900 <BME280_ReadReg>
 8002296:	4603      	mov	r3, r0
 8002298:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 800229a:	20f2      	movs	r0, #242	; 0xf2
 800229c:	f7ff fb30 	bl	8001900 <BME280_ReadReg>
 80022a0:	4603      	mov	r3, r0
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	461a      	mov	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	603b      	str	r3, [r7, #0]
	
	BME280_SetMode(BME280_MODE_NORMAL);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f7ff fcda 	bl	8001c66 <BME280_SetMode>
    
    return BME280_INIT_OK;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <NRF_Init>:

uint8_t NRF_txBuff[NRF_txBuffSize];
uint8_t NRF_rxBuff[NRF_rxBuffSize];

void NRF_Init(const uint8_t *NRF_TX_Addr, const uint8_t *NRF_RX1_Addr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	NRF_CE_LOW;
 80022c6:	2200      	movs	r2, #0
 80022c8:	2110      	movs	r1, #16
 80022ca:	4824      	ldr	r0, [pc, #144]	; (800235c <NRF_Init+0xa0>)
 80022cc:	f001 ff74 	bl	80041b8 <HAL_GPIO_WritePin>
	NRF_Delay(1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f001 f8ab 	bl	800342c <HAL_Delay>
	NRF_WriteReg(NRF_REG_CONFIG, 0x02);
 80022d6:	2102      	movs	r1, #2
 80022d8:	2000      	movs	r0, #0
 80022da:	f000 f875 	bl	80023c8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_EN_AA, 0x3f); //Enable auto Acknowledgment pipe1 0x3f
 80022de:	213f      	movs	r1, #63	; 0x3f
 80022e0:	2001      	movs	r0, #1
 80022e2:	f000 f871 	bl	80023c8 <NRF_WriteReg>
  NRF_WriteReg(NRF_REG_EN_RXADDR, 0x03); // Enable rx address pipe1
 80022e6:	2103      	movs	r1, #3
 80022e8:	2002      	movs	r0, #2
 80022ea:	f000 f86d 	bl	80023c8 <NRF_WriteReg>
  NRF_WriteReg(NRF_REG_SETUP_AW, 0x03); // Address width 5 bytes
 80022ee:	2103      	movs	r1, #3
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f869 	bl	80023c8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_SETUP_RETR, 0x5F); // 1500us, 15 retrans
 80022f6:	215f      	movs	r1, #95	; 0x5f
 80022f8:	2004      	movs	r0, #4
 80022fa:	f000 f865 	bl	80023c8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_RF_CH, 0x60); // Set 96 channel
 80022fe:	2160      	movs	r1, #96	; 0x60
 8002300:	2005      	movs	r0, #5
 8002302:	f000 f861 	bl	80023c8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_RF_SETUP, 0x27); //0dBm, 250kbps
 8002306:	2127      	movs	r1, #39	; 0x27
 8002308:	2006      	movs	r0, #6
 800230a:	f000 f85d 	bl	80023c8 <NRF_WriteReg>
	NRF_ToggleFeatures();
 800230e:	f000 f8b7 	bl	8002480 <NRF_ToggleFeatures>
	NRF_WriteReg(NRF_REG_FEATURE, 0x07);
 8002312:	2107      	movs	r1, #7
 8002314:	201d      	movs	r0, #29
 8002316:	f000 f857 	bl	80023c8 <NRF_WriteReg>
	NRF_WriteReg(NRF_REG_DYNPD, 0x3F); //Enable dynamic payloads on all pipes
 800231a:	213f      	movs	r1, #63	; 0x3f
 800231c:	201c      	movs	r0, #28
 800231e:	f000 f853 	bl	80023c8 <NRF_WriteReg>

	NRF_WriteMBReg(NRF_REG_TX_ADDR, NRF_TX_Addr, 5);
 8002322:	2205      	movs	r2, #5
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	2010      	movs	r0, #16
 8002328:	f000 f8d4 	bl	80024d4 <NRF_WriteMBReg>
	NRF_WriteMBReg(NRF_REG_RX_ADDR_P0, NRF_TX_Addr, 5);
 800232c:	2205      	movs	r2, #5
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	200a      	movs	r0, #10
 8002332:	f000 f8cf 	bl	80024d4 <NRF_WriteMBReg>

	NRF_WriteMBReg(NRF_REG_RX_ADDR_P1, NRF_RX1_Addr, 5);
 8002336:	2205      	movs	r2, #5
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	200b      	movs	r0, #11
 800233c:	f000 f8ca 	bl	80024d4 <NRF_WriteMBReg>

	NRF_FlushRX();
 8002340:	f000 f8fa 	bl	8002538 <NRF_FlushRX>
	NRF_FlushTX();
 8002344:	f000 f91a 	bl	800257c <NRF_FlushTX>

	NRF_ClearTxBuff();
 8002348:	f000 fad8 	bl	80028fc <NRF_ClearTxBuff>
	NRF_ClearRxBuff();
 800234c:	f000 fabe 	bl	80028cc <NRF_ClearRxBuff>

  NRF_RX_Mode();
 8002350:	f000 f936 	bl	80025c0 <NRF_RX_Mode>
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40010800 	.word	0x40010800

08002360 <NRF_ReadReg>:

uint8_t NRF_ReadReg(uint8_t regAddr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af02      	add	r7, sp, #8
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
	uint8_t regValue = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 800236e:	2200      	movs	r2, #0
 8002370:	2108      	movs	r1, #8
 8002372:	4812      	ldr	r0, [pc, #72]	; (80023bc <NRF_ReadReg+0x5c>)
 8002374:	f001 ff20 	bl	80041b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &regAddr, &regValue, 1, 1000);
 8002378:	f107 020f 	add.w	r2, r7, #15
 800237c:	1df9      	adds	r1, r7, #7
 800237e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2301      	movs	r3, #1
 8002386:	480e      	ldr	r0, [pc, #56]	; (80023c0 <NRF_ReadReg+0x60>)
 8002388:	f004 fd59 	bl	8006e3e <HAL_SPI_TransmitReceive>

	if(regAddr != NRF_REG_STATUS)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2b07      	cmp	r3, #7
 8002390:	d009      	beq.n	80023a6 <NRF_ReadReg+0x46>
	{
		HAL_SPI_TransmitReceive(&hspi1, &NRF_CMD_NOP, &regValue,1,1000);
 8002392:	f107 020f 	add.w	r2, r7, #15
 8002396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2301      	movs	r3, #1
 800239e:	4909      	ldr	r1, [pc, #36]	; (80023c4 <NRF_ReadReg+0x64>)
 80023a0:	4807      	ldr	r0, [pc, #28]	; (80023c0 <NRF_ReadReg+0x60>)
 80023a2:	f004 fd4c 	bl	8006e3e <HAL_SPI_TransmitReceive>
	}
	NRF_CSN_HIGH;
 80023a6:	2201      	movs	r2, #1
 80023a8:	2108      	movs	r1, #8
 80023aa:	4804      	ldr	r0, [pc, #16]	; (80023bc <NRF_ReadReg+0x5c>)
 80023ac:	f001 ff04 	bl	80041b8 <HAL_GPIO_WritePin>

	return regValue;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40010800 	.word	0x40010800
 80023c0:	2000036c 	.word	0x2000036c
 80023c4:	20000000 	.word	0x20000000

080023c8 <NRF_WriteReg>:

void NRF_WriteReg(uint8_t regAddr, uint8_t regValue)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	460a      	mov	r2, r1
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = regAddr | W_REGISTER;
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f043 0320 	orr.w	r3, r3, #32
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	73fb      	strb	r3, [r7, #15]
	NRF_CSN_LOW;
 80023e2:	2200      	movs	r2, #0
 80023e4:	2108      	movs	r1, #8
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <NRF_WriteReg+0x54>)
 80023e8:	f001 fee6 	bl	80041b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000);
 80023ec:	f107 010f 	add.w	r1, r7, #15
 80023f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f4:	2201      	movs	r2, #1
 80023f6:	480a      	ldr	r0, [pc, #40]	; (8002420 <NRF_WriteReg+0x58>)
 80023f8:	f004 fbed 	bl	8006bd6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &regValue, 1, 1000);
 80023fc:	1db9      	adds	r1, r7, #6
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	2201      	movs	r2, #1
 8002404:	4806      	ldr	r0, [pc, #24]	; (8002420 <NRF_WriteReg+0x58>)
 8002406:	f004 fbe6 	bl	8006bd6 <HAL_SPI_Transmit>
	NRF_CSN_HIGH;
 800240a:	2201      	movs	r2, #1
 800240c:	2108      	movs	r1, #8
 800240e:	4803      	ldr	r0, [pc, #12]	; (800241c <NRF_WriteReg+0x54>)
 8002410:	f001 fed2 	bl	80041b8 <HAL_GPIO_WritePin>
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40010800 	.word	0x40010800
 8002420:	2000036c 	.word	0x2000036c

08002424 <NRF_ON>:

void NRF_ON(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
	uint8_t config = NRF_ReadReg(NRF_REG_CONFIG);
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff ff98 	bl	8002360 <NRF_ReadReg>
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]

	config |= (1 << PWR_UP);
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	71fb      	strb	r3, [r7, #7]

	NRF_WriteReg(NRF_REG_CONFIG, config);
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4619      	mov	r1, r3
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff ffc1 	bl	80023c8 <NRF_WriteReg>

	HAL_Delay(5);
 8002446:	2005      	movs	r0, #5
 8002448:	f000 fff0 	bl	800342c <HAL_Delay>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <NRF_OFF>:

void NRF_OFF(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
	uint8_t config = NRF_ReadReg(NRF_REG_CONFIG);
 800245a:	2000      	movs	r0, #0
 800245c:	f7ff ff80 	bl	8002360 <NRF_ReadReg>
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]

	config &= ~(1 << PWR_UP);
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f023 0302 	bic.w	r3, r3, #2
 800246a:	71fb      	strb	r3, [r7, #7]

	NRF_WriteReg(NRF_REG_CONFIG, config);
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4619      	mov	r1, r3
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff ffa9 	bl	80023c8 <NRF_WriteReg>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <NRF_ToggleFeatures>:

void NRF_ToggleFeatures(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8002486:	2350      	movs	r3, #80	; 0x50
 8002488:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 800248a:	2200      	movs	r2, #0
 800248c:	2108      	movs	r1, #8
 800248e:	480f      	ldr	r0, [pc, #60]	; (80024cc <NRF_ToggleFeatures+0x4c>)
 8002490:	f001 fe92 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, dt, 1,1000);
 8002494:	1d39      	adds	r1, r7, #4
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	2201      	movs	r2, #1
 800249c:	480c      	ldr	r0, [pc, #48]	; (80024d0 <NRF_ToggleFeatures+0x50>)
 800249e:	f004 fb9a 	bl	8006bd6 <HAL_SPI_Transmit>
  NRF_Delay(1);
 80024a2:	2001      	movs	r0, #1
 80024a4:	f000 ffc2 	bl	800342c <HAL_Delay>
  dt[0] = 0x73;
 80024a8:	2373      	movs	r3, #115	; 0x73
 80024aa:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1, dt, 1,1000);
 80024ac:	1d39      	adds	r1, r7, #4
 80024ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b2:	2201      	movs	r2, #1
 80024b4:	4806      	ldr	r0, [pc, #24]	; (80024d0 <NRF_ToggleFeatures+0x50>)
 80024b6:	f004 fb8e 	bl	8006bd6 <HAL_SPI_Transmit>

  NRF_CSN_HIGH;
 80024ba:	2201      	movs	r2, #1
 80024bc:	2108      	movs	r1, #8
 80024be:	4803      	ldr	r0, [pc, #12]	; (80024cc <NRF_ToggleFeatures+0x4c>)
 80024c0:	f001 fe7a 	bl	80041b8 <HAL_GPIO_WritePin>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40010800 	.word	0x40010800
 80024d0:	2000036c 	.word	0x2000036c

080024d4 <NRF_WriteMBReg>:
	HAL_SPI_Receive(&hspi1, pBuf, countBytes, 1000);
	NRF_CSN_HIGH;
}

void NRF_WriteMBReg(uint8_t regAddr, const uint8_t *pBuf, uint8_t countBytes)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
 80024e0:	4613      	mov	r3, r2
 80024e2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = regAddr | W_REGISTER;
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	f043 0320 	orr.w	r3, r3, #32
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	73fb      	strb	r3, [r7, #15]

	NRF_CSN_LOW;
 80024ee:	2200      	movs	r2, #0
 80024f0:	2108      	movs	r1, #8
 80024f2:	480f      	ldr	r0, [pc, #60]	; (8002530 <NRF_WriteMBReg+0x5c>)
 80024f4:	f001 fe60 	bl	80041b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000);
 80024f8:	f107 010f 	add.w	r1, r7, #15
 80024fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002500:	2201      	movs	r2, #1
 8002502:	480c      	ldr	r0, [pc, #48]	; (8002534 <NRF_WriteMBReg+0x60>)
 8002504:	f004 fb67 	bl	8006bd6 <HAL_SPI_Transmit>
	NRF_Delay(1);
 8002508:	2001      	movs	r0, #1
 800250a:	f000 ff8f 	bl	800342c <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, pBuf, countBytes, 1000);
 800250e:	79bb      	ldrb	r3, [r7, #6]
 8002510:	b29a      	uxth	r2, r3
 8002512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <NRF_WriteMBReg+0x60>)
 800251a:	f004 fb5c 	bl	8006bd6 <HAL_SPI_Transmit>
	NRF_CSN_HIGH;
 800251e:	2201      	movs	r2, #1
 8002520:	2108      	movs	r1, #8
 8002522:	4803      	ldr	r0, [pc, #12]	; (8002530 <NRF_WriteMBReg+0x5c>)
 8002524:	f001 fe48 	bl	80041b8 <HAL_GPIO_WritePin>
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40010800 	.word	0x40010800
 8002534:	2000036c 	.word	0x2000036c

08002538 <NRF_FlushRX>:

void NRF_FlushRX(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 800253e:	23e2      	movs	r3, #226	; 0xe2
 8002540:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8002542:	2200      	movs	r2, #0
 8002544:	2108      	movs	r1, #8
 8002546:	480b      	ldr	r0, [pc, #44]	; (8002574 <NRF_FlushRX+0x3c>)
 8002548:	f001 fe36 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 800254c:	1d39      	adds	r1, r7, #4
 800254e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002552:	2201      	movs	r2, #1
 8002554:	4808      	ldr	r0, [pc, #32]	; (8002578 <NRF_FlushRX+0x40>)
 8002556:	f004 fb3e 	bl	8006bd6 <HAL_SPI_Transmit>
  NRF_Delay(1);
 800255a:	2001      	movs	r0, #1
 800255c:	f000 ff66 	bl	800342c <HAL_Delay>

  NRF_CSN_HIGH;
 8002560:	2201      	movs	r2, #1
 8002562:	2108      	movs	r1, #8
 8002564:	4803      	ldr	r0, [pc, #12]	; (8002574 <NRF_FlushRX+0x3c>)
 8002566:	f001 fe27 	bl	80041b8 <HAL_GPIO_WritePin>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40010800 	.word	0x40010800
 8002578:	2000036c 	.word	0x2000036c

0800257c <NRF_FlushTX>:

void NRF_FlushTX(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8002582:	23e1      	movs	r3, #225	; 0xe1
 8002584:	713b      	strb	r3, [r7, #4]

  NRF_CSN_LOW;
 8002586:	2200      	movs	r2, #0
 8002588:	2108      	movs	r1, #8
 800258a:	480b      	ldr	r0, [pc, #44]	; (80025b8 <NRF_FlushTX+0x3c>)
 800258c:	f001 fe14 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8002590:	1d39      	adds	r1, r7, #4
 8002592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002596:	2201      	movs	r2, #1
 8002598:	4808      	ldr	r0, [pc, #32]	; (80025bc <NRF_FlushTX+0x40>)
 800259a:	f004 fb1c 	bl	8006bd6 <HAL_SPI_Transmit>
  NRF_Delay(1);
 800259e:	2001      	movs	r0, #1
 80025a0:	f000 ff44 	bl	800342c <HAL_Delay>

  NRF_CSN_HIGH;
 80025a4:	2201      	movs	r2, #1
 80025a6:	2108      	movs	r1, #8
 80025a8:	4803      	ldr	r0, [pc, #12]	; (80025b8 <NRF_FlushTX+0x3c>)
 80025aa:	f001 fe05 	bl	80041b8 <HAL_GPIO_WritePin>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40010800 	.word	0x40010800
 80025bc:	2000036c 	.word	0x2000036c

080025c0 <NRF_RX_Mode>:

void NRF_RX_Mode(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
  uint8_t regval = 0x00;
 80025c6:	2300      	movs	r3, #0
 80025c8:	71fb      	strb	r3, [r7, #7]
  regval = NRF_ReadReg(NRF_REG_CONFIG);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7ff fec8 	bl	8002360 <NRF_ReadReg>
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f043 0303 	orr.w	r3, r3, #3
 80025da:	71fb      	strb	r3, [r7, #7]

  NRF_WriteReg(NRF_REG_CONFIG, regval);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	4619      	mov	r1, r3
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff fef1 	bl	80023c8 <NRF_WriteReg>

  if(!(regval & _BV(PWR_UP)))
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <NRF_RX_Mode+0x36>
  	HAL_Delay(5);
 80025f0:	2005      	movs	r0, #5
 80025f2:	f000 ff1b 	bl	800342c <HAL_Delay>

  NRF_CE_HIGH;
 80025f6:	2201      	movs	r2, #1
 80025f8:	2110      	movs	r1, #16
 80025fa:	4808      	ldr	r0, [pc, #32]	; (800261c <NRF_RX_Mode+0x5c>)
 80025fc:	f001 fddc 	bl	80041b8 <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8002600:	2001      	movs	r0, #1
 8002602:	f000 ff13 	bl	800342c <HAL_Delay>

  NRF_FlushRX();
 8002606:	f7ff ff97 	bl	8002538 <NRF_FlushRX>
  NRF_FlushTX();
 800260a:	f7ff ffb7 	bl	800257c <NRF_FlushTX>

  HAL_Delay(5);
 800260e:	2005      	movs	r0, #5
 8002610:	f000 ff0c 	bl	800342c <HAL_Delay>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40010800 	.word	0x40010800

08002620 <NRF_TX_Mode>:

void NRF_TX_Mode(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
	NRF_CE_LOW;
 8002626:	2200      	movs	r2, #0
 8002628:	2110      	movs	r1, #16
 800262a:	481a      	ldr	r0, [pc, #104]	; (8002694 <NRF_TX_Mode+0x74>)
 800262c:	f001 fdc4 	bl	80041b8 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8002630:	200f      	movs	r0, #15
 8002632:	f000 fefb 	bl	800342c <HAL_Delay>

	uint8_t config = NRF_ReadReg(NRF_REG_CONFIG);
 8002636:	2000      	movs	r0, #0
 8002638:	f7ff fe92 	bl	8002360 <NRF_ReadReg>
 800263c:	4603      	mov	r3, r0
 800263e:	71fb      	strb	r3, [r7, #7]

	if(!(config & _BV(PWR_UP)))
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10b      	bne.n	8002662 <NRF_TX_Mode+0x42>
	{
		config |= _BV(PWR_UP);
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	71fb      	strb	r3, [r7, #7]
		NRF_WriteReg(NRF_REG_CONFIG, config);
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	4619      	mov	r1, r3
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff feb6 	bl	80023c8 <NRF_WriteReg>
		HAL_Delay(5); //1.5ms
 800265c:	2005      	movs	r0, #5
 800265e:	f000 fee5 	bl	800342c <HAL_Delay>
	}

	config = NRF_ReadReg(NRF_REG_CONFIG);
 8002662:	2000      	movs	r0, #0
 8002664:	f7ff fe7c 	bl	8002360 <NRF_ReadReg>
 8002668:	4603      	mov	r3, r0
 800266a:	71fb      	strb	r3, [r7, #7]
	config &= ~_BV(PRIM_RX);
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	71fb      	strb	r3, [r7, #7]
	NRF_WriteReg(NRF_REG_CONFIG, config);
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	4619      	mov	r1, r3
 8002678:	2000      	movs	r0, #0
 800267a:	f7ff fea5 	bl	80023c8 <NRF_WriteReg>

	NRF_FlushRX();
 800267e:	f7ff ff5b 	bl	8002538 <NRF_FlushRX>
	NRF_FlushTX();
 8002682:	f7ff ff7b 	bl	800257c <NRF_FlushTX>

	HAL_Delay(5);
 8002686:	2005      	movs	r0, #5
 8002688:	f000 fed0 	bl	800342c <HAL_Delay>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40010800 	.word	0x40010800

08002698 <NRF_SendPacket>:
	NRF_CSN_HIGH;
	NRF_WriteReg(NRF_REG_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
}

int8_t NRF_SendPacket(uint8_t *receiverAddress, uint8_t *buf, uint8_t writeType)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	71fb      	strb	r3, [r7, #7]
	if(receiverAddress != NULL)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <NRF_SendPacket+0x1e>
		NRF_WriteMBReg(NRF_REG_TX_ADDR, receiverAddress, 5);
 80026ac:	2205      	movs	r2, #5
 80026ae:	68f9      	ldr	r1, [r7, #12]
 80026b0:	2010      	movs	r0, #16
 80026b2:	f7ff ff0f 	bl	80024d4 <NRF_WriteMBReg>

	uint8_t dataLength = strlen(buf);
 80026b6:	68b8      	ldr	r0, [r7, #8]
 80026b8:	f7fd fd4a 	bl	8000150 <strlen>
 80026bc:	4603      	mov	r3, r0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	753b      	strb	r3, [r7, #20]
	if(dataLength > 29)
 80026c2:	7d3b      	ldrb	r3, [r7, #20]
 80026c4:	2b1d      	cmp	r3, #29
 80026c6:	d902      	bls.n	80026ce <NRF_SendPacket+0x36>
		return -2;
 80026c8:	f06f 0301 	mvn.w	r3, #1
 80026cc:	e069      	b.n	80027a2 <NRF_SendPacket+0x10a>

	NRF_CSN_LOW;
 80026ce:	2200      	movs	r2, #0
 80026d0:	2108      	movs	r1, #8
 80026d2:	4836      	ldr	r0, [pc, #216]	; (80027ac <NRF_SendPacket+0x114>)
 80026d4:	f001 fd70 	bl	80041b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeType, 1, 1000);
 80026d8:	1df9      	adds	r1, r7, #7
 80026da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026de:	2201      	movs	r2, #1
 80026e0:	4833      	ldr	r0, [pc, #204]	; (80027b0 <NRF_SendPacket+0x118>)
 80026e2:	f004 fa78 	bl	8006bd6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dataLength, 1, 1000);
 80026e6:	f107 0114 	add.w	r1, r7, #20
 80026ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ee:	2201      	movs	r2, #1
 80026f0:	482f      	ldr	r0, [pc, #188]	; (80027b0 <NRF_SendPacket+0x118>)
 80026f2:	f004 fa70 	bl	8006bd6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, dataLength, 1000);
 80026f6:	7d3b      	ldrb	r3, [r7, #20]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	482b      	ldr	r0, [pc, #172]	; (80027b0 <NRF_SendPacket+0x118>)
 8002702:	f004 fa68 	bl	8006bd6 <HAL_SPI_Transmit>

	bool en_dpl = NRF_ReadReg(NRF_REG_FEATURE) & _BV(EN_DPL);
 8002706:	201d      	movs	r0, #29
 8002708:	f7ff fe2a 	bl	8002360 <NRF_ReadReg>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf14      	ite	ne
 8002716:	2301      	movne	r3, #1
 8002718:	2300      	moveq	r3, #0
 800271a:	75fb      	strb	r3, [r7, #23]
	if(!en_dpl)
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	f083 0301 	eor.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <NRF_SendPacket+0xa8>
	{
		uint8_t blank = 32 - dataLength;
 8002728:	7d3b      	ldrb	r3, [r7, #20]
 800272a:	f1c3 0320 	rsb	r3, r3, #32
 800272e:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi1, &NRF_CMD_NOP, blank, 1000);
 8002730:	7dbb      	ldrb	r3, [r7, #22]
 8002732:	b29a      	uxth	r2, r3
 8002734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002738:	491e      	ldr	r1, [pc, #120]	; (80027b4 <NRF_SendPacket+0x11c>)
 800273a:	481d      	ldr	r0, [pc, #116]	; (80027b0 <NRF_SendPacket+0x118>)
 800273c:	f004 fa4b 	bl	8006bd6 <HAL_SPI_Transmit>
	}
	NRF_CSN_HIGH;
 8002740:	2201      	movs	r2, #1
 8002742:	2108      	movs	r1, #8
 8002744:	4819      	ldr	r0, [pc, #100]	; (80027ac <NRF_SendPacket+0x114>)
 8002746:	f001 fd37 	bl	80041b8 <HAL_GPIO_WritePin>

	NRF_CE_HIGH;
 800274a:	2201      	movs	r2, #1
 800274c:	2110      	movs	r1, #16
 800274e:	4817      	ldr	r0, [pc, #92]	; (80027ac <NRF_SendPacket+0x114>)
 8002750:	f001 fd32 	bl	80041b8 <HAL_GPIO_WritePin>
	DelayMicro(150);
 8002754:	2096      	movs	r0, #150	; 0x96
 8002756:	f000 f8e9 	bl	800292c <DelayMicro>
	//NRF_Delay(10);
	NRF_CE_LOW;
 800275a:	2200      	movs	r2, #0
 800275c:	2110      	movs	r1, #16
 800275e:	4813      	ldr	r0, [pc, #76]	; (80027ac <NRF_SendPacket+0x114>)
 8002760:	f001 fd2a 	bl	80041b8 <HAL_GPIO_WritePin>

	uint8_t status = NRF_ReadReg(NRF_REG_STATUS);
 8002764:	2007      	movs	r0, #7
 8002766:	f7ff fdfb 	bl	8002360 <NRF_ReadReg>
 800276a:	4603      	mov	r3, r0
 800276c:	757b      	strb	r3, [r7, #21]

	if(status & _BV(TX_DS))
 800276e:	7d7b      	ldrb	r3, [r7, #21]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <NRF_SendPacket+0xec>
	{
		NRF_WriteReg(NRF_REG_STATUS, 0x20);
 8002778:	2120      	movs	r1, #32
 800277a:	2007      	movs	r0, #7
 800277c:	f7ff fe24 	bl	80023c8 <NRF_WriteReg>
		return 1;
 8002780:	2301      	movs	r3, #1
 8002782:	e00e      	b.n	80027a2 <NRF_SendPacket+0x10a>
	}

	if(status & _BV(MAX_RT))
 8002784:	7d7b      	ldrb	r3, [r7, #21]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <NRF_SendPacket+0x106>
	{
		NRF_WriteReg(NRF_REG_STATUS, 0x10);
 800278e:	2110      	movs	r1, #16
 8002790:	2007      	movs	r0, #7
 8002792:	f7ff fe19 	bl	80023c8 <NRF_WriteReg>
		NRF_FlushTX();
 8002796:	f7ff fef1 	bl	800257c <NRF_FlushTX>
		return 0;
 800279a:	2300      	movs	r3, #0
 800279c:	e001      	b.n	80027a2 <NRF_SendPacket+0x10a>
	}

	return -1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40010800 	.word	0x40010800
 80027b0:	2000036c 	.word	0x2000036c
 80027b4:	20000000 	.word	0x20000000

080027b8 <NRF_SendMessage>:

int8_t NRF_SendMessage(const uint8_t *receiverAddress, const uint8_t *buf)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b08d      	sub	sp, #52	; 0x34
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	NRF_WriteMBReg(NRF_REG_TX_ADDR, receiverAddress, 5);
 80027c2:	2205      	movs	r2, #5
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	2010      	movs	r0, #16
 80027c8:	f7ff fe84 	bl	80024d4 <NRF_WriteMBReg>

	const int8_t dataLength = strlen(buf);
 80027cc:	6838      	ldr	r0, [r7, #0]
 80027ce:	f7fd fcbf 	bl	8000150 <strlen>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t amountPackets = ceil((double)dataLength / 25.0);
 80027d8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fe11 	bl	8000404 <__aeabi_i2d>
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <NRF_SendMessage+0x110>)
 80027e8:	f7fd ffa0 	bl	800072c <__aeabi_ddiv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	460c      	mov	r4, r1
 80027f0:	4618      	mov	r0, r3
 80027f2:	4621      	mov	r1, r4
 80027f4:	f006 fa98 	bl	8008d28 <ceil>
 80027f8:	4603      	mov	r3, r0
 80027fa:	460c      	mov	r4, r1
 80027fc:	4618      	mov	r0, r3
 80027fe:	4621      	mov	r1, r4
 8002800:	f7fe f942 	bl	8000a88 <__aeabi_d2uiz>
 8002804:	4603      	mov	r3, r0
 8002806:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	NRF_TX_Mode();
 800280a:	f7ff ff09 	bl	8002620 <NRF_TX_Mode>
	HAL_Delay(10);
 800280e:	200a      	movs	r0, #10
 8002810:	f000 fe0c 	bl	800342c <HAL_Delay>

	if(amountPackets == 1)
 8002814:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10f      	bne.n	800283c <NRF_SendMessage+0x84>
	{
		int8_t result = NRF_SendPacket(NULL, buf, W_TX_PAYLOAD);
 800281c:	22a0      	movs	r2, #160	; 0xa0
 800281e:	6839      	ldr	r1, [r7, #0]
 8002820:	2000      	movs	r0, #0
 8002822:	f7ff ff39 	bl	8002698 <NRF_SendPacket>
 8002826:	4603      	mov	r3, r0
 8002828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(result == -1)
 800282c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d13d      	bne.n	80028b2 <NRF_SendMessage+0xfa>
			return -1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	e040      	b.n	80028be <NRF_SendMessage+0x106>
	}
	else
	{
		for(uint8_t i = 0; i < amountPackets; ++i)
 800283c:	2300      	movs	r3, #0
 800283e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002842:	e030      	b.n	80028a6 <NRF_SendMessage+0xee>
		{
			uint8_t currentData[30] = {0};
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	221e      	movs	r2, #30
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f004 fd56 	bl	80072fe <memset>
			memcpy(currentData, buf + (25 * i), 25);
 8002852:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009a      	lsls	r2, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	461a      	mov	r2, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	1899      	adds	r1, r3, r2
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	2219      	movs	r2, #25
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fd3b 	bl	80072e8 <memcpy>

			int8_t result = NRF_SendPacket(NULL, currentData, W_TX_PAYLOAD);
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	22a0      	movs	r2, #160	; 0xa0
 8002878:	4619      	mov	r1, r3
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff ff0c 	bl	8002698 <NRF_SendPacket>
 8002880:	4603      	mov	r3, r0
 8002882:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

			if(result == -1)
 8002886:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288e:	d102      	bne.n	8002896 <NRF_SendMessage+0xde>
				return -1;
 8002890:	f04f 33ff 	mov.w	r3, #4294967295
 8002894:	e013      	b.n	80028be <NRF_SendMessage+0x106>

			//TODO: Уменьшить значение
			HAL_Delay(50);
 8002896:	2032      	movs	r0, #50	; 0x32
 8002898:	f000 fdc8 	bl	800342c <HAL_Delay>
		for(uint8_t i = 0; i < amountPackets; ++i)
 800289c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028a0:	3301      	adds	r3, #1
 80028a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80028a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80028aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d3c8      	bcc.n	8002844 <NRF_SendMessage+0x8c>
		}
	}

	HAL_Delay(10);
 80028b2:	200a      	movs	r0, #10
 80028b4:	f000 fdba 	bl	800342c <HAL_Delay>
	NRF_RX_Mode();
 80028b8:	f7ff fe82 	bl	80025c0 <NRF_RX_Mode>

	return 1;
 80028bc:	2301      	movs	r3, #1
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3734      	adds	r7, #52	; 0x34
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40390000 	.word	0x40390000

080028cc <NRF_ClearRxBuff>:
{
	return !(NRF_ReadReg(NRF_REG_FIFO_STATUS) & _BV(RX_EMPTY));
}

void NRF_ClearRxBuff(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
	for(int i = 0; i < NRF_rxBuffSize; ++i)
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	e007      	b.n	80028e8 <NRF_ClearRxBuff+0x1c>
		NRF_rxBuff[i] = 0;
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <NRF_ClearRxBuff+0x2c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NRF_rxBuffSize; ++i)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3301      	adds	r3, #1
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b1f      	cmp	r3, #31
 80028ec:	ddf4      	ble.n	80028d8 <NRF_ClearRxBuff+0xc>
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	200002b0 	.word	0x200002b0

080028fc <NRF_ClearTxBuff>:

void NRF_ClearTxBuff(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
	for(int i = 0; i < NRF_txBuffSize; ++i)
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	e007      	b.n	8002918 <NRF_ClearTxBuff+0x1c>
			NRF_txBuff[i] = 0;
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <NRF_ClearTxBuff+0x2c>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NRF_txBuffSize; ++i)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3301      	adds	r3, #1
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b1f      	cmp	r3, #31
 800291c:	ddf4      	ble.n	8002908 <NRF_ClearTxBuff+0xc>
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	20000338 	.word	0x20000338

0800292c <DelayMicro>:
*/

}

__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  micros *= (SystemCoreClock / 1000000) / 9;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <DelayMicro+0x34>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <DelayMicro+0x38>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0ddb      	lsrs	r3, r3, #23
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	607b      	str	r3, [r7, #4]

  /* Wait till done */

  while (micros--) ;
 8002948:	bf00      	nop
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1fa      	bne.n	800294a <DelayMicro+0x1e>

}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2000000c 	.word	0x2000000c
 8002964:	ee9bfab5 	.word	0xee9bfab5

08002968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800296e:	f000 fcfb 	bl	8003368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002972:	f000 f8d3 	bl	8002b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002976:	f7fe fdcf 	bl	8001518 <MX_GPIO_Init>
  MX_ADC1_Init();
 800297a:	f7fe fd53 	bl	8001424 <MX_ADC1_Init>
  MX_I2C1_Init();
 800297e:	f7fe fe8b 	bl	8001698 <MX_I2C1_Init>
  MX_RTC_Init();
 8002982:	f000 fadb 	bl	8002f3c <MX_RTC_Init>
  MX_SPI1_Init();
 8002986:	f000 fb71 	bl	800306c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //StationStatus(Start);

  int BME280_InitStatus = BME280_Init();
 800298a:	f7ff fc51 	bl	8002230 <BME280_Init>
 800298e:	61f8      	str	r0, [r7, #28]

  if(BME280_InitStatus == BME280_INIT_FAIL)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d104      	bne.n	80029a0 <main+0x38>
  {
  	StationStatus(Error);
 8002996:	2003      	movs	r0, #3
 8002998:	f000 f9d6 	bl	8002d48 <StationStatus>
  	NVIC_SystemReset();
 800299c:	f7fe fee8 	bl	8001770 <__NVIC_SystemReset>
  }

  NRF_ON();
 80029a0:	f7ff fd40 	bl	8002424 <NRF_ON>
  NRF_Init(serverAddr, ownAddr);
 80029a4:	4956      	ldr	r1, [pc, #344]	; (8002b00 <main+0x198>)
 80029a6:	4857      	ldr	r0, [pc, #348]	; (8002b04 <main+0x19c>)
 80029a8:	f7ff fc88 	bl	80022bc <NRF_Init>

  uint8_t status = NRF_ReadReg(NRF_REG_STATUS);
 80029ac:	2007      	movs	r0, #7
 80029ae:	f7ff fcd7 	bl	8002360 <NRF_ReadReg>
 80029b2:	4603      	mov	r3, r0
 80029b4:	76fb      	strb	r3, [r7, #27]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	StationStatus(Working);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f000 f9c6 	bl	8002d48 <StationStatus>

  	float v = getBatteryVoltage() + 0.1;
 80029bc:	f000 f90a 	bl	8002bd4 <getBatteryVoltage>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fd30 	bl	8000428 <__aeabi_f2d>
 80029c8:	a349      	add	r3, pc, #292	; (adr r3, 8002af0 <main+0x188>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f7fd fbcd 	bl	800016c <__adddf3>
 80029d2:	4603      	mov	r3, r0
 80029d4:	460c      	mov	r4, r1
 80029d6:	4618      	mov	r0, r3
 80029d8:	4621      	mov	r1, r4
 80029da:	f7fe f875 	bl	8000ac8 <__aeabi_d2f>
 80029de:	4603      	mov	r3, r0
 80029e0:	617b      	str	r3, [r7, #20]
	  uint8_t currentBatteryVoltage = (uint8_t)(v * 10);
 80029e2:	4949      	ldr	r1, [pc, #292]	; (8002b08 <main+0x1a0>)
 80029e4:	6978      	ldr	r0, [r7, #20]
 80029e6:	f7fe f9cd 	bl	8000d84 <__aeabi_fmul>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fb3f 	bl	8001070 <__aeabi_f2uiz>
 80029f2:	4603      	mov	r3, r0
 80029f4:	74fb      	strb	r3, [r7, #19]

	  int8_t temperature = (int8_t)BME280_ReadTemperature();
 80029f6:	f7ff f955 	bl	8001ca4 <BME280_ReadTemperature>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fb11 	bl	8001024 <__aeabi_f2iz>
 8002a02:	4603      	mov	r3, r0
 8002a04:	74bb      	strb	r3, [r7, #18]
	  uint8_t humidity = (uint8_t)BME280_ReadHumidity();
 8002a06:	f7ff fb99 	bl	800213c <BME280_ReadHumidity>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fb2f 	bl	8001070 <__aeabi_f2uiz>
 8002a12:	4603      	mov	r3, r0
 8002a14:	747b      	strb	r3, [r7, #17]
	  uint16_t pressure = (uint16_t)(BME280_ReadPressure() * 0.00075);
 8002a16:	f7ff f997 	bl	8001d48 <BME280_ReadPressure>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fd03 	bl	8000428 <__aeabi_f2d>
 8002a22:	a335      	add	r3, pc, #212	; (adr r3, 8002af8 <main+0x190>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fd fd56 	bl	80004d8 <__aeabi_dmul>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	4618      	mov	r0, r3
 8002a32:	4621      	mov	r1, r4
 8002a34:	f7fe f828 	bl	8000a88 <__aeabi_d2uiz>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	81fb      	strh	r3, [r7, #14]

	  uint8_t buf[] = {0xff, ownNum, 0x03, temperature, humidity, (pressure >> 8) & 0xff, pressure & 0xff, currentBatteryVoltage, '\n'};
 8002a3c:	23ff      	movs	r3, #255	; 0xff
 8002a3e:	713b      	strb	r3, [r7, #4]
 8002a40:	2303      	movs	r3, #3
 8002a42:	717b      	strb	r3, [r7, #5]
 8002a44:	2303      	movs	r3, #3
 8002a46:	71bb      	strb	r3, [r7, #6]
 8002a48:	7cbb      	ldrb	r3, [r7, #18]
 8002a4a:	71fb      	strb	r3, [r7, #7]
 8002a4c:	7c7b      	ldrb	r3, [r7, #17]
 8002a4e:	723b      	strb	r3, [r7, #8]
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	727b      	strb	r3, [r7, #9]
 8002a5a:	89fb      	ldrh	r3, [r7, #14]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	72bb      	strb	r3, [r7, #10]
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	72fb      	strb	r3, [r7, #11]
 8002a64:	230a      	movs	r3, #10
 8002a66:	733b      	strb	r3, [r7, #12]

	  uint8_t result = -10;
 8002a68:	23f6      	movs	r3, #246	; 0xf6
 8002a6a:	737b      	strb	r3, [r7, #13]
	  result = NRF_SendMessage(serverAddr, buf);
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4824      	ldr	r0, [pc, #144]	; (8002b04 <main+0x19c>)
 8002a72:	f7ff fea1 	bl	80027b8 <NRF_SendMessage>
 8002a76:	4603      	mov	r3, r0
 8002a78:	737b      	strb	r3, [r7, #13]

	  if(result != 1)
 8002a7a:	7b7b      	ldrb	r3, [r7, #13]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d002      	beq.n	8002a86 <main+0x11e>
	  {
	  	StationStatus(Warning);
 8002a80:	2004      	movs	r0, #4
 8002a82:	f000 f961 	bl	8002d48 <StationStatus>
	  }

	  NRF_OFF();
 8002a86:	f7ff fce5 	bl	8002454 <NRF_OFF>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2110      	movs	r1, #16
 8002a8e:	481f      	ldr	r0, [pc, #124]	; (8002b0c <main+0x1a4>)
 8002a90:	f001 fb92 	bl	80041b8 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sTime.Hours = 0;
 8002a94:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <main+0x1a8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 0;
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <main+0x1a8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 0;
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <main+0x1a8>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	709a      	strb	r2, [r3, #2]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4919      	ldr	r1, [pc, #100]	; (8002b10 <main+0x1a8>)
 8002aaa:	481a      	ldr	r0, [pc, #104]	; (8002b14 <main+0x1ac>)
 8002aac:	f003 f9a6 	bl	8005dfc <HAL_RTC_SetTime>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <main+0x152>
	  {
	  	Error_Handler();
 8002ab6:	f000 fa3b 	bl	8002f30 <Error_Handler>
	  }

	  sAlarm.AlarmTime.Hours = 1;
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <main+0x1b0>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = 0;
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <main+0x1b0>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = 0;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <main+0x1b0>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	709a      	strb	r2, [r3, #2]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <main+0x1b0>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
	  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4910      	ldr	r1, [pc, #64]	; (8002b18 <main+0x1b0>)
 8002ad6:	480f      	ldr	r0, [pc, #60]	; (8002b14 <main+0x1ac>)
 8002ad8:	f003 fbb6 	bl	8006248 <HAL_RTC_SetAlarm>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <main+0x17e>
	  {
	  	Error_Handler();
 8002ae2:	f000 fa25 	bl	8002f30 <Error_Handler>
	  //StationStatus(Sleep);

	  //HAL_Delay(3000);
	  //StopMode();
	  //SleepMode();
	  Standby();
 8002ae6:	f000 f9ff 	bl	8002ee8 <Standby>
  {
 8002aea:	e764      	b.n	80029b6 <main+0x4e>
 8002aec:	f3af 8000 	nop.w
 8002af0:	9999999a 	.word	0x9999999a
 8002af4:	3fb99999 	.word	0x3fb99999
 8002af8:	bc6a7efa 	.word	0xbc6a7efa
 8002afc:	3f489374 	.word	0x3f489374
 8002b00:	08008e70 	.word	0x08008e70
 8002b04:	08008e68 	.word	0x08008e68
 8002b08:	41200000 	.word	0x41200000
 8002b0c:	40010800 	.word	0x40010800
 8002b10:	20000208 	.word	0x20000208
 8002b14:	20000358 	.word	0x20000358
 8002b18:	2000020c 	.word	0x2000020c

08002b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b094      	sub	sp, #80	; 0x50
 8002b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b26:	2228      	movs	r2, #40	; 0x28
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 fbe7 	bl	80072fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002b4c:	230a      	movs	r3, #10
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b50:	2301      	movs	r3, #1
 8002b52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b54:	2310      	movs	r3, #16
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002b60:	2300      	movs	r3, #0
 8002b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002b64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fb20 	bl	80051b4 <HAL_RCC_OscConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002b7a:	f000 f9d9 	bl	8002f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b7e:	230f      	movs	r3, #15
 8002b80:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b82:	2302      	movs	r3, #2
 8002b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 fd8a 	bl	80056b4 <HAL_RCC_ClockConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002ba6:	f000 f9c3 	bl	8002f30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002baa:	2303      	movs	r3, #3
 8002bac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002bb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f002 ff15 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002bc8:	f000 f9b2 	bl	8002f30 <Error_Handler>
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3750      	adds	r7, #80	; 0x50
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <getBatteryVoltage>:
//const float r1 = 42800; //const float r2 = 89000;
/* USER CODE BEGIN 4 */
float getBatteryVoltage()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
	const float r1 = 47700;
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <getBatteryVoltage+0x7c>)
 8002bdc:	61fb      	str	r3, [r7, #28]
	const float r2 = 91000;
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <getBatteryVoltage+0x80>)
 8002be0:	61bb      	str	r3, [r7, #24]

	const float ADC_ReferenceVoltage = 3.3;
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <getBatteryVoltage+0x84>)
 8002be4:	617b      	str	r3, [r7, #20]
	const float ADC_Resolution = 4095;
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <getBatteryVoltage+0x88>)
 8002be8:	613b      	str	r3, [r7, #16]


	HAL_ADC_Start(&hadc1);
 8002bea:	481d      	ldr	r0, [pc, #116]	; (8002c60 <getBatteryVoltage+0x8c>)
 8002bec:	f000 fd18 	bl	8003620 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8002bf0:	2164      	movs	r1, #100	; 0x64
 8002bf2:	481b      	ldr	r0, [pc, #108]	; (8002c60 <getBatteryVoltage+0x8c>)
 8002bf4:	f000 fdee 	bl	80037d4 <HAL_ADC_PollForConversion>
	uint32_t ADC_Value = HAL_ADC_GetValue(&hadc1);
 8002bf8:	4819      	ldr	r0, [pc, #100]	; (8002c60 <getBatteryVoltage+0x8c>)
 8002bfa:	f000 fee5 	bl	80039c8 <HAL_ADC_GetValue>
 8002bfe:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 8002c00:	4817      	ldr	r0, [pc, #92]	; (8002c60 <getBatteryVoltage+0x8c>)
 8002c02:	f000 fdbb 	bl	800377c <HAL_ADC_Stop>

	float ADC_Voltage = (ADC_Value / ADC_Resolution) * ADC_ReferenceVoltage; //0..Reference value
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7fe f864 	bl	8000cd4 <__aeabi_ui2f>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	6939      	ldr	r1, [r7, #16]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe f96b 	bl	8000eec <__aeabi_fdiv>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4619      	mov	r1, r3
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7fe f8b2 	bl	8000d84 <__aeabi_fmul>
 8002c20:	4603      	mov	r3, r0
 8002c22:	60bb      	str	r3, [r7, #8]

	float realVoltage = ADC_Voltage * (r1 + r2) / r2;
 8002c24:	69b9      	ldr	r1, [r7, #24]
 8002c26:	69f8      	ldr	r0, [r7, #28]
 8002c28:	f7fd ffa4 	bl	8000b74 <__addsf3>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe f8a7 	bl	8000d84 <__aeabi_fmul>
 8002c36:	4603      	mov	r3, r0
 8002c38:	69b9      	ldr	r1, [r7, #24]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe f956 	bl	8000eec <__aeabi_fdiv>
 8002c40:	4603      	mov	r3, r0
 8002c42:	607b      	str	r3, [r7, #4]

	return realVoltage;
 8002c44:	687b      	ldr	r3, [r7, #4]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	473a5400 	.word	0x473a5400
 8002c54:	47b1bc00 	.word	0x47b1bc00
 8002c58:	40533333 	.word	0x40533333
 8002c5c:	457ff000 	.word	0x457ff000
 8002c60:	20000220 	.word	0x20000220

08002c64 <HAL_GPIO_EXTI_Callback>:
	//HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
	//CDC_Transmit_FS(str, strlen(str));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	80fb      	strh	r3, [r7, #6]
	if(HAL_GetTick() - lastPressed > 300 && GPIO_Pin == LedsControlButton_Pin)
 8002c6e:	f000 fbd3 	bl	8003418 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002c7e:	d959      	bls.n	8002d34 <HAL_GPIO_EXTI_Callback+0xd0>
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d156      	bne.n	8002d34 <HAL_GPIO_EXTI_Callback+0xd0>
	{
		lastPressed = HAL_GetTick();
 8002c86:	f000 fbc7 	bl	8003418 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002c8e:	601a      	str	r2, [r3, #0]

		if(ledsEnable == true)
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_GPIO_EXTI_Callback+0x60>
		{
			GreenLedLow;
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c9e:	4829      	ldr	r0, [pc, #164]	; (8002d44 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002ca0:	f001 fa8a 	bl	80041b8 <HAL_GPIO_WritePin>
			YellowLedLow;
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002caa:	4826      	ldr	r0, [pc, #152]	; (8002d44 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002cac:	f001 fa84 	bl	80041b8 <HAL_GPIO_WritePin>
			RedLedLow;
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cb6:	4823      	ldr	r0, [pc, #140]	; (8002d44 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002cb8:	f001 fa7e 	bl	80041b8 <HAL_GPIO_WritePin>

			ledsEnable = false;
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e033      	b.n	8002d2c <HAL_GPIO_EXTI_Callback+0xc8>
		}
		else
		{
			ledsEnable = true;
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]

			GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cca:	f107 0308 	add.w	r3, r7, #8
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]

			HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cde:	4819      	ldr	r0, [pc, #100]	; (8002d44 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002ce0:	f001 fa6a 	bl	80041b8 <HAL_GPIO_WritePin>
			GPIO_InitStruct.Pin = RedLed_Pin;
 8002ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ce8:	60bb      	str	r3, [r7, #8]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cea:	2301      	movs	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	617b      	str	r3, [r7, #20]
			HAL_GPIO_Init(RedLed_GPIO_Port, &GPIO_InitStruct);
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4811      	ldr	r0, [pc, #68]	; (8002d44 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002cfe:	f001 f901 	bl	8003f04 <HAL_GPIO_Init>

		  HAL_GPIO_WritePin(GPIOB, YellowLed_Pin | GreenLed_Pin, GPIO_PIN_RESET);
 8002d02:	2200      	movs	r2, #0
 8002d04:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002d08:	480e      	ldr	r0, [pc, #56]	; (8002d44 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002d0a:	f001 fa55 	bl	80041b8 <HAL_GPIO_WritePin>
			GPIO_InitStruct.Pin = YellowLed_Pin | GreenLed_Pin;
 8002d0e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d12:	60bb      	str	r3, [r7, #8]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	617b      	str	r3, [r7, #20]
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	4619      	mov	r1, r3
 8002d26:	4807      	ldr	r0, [pc, #28]	; (8002d44 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002d28:	f001 f8ec 	bl	8003f04 <HAL_GPIO_Init>
		}

		StationStatus(-1);
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f000 f80a 	bl	8002d48 <StationStatus>
	}
}
 8002d34:	bf00      	nop
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000204 	.word	0x20000204
 8002d40:	20000008 	.word	0x20000008
 8002d44:	40010c00 	.word	0x40010c00

08002d48 <StationStatus>:

void StationStatus(int newStationStatus)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	if(newStationStatus != -1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d002      	beq.n	8002d5e <StationStatus+0x16>
		currentStationStatus = newStationStatus;
 8002d58:	4a60      	ldr	r2, [pc, #384]	; (8002edc <StationStatus+0x194>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6013      	str	r3, [r2, #0]

	if(ledsEnable)
 8002d5e:	4b60      	ldr	r3, [pc, #384]	; (8002ee0 <StationStatus+0x198>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80b5 	beq.w	8002ed2 <StationStatus+0x18a>
	{
		GreenLedLow;
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d6e:	485d      	ldr	r0, [pc, #372]	; (8002ee4 <StationStatus+0x19c>)
 8002d70:	f001 fa22 	bl	80041b8 <HAL_GPIO_WritePin>
		YellowLedLow;
 8002d74:	2200      	movs	r2, #0
 8002d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d7a:	485a      	ldr	r0, [pc, #360]	; (8002ee4 <StationStatus+0x19c>)
 8002d7c:	f001 fa1c 	bl	80041b8 <HAL_GPIO_WritePin>
		RedLedLow;
 8002d80:	2200      	movs	r2, #0
 8002d82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d86:	4857      	ldr	r0, [pc, #348]	; (8002ee4 <StationStatus+0x19c>)
 8002d88:	f001 fa16 	bl	80041b8 <HAL_GPIO_WritePin>

		switch(currentStationStatus)
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <StationStatus+0x194>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	f200 809e 	bhi.w	8002ed2 <StationStatus+0x18a>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <StationStatus+0x54>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002db5 	.word	0x08002db5
 8002da0:	08002e1d 	.word	0x08002e1d
 8002da4:	08002e2b 	.word	0x08002e2b
 8002da8:	08002e39 	.word	0x08002e39
 8002dac:	08002e71 	.word	0x08002e71
 8002db0:	08002ea9 	.word	0x08002ea9
		{
			case Start:
				for(int i = 0; i < 5; ++i)
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e02c      	b.n	8002e14 <StationStatus+0xcc>
				{
					GreenLedLow;
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dc0:	4848      	ldr	r0, [pc, #288]	; (8002ee4 <StationStatus+0x19c>)
 8002dc2:	f001 f9f9 	bl	80041b8 <HAL_GPIO_WritePin>
					YellowLedLow;
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dcc:	4845      	ldr	r0, [pc, #276]	; (8002ee4 <StationStatus+0x19c>)
 8002dce:	f001 f9f3 	bl	80041b8 <HAL_GPIO_WritePin>
					RedLedLow;
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dd8:	4842      	ldr	r0, [pc, #264]	; (8002ee4 <StationStatus+0x19c>)
 8002dda:	f001 f9ed 	bl	80041b8 <HAL_GPIO_WritePin>

					HAL_Delay(100);
 8002dde:	2064      	movs	r0, #100	; 0x64
 8002de0:	f000 fb24 	bl	800342c <HAL_Delay>

					GreenLedHigh;
 8002de4:	2201      	movs	r2, #1
 8002de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dea:	483e      	ldr	r0, [pc, #248]	; (8002ee4 <StationStatus+0x19c>)
 8002dec:	f001 f9e4 	bl	80041b8 <HAL_GPIO_WritePin>
					YellowLedHigh;
 8002df0:	2201      	movs	r2, #1
 8002df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df6:	483b      	ldr	r0, [pc, #236]	; (8002ee4 <StationStatus+0x19c>)
 8002df8:	f001 f9de 	bl	80041b8 <HAL_GPIO_WritePin>
					RedLedHigh;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e02:	4838      	ldr	r0, [pc, #224]	; (8002ee4 <StationStatus+0x19c>)
 8002e04:	f001 f9d8 	bl	80041b8 <HAL_GPIO_WritePin>

					HAL_Delay(100);
 8002e08:	2064      	movs	r0, #100	; 0x64
 8002e0a:	f000 fb0f 	bl	800342c <HAL_Delay>
				for(int i = 0; i < 5; ++i)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	ddcf      	ble.n	8002dba <StationStatus+0x72>
				}
				break;
 8002e1a:	e05a      	b.n	8002ed2 <StationStatus+0x18a>

			case Working:
				YellowLedHigh;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e22:	4830      	ldr	r0, [pc, #192]	; (8002ee4 <StationStatus+0x19c>)
 8002e24:	f001 f9c8 	bl	80041b8 <HAL_GPIO_WritePin>
				break;
 8002e28:	e053      	b.n	8002ed2 <StationStatus+0x18a>

			case Sleep:
				GreenLedHigh;
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e30:	482c      	ldr	r0, [pc, #176]	; (8002ee4 <StationStatus+0x19c>)
 8002e32:	f001 f9c1 	bl	80041b8 <HAL_GPIO_WritePin>
				break;
 8002e36:	e04c      	b.n	8002ed2 <StationStatus+0x18a>

			case Error:
				for(int i = 0; i < 10; ++i)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e014      	b.n	8002e68 <StationStatus+0x120>
				{
					RedLedHigh;
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e44:	4827      	ldr	r0, [pc, #156]	; (8002ee4 <StationStatus+0x19c>)
 8002e46:	f001 f9b7 	bl	80041b8 <HAL_GPIO_WritePin>
					HAL_Delay(100);
 8002e4a:	2064      	movs	r0, #100	; 0x64
 8002e4c:	f000 faee 	bl	800342c <HAL_Delay>
					RedLedLow;
 8002e50:	2200      	movs	r2, #0
 8002e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e56:	4823      	ldr	r0, [pc, #140]	; (8002ee4 <StationStatus+0x19c>)
 8002e58:	f001 f9ae 	bl	80041b8 <HAL_GPIO_WritePin>
					HAL_Delay(100);
 8002e5c:	2064      	movs	r0, #100	; 0x64
 8002e5e:	f000 fae5 	bl	800342c <HAL_Delay>
				for(int i = 0; i < 10; ++i)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	3301      	adds	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b09      	cmp	r3, #9
 8002e6c:	dde7      	ble.n	8002e3e <StationStatus+0xf6>
				}
				break;
 8002e6e:	e030      	b.n	8002ed2 <StationStatus+0x18a>

			case Warning:
				for(int i = 0; i < 5; ++i)
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	e014      	b.n	8002ea0 <StationStatus+0x158>
				{
					YellowLedHigh;
 8002e76:	2201      	movs	r2, #1
 8002e78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e7c:	4819      	ldr	r0, [pc, #100]	; (8002ee4 <StationStatus+0x19c>)
 8002e7e:	f001 f99b 	bl	80041b8 <HAL_GPIO_WritePin>
					HAL_Delay(100);
 8002e82:	2064      	movs	r0, #100	; 0x64
 8002e84:	f000 fad2 	bl	800342c <HAL_Delay>
					YellowLedLow;
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e8e:	4815      	ldr	r0, [pc, #84]	; (8002ee4 <StationStatus+0x19c>)
 8002e90:	f001 f992 	bl	80041b8 <HAL_GPIO_WritePin>
					HAL_Delay(100);
 8002e94:	2064      	movs	r0, #100	; 0x64
 8002e96:	f000 fac9 	bl	800342c <HAL_Delay>
				for(int i = 0; i < 5; ++i)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	dde7      	ble.n	8002e76 <StationStatus+0x12e>
				}
				break;
 8002ea6:	e014      	b.n	8002ed2 <StationStatus+0x18a>

			case OperationGood:
				GreenLedHigh;
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eae:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <StationStatus+0x19c>)
 8002eb0:	f001 f982 	bl	80041b8 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8002eb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002eb8:	f000 fab8 	bl	800342c <HAL_Delay>
				GreenLedLow;
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ec2:	4808      	ldr	r0, [pc, #32]	; (8002ee4 <StationStatus+0x19c>)
 8002ec4:	f001 f978 	bl	80041b8 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8002ec8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ecc:	f000 faae 	bl	800342c <HAL_Delay>
				break;
 8002ed0:	bf00      	nop
		}
	}
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	20000008 	.word	0x20000008
 8002ee4:	40010c00 	.word	0x40010c00

08002ee8 <Standby>:
    //Resume Tick interrupt if disabled prior to sleep mode entry
    HAL_ResumeTick();
}

void Standby()
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
    //Before we can access to every register of the PWR peripheral we must enable it
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <Standby+0x40>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <Standby+0x40>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	61d3      	str	r3, [r2, #28]
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <Standby+0x40>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]

    //Disable WKUP pin
    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8002f06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f0a:	f002 f91f 	bl	800514c <HAL_PWR_DisableWakeUpPin>

    //Clear PWR wake up Flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <Standby+0x44>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a06      	ldr	r2, [pc, #24]	; (8002f2c <Standby+0x44>)
 8002f14:	f043 0304 	orr.w	r3, r3, #4
 8002f18:	6013      	str	r3, [r2, #0]

    //Enable WKUP pin
    //HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);

    //Enter STANDBY mode
    HAL_PWR_EnterSTANDBYMode();
 8002f1a:	f002 f933 	bl	8005184 <HAL_PWR_EnterSTANDBYMode>

    //End of program :)
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000

08002f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	while(1)
	{
		StationStatus(Error);
 8002f34:	2003      	movs	r0, #3
 8002f36:	f7ff ff07 	bl	8002d48 <StationStatus>
 8002f3a:	e7fb      	b.n	8002f34 <Error_Handler+0x4>

08002f3c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	2100      	movs	r1, #0
 8002f48:	460a      	mov	r2, r1
 8002f4a:	801a      	strh	r2, [r3, #0]
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8002f54:	463b      	mov	r3, r7
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <MX_RTC_Init+0xc0>)
 8002f5e:	4a28      	ldr	r2, [pc, #160]	; (8003000 <MX_RTC_Init+0xc4>)
 8002f60:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <MX_RTC_Init+0xc0>)
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <MX_RTC_Init+0xc0>)
 8002f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f70:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f72:	4822      	ldr	r0, [pc, #136]	; (8002ffc <MX_RTC_Init+0xc0>)
 8002f74:	f002 feac 	bl	8005cd0 <HAL_RTC_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002f7e:	f7ff ffd7 	bl	8002f30 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002f8e:	f107 030c 	add.w	r3, r7, #12
 8002f92:	2200      	movs	r2, #0
 8002f94:	4619      	mov	r1, r3
 8002f96:	4819      	ldr	r0, [pc, #100]	; (8002ffc <MX_RTC_Init+0xc0>)
 8002f98:	f002 ff30 	bl	8005dfc <HAL_RTC_SetTime>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8002fa2:	f7ff ffc5 	bl	8002f30 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002faa:	2301      	movs	r3, #1
 8002fac:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 3;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 20;
 8002fb2:	2314      	movs	r3, #20
 8002fb4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	2200      	movs	r2, #0
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	480f      	ldr	r0, [pc, #60]	; (8002ffc <MX_RTC_Init+0xc0>)
 8002fc0:	f003 f88c 	bl	80060dc <HAL_RTC_SetDate>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002fca:	f7ff ffb1 	bl	8002f30 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002fde:	463b      	mov	r3, r7
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <MX_RTC_Init+0xc0>)
 8002fe6:	f003 f9c9 	bl	800637c <HAL_RTC_SetAlarm_IT>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8002ff0:	f7ff ff9e 	bl	8002f30 <Error_Handler>
  }

}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000358 	.word	0x20000358
 8003000:	40002800 	.word	0x40002800

08003004 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a13      	ldr	r2, [pc, #76]	; (8003060 <HAL_RTC_MspInit+0x5c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d120      	bne.n	8003058 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003016:	f002 f88d 	bl	8005134 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_RTC_MspInit+0x60>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <HAL_RTC_MspInit+0x60>)
 8003020:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003024:	61d3      	str	r3, [r2, #28]
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_RTC_MspInit+0x60>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_RTC_MspInit+0x64>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	2100      	movs	r1, #0
 800303c:	2003      	movs	r0, #3
 800303e:	f000 ff2a 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003042:	2003      	movs	r0, #3
 8003044:	f000 ff43 	bl	8003ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	2100      	movs	r1, #0
 800304c:	2029      	movs	r0, #41	; 0x29
 800304e:	f000 ff22 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003052:	2029      	movs	r0, #41	; 0x29
 8003054:	f000 ff3b 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40002800 	.word	0x40002800
 8003064:	40021000 	.word	0x40021000
 8003068:	4242043c 	.word	0x4242043c

0800306c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <MX_SPI1_Init+0x64>)
 8003072:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <MX_SPI1_Init+0x68>)
 8003074:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <MX_SPI1_Init+0x64>)
 8003078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800307c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <MX_SPI1_Init+0x64>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <MX_SPI1_Init+0x64>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <MX_SPI1_Init+0x64>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <MX_SPI1_Init+0x64>)
 8003092:	2200      	movs	r2, #0
 8003094:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <MX_SPI1_Init+0x64>)
 8003098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800309c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <MX_SPI1_Init+0x64>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <MX_SPI1_Init+0x64>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <MX_SPI1_Init+0x64>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <MX_SPI1_Init+0x64>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <MX_SPI1_Init+0x64>)
 80030b8:	220a      	movs	r2, #10
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <MX_SPI1_Init+0x64>)
 80030be:	f003 fd29 	bl	8006b14 <HAL_SPI_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030c8:	f7ff ff32 	bl	8002f30 <Error_Handler>
  }

}
 80030cc:	bf00      	nop
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	2000036c 	.word	0x2000036c
 80030d4:	40013000 	.word	0x40013000

080030d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_SPI_MspInit+0x88>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d12f      	bne.n	8003158 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <HAL_SPI_MspInit+0x8c>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_SPI_MspInit+0x8c>)
 80030fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003102:	6193      	str	r3, [r2, #24]
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_SPI_MspInit+0x8c>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_SPI_MspInit+0x8c>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	4a13      	ldr	r2, [pc, #76]	; (8003164 <HAL_SPI_MspInit+0x8c>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6193      	str	r3, [r2, #24]
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_SPI_MspInit+0x8c>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003128:	23a0      	movs	r3, #160	; 0xa0
 800312a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003130:	2303      	movs	r3, #3
 8003132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	4619      	mov	r1, r3
 800313a:	480b      	ldr	r0, [pc, #44]	; (8003168 <HAL_SPI_MspInit+0x90>)
 800313c:	f000 fee2 	bl	8003f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003140:	2340      	movs	r3, #64	; 0x40
 8003142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314c:	f107 0310 	add.w	r3, r7, #16
 8003150:	4619      	mov	r1, r3
 8003152:	4805      	ldr	r0, [pc, #20]	; (8003168 <HAL_SPI_MspInit+0x90>)
 8003154:	f000 fed6 	bl	8003f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003158:	bf00      	nop
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40013000 	.word	0x40013000
 8003164:	40021000 	.word	0x40021000
 8003168:	40010800 	.word	0x40010800

0800316c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_MspInit+0x5c>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <HAL_MspInit+0x5c>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6193      	str	r3, [r2, #24]
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_MspInit+0x5c>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_MspInit+0x5c>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <HAL_MspInit+0x5c>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	61d3      	str	r3, [r2, #28]
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_MspInit+0x5c>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_MspInit+0x60>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_MspInit+0x60>)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40010000 	.word	0x40010000

080031d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <HardFault_Handler+0x4>

080031e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e6:	e7fe      	b.n	80031e6 <MemManage_Handler+0x4>

080031e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <BusFault_Handler+0x4>

080031ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f2:	e7fe      	b.n	80031f2 <UsageFault_Handler+0x4>

080031f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800321c:	f000 f8ea 	bl	80033f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}

08003224 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <RTC_IRQHandler+0x10>)
 800322a:	f003 fc2d 	bl	8006a88 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000358 	.word	0x20000358

08003238 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800323c:	2002      	movs	r0, #2
 800323e:	f000 ffd3 	bl	80041e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <RTC_Alarm_IRQHandler+0x10>)
 800324e:	f003 f949 	bl	80064e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000358 	.word	0x20000358

0800325c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <_sbrk+0x50>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <_sbrk+0x16>
		heap_end = &end;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <_sbrk+0x50>)
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <_sbrk+0x54>)
 8003270:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <_sbrk+0x50>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <_sbrk+0x50>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	466a      	mov	r2, sp
 8003282:	4293      	cmp	r3, r2
 8003284:	d907      	bls.n	8003296 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003286:	f004 f805 	bl	8007294 <__errno>
 800328a:	4602      	mov	r2, r0
 800328c:	230c      	movs	r3, #12
 800328e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003290:	f04f 33ff 	mov.w	r3, #4294967295
 8003294:	e006      	b.n	80032a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <_sbrk+0x50>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	4a03      	ldr	r2, [pc, #12]	; (80032ac <_sbrk+0x50>)
 80032a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000214 	.word	0x20000214
 80032b0:	200003d0 	.word	0x200003d0

080032b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <SystemInit+0x5c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a14      	ldr	r2, [pc, #80]	; (8003310 <SystemInit+0x5c>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <SystemInit+0x5c>)
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	4911      	ldr	r1, [pc, #68]	; (8003310 <SystemInit+0x5c>)
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <SystemInit+0x60>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <SystemInit+0x5c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <SystemInit+0x5c>)
 80032d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80032da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <SystemInit+0x5c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <SystemInit+0x5c>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <SystemInit+0x5c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a07      	ldr	r2, [pc, #28]	; (8003310 <SystemInit+0x5c>)
 80032f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80032f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <SystemInit+0x5c>)
 80032fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80032fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <SystemInit+0x64>)
 8003302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003306:	609a      	str	r2, [r3, #8]
#endif 
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	40021000 	.word	0x40021000
 8003314:	f8ff0000 	.word	0xf8ff0000
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800331c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800331e:	e003      	b.n	8003328 <LoopCopyDataInit>

08003320 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003322:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003324:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003326:	3104      	adds	r1, #4

08003328 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003328:	480a      	ldr	r0, [pc, #40]	; (8003354 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800332c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800332e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003330:	d3f6      	bcc.n	8003320 <CopyDataInit>
  ldr r2, =_sbss
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003334:	e002      	b.n	800333c <LoopFillZerobss>

08003336 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003336:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003338:	f842 3b04 	str.w	r3, [r2], #4

0800333c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800333e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003340:	d3f9      	bcc.n	8003336 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003342:	f7ff ffb7 	bl	80032b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003346:	f003 ffab 	bl	80072a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800334a:	f7ff fb0d 	bl	8002968 <main>
  bx lr
 800334e:	4770      	bx	lr
  ldr r3, =_sidata
 8003350:	080090c8 	.word	0x080090c8
  ldr r0, =_sdata
 8003354:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003358:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 800335c:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8003360:	200003cc 	.word	0x200003cc

08003364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003364:	e7fe      	b.n	8003364 <ADC1_2_IRQHandler>
	...

08003368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_Init+0x28>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a07      	ldr	r2, [pc, #28]	; (8003390 <HAL_Init+0x28>)
 8003372:	f043 0310 	orr.w	r3, r3, #16
 8003376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003378:	2003      	movs	r0, #3
 800337a:	f000 fd81 	bl	8003e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800337e:	2000      	movs	r0, #0
 8003380:	f000 f808 	bl	8003394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003384:	f7ff fef2 	bl	800316c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40022000 	.word	0x40022000

08003394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_InitTick+0x54>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_InitTick+0x58>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4619      	mov	r1, r3
 80033a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fd99 	bl	8003eea <HAL_SYSTICK_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e00e      	b.n	80033e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b0f      	cmp	r3, #15
 80033c6:	d80a      	bhi.n	80033de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c8:	2200      	movs	r2, #0
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	f000 fd61 	bl	8003e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d4:	4a06      	ldr	r2, [pc, #24]	; (80033f0 <HAL_InitTick+0x5c>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	2000000c 	.word	0x2000000c
 80033ec:	20000014 	.word	0x20000014
 80033f0:	20000010 	.word	0x20000010

080033f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_IncTick+0x1c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_IncTick+0x20>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4413      	add	r3, r2
 8003404:	4a03      	ldr	r2, [pc, #12]	; (8003414 <HAL_IncTick+0x20>)
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	20000014 	.word	0x20000014
 8003414:	200003c4 	.word	0x200003c4

08003418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return uwTick;
 800341c:	4b02      	ldr	r3, [pc, #8]	; (8003428 <HAL_GetTick+0x10>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	200003c4 	.word	0x200003c4

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff fff0 	bl	8003418 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d005      	beq.n	8003452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_Delay+0x40>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003452:	bf00      	nop
 8003454:	f7ff ffe0 	bl	8003418 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8f7      	bhi.n	8003454 <HAL_Delay+0x28>
  {
  }
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000014 	.word	0x20000014

08003470 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0be      	b.n	8003610 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fff6 	bl	80014a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fbdd 	bl	8003c74 <ADC_ConversionStop_Disable>
 80034ba:	4603      	mov	r3, r0
 80034bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 8099 	bne.w	80035fe <HAL_ADC_Init+0x18e>
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 8095 	bne.w	80035fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034dc:	f023 0302 	bic.w	r3, r3, #2
 80034e0:	f043 0202 	orr.w	r2, r3, #2
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7b1b      	ldrb	r3, [r3, #12]
 80034f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003508:	d003      	beq.n	8003512 <HAL_ADC_Init+0xa2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d102      	bne.n	8003518 <HAL_ADC_Init+0xa8>
 8003512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003516:	e000      	b.n	800351a <HAL_ADC_Init+0xaa>
 8003518:	2300      	movs	r3, #0
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7d1b      	ldrb	r3, [r3, #20]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d119      	bne.n	800355c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7b1b      	ldrb	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	3b01      	subs	r3, #1
 8003536:	035a      	lsls	r2, r3, #13
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e00b      	b.n	800355c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	4b28      	ldr	r3, [pc, #160]	; (8003618 <HAL_ADC_Init+0x1a8>)
 8003578:	4013      	ands	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	430b      	orrs	r3, r1
 8003582:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358c:	d003      	beq.n	8003596 <HAL_ADC_Init+0x126>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d104      	bne.n	80035a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	3b01      	subs	r3, #1
 800359c:	051b      	lsls	r3, r3, #20
 800359e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	4b18      	ldr	r3, [pc, #96]	; (800361c <HAL_ADC_Init+0x1ac>)
 80035bc:	4013      	ands	r3, r2
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d10b      	bne.n	80035dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035da:	e018      	b.n	800360e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	f023 0312 	bic.w	r3, r3, #18
 80035e4:	f043 0210 	orr.w	r2, r3, #16
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035fc:	e007      	b.n	800360e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	f043 0210 	orr.w	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	ffe1f7fd 	.word	0xffe1f7fd
 800361c:	ff1f0efe 	.word	0xff1f0efe

08003620 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_ADC_Start+0x1a>
 8003636:	2302      	movs	r3, #2
 8003638:	e098      	b.n	800376c <HAL_ADC_Start+0x14c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fac4 	bl	8003bd0 <ADC_Enable>
 8003648:	4603      	mov	r3, r0
 800364a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 8087 	bne.w	8003762 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a41      	ldr	r2, [pc, #260]	; (8003774 <HAL_ADC_Start+0x154>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d105      	bne.n	800367e <HAL_ADC_Start+0x5e>
 8003672:	4b41      	ldr	r3, [pc, #260]	; (8003778 <HAL_ADC_Start+0x158>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d115      	bne.n	80036aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d026      	beq.n	80036e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036a8:	e01d      	b.n	80036e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <HAL_ADC_Start+0x158>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_ADC_Start+0xaa>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_ADC_Start+0x154>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d10d      	bne.n	80036e6 <HAL_ADC_Start+0xc6>
 80036ca:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_ADC_Start+0x158>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f023 0206 	bic.w	r2, r3, #6
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80036fe:	e002      	b.n	8003706 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f06f 0202 	mvn.w	r2, #2
 8003716:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003722:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003726:	d113      	bne.n	8003750 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800372c:	4a11      	ldr	r2, [pc, #68]	; (8003774 <HAL_ADC_Start+0x154>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d105      	bne.n	800373e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_ADC_Start+0x158>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	e00c      	b.n	800376a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	e003      	b.n	800376a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012800 	.word	0x40012800
 8003778:	40012400 	.word	0x40012400

0800377c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_ADC_Stop+0x1a>
 8003792:	2302      	movs	r3, #2
 8003794:	e01a      	b.n	80037cc <HAL_ADC_Stop+0x50>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa68 	bl	8003c74 <ADC_ConversionStop_Disable>
 80037a4:	4603      	mov	r3, r0
 80037a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80037ea:	f7ff fe15 	bl	8003418 <HAL_GetTick>
 80037ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0c8      	b.n	80039a8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d12a      	bne.n	800387a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800382e:	2b00      	cmp	r3, #0
 8003830:	d123      	bne.n	800387a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003832:	e01a      	b.n	800386a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d016      	beq.n	800386a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_ADC_PollForConversion+0x7e>
 8003842:	f7ff fde9 	bl	8003418 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d20b      	bcs.n	800386a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	f043 0204 	orr.w	r2, r3, #4
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e09e      	b.n	80039a8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0dd      	beq.n	8003834 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003878:	e06c      	b.n	8003954 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800387a:	4b4d      	ldr	r3, [pc, #308]	; (80039b0 <HAL_ADC_PollForConversion+0x1dc>)
 800387c:	681c      	ldr	r4, [r3, #0]
 800387e:	2002      	movs	r0, #2
 8003880:	f002 f96a 	bl	8005b58 <HAL_RCCEx_GetPeriphCLKFreq>
 8003884:	4603      	mov	r3, r0
 8003886:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6919      	ldr	r1, [r3, #16]
 8003890:	4b48      	ldr	r3, [pc, #288]	; (80039b4 <HAL_ADC_PollForConversion+0x1e0>)
 8003892:	400b      	ands	r3, r1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d118      	bne.n	80038ca <HAL_ADC_PollForConversion+0xf6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68d9      	ldr	r1, [r3, #12]
 800389e:	4b46      	ldr	r3, [pc, #280]	; (80039b8 <HAL_ADC_PollForConversion+0x1e4>)
 80038a0:	400b      	ands	r3, r1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d111      	bne.n	80038ca <HAL_ADC_PollForConversion+0xf6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6919      	ldr	r1, [r3, #16]
 80038ac:	4b43      	ldr	r3, [pc, #268]	; (80039bc <HAL_ADC_PollForConversion+0x1e8>)
 80038ae:	400b      	ands	r3, r1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d108      	bne.n	80038c6 <HAL_ADC_PollForConversion+0xf2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68d9      	ldr	r1, [r3, #12]
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_ADC_PollForConversion+0x1ec>)
 80038bc:	400b      	ands	r3, r1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_PollForConversion+0xf2>
 80038c2:	2314      	movs	r3, #20
 80038c4:	e020      	b.n	8003908 <HAL_ADC_PollForConversion+0x134>
 80038c6:	2329      	movs	r3, #41	; 0x29
 80038c8:	e01e      	b.n	8003908 <HAL_ADC_PollForConversion+0x134>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6919      	ldr	r1, [r3, #16]
 80038d0:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <HAL_ADC_PollForConversion+0x1e8>)
 80038d2:	400b      	ands	r3, r1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <HAL_ADC_PollForConversion+0x112>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68d9      	ldr	r1, [r3, #12]
 80038de:	4b38      	ldr	r3, [pc, #224]	; (80039c0 <HAL_ADC_PollForConversion+0x1ec>)
 80038e0:	400b      	ands	r3, r1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <HAL_ADC_PollForConversion+0x12e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6919      	ldr	r1, [r3, #16]
 80038ec:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <HAL_ADC_PollForConversion+0x1f0>)
 80038ee:	400b      	ands	r3, r1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d108      	bne.n	8003906 <HAL_ADC_PollForConversion+0x132>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68d9      	ldr	r1, [r3, #12]
 80038fa:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <HAL_ADC_PollForConversion+0x1f0>)
 80038fc:	400b      	ands	r3, r1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_ADC_PollForConversion+0x132>
 8003902:	2354      	movs	r3, #84	; 0x54
 8003904:	e000      	b.n	8003908 <HAL_ADC_PollForConversion+0x134>
 8003906:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800390e:	e01d      	b.n	800394c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d016      	beq.n	8003946 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_ADC_PollForConversion+0x15a>
 800391e:	f7ff fd7b 	bl	8003418 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d20b      	bcs.n	8003946 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	f043 0204 	orr.w	r2, r3, #4
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e030      	b.n	80039a8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3301      	adds	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	429a      	cmp	r2, r3
 8003952:	d8dd      	bhi.n	8003910 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0212 	mvn.w	r2, #18
 800395c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003974:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003978:	d115      	bne.n	80039a6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800397e:	2b00      	cmp	r3, #0
 8003980:	d111      	bne.n	80039a6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd90      	pop	{r4, r7, pc}
 80039b0:	2000000c 	.word	0x2000000c
 80039b4:	24924924 	.word	0x24924924
 80039b8:	00924924 	.word	0x00924924
 80039bc:	12492492 	.word	0x12492492
 80039c0:	00492492 	.word	0x00492492
 80039c4:	00249249 	.word	0x00249249

080039c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x20>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e0dc      	b.n	8003bba <HAL_ADC_ConfigChannel+0x1da>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b06      	cmp	r3, #6
 8003a0e:	d81c      	bhi.n	8003a4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b05      	subs	r3, #5
 8003a22:	221f      	movs	r2, #31
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	4019      	ands	r1, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	3b05      	subs	r3, #5
 8003a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	635a      	str	r2, [r3, #52]	; 0x34
 8003a48:	e03c      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d81c      	bhi.n	8003a8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	3b23      	subs	r3, #35	; 0x23
 8003a64:	221f      	movs	r2, #31
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	4019      	ands	r1, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b23      	subs	r3, #35	; 0x23
 8003a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
 8003a8a:	e01b      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3b41      	subs	r3, #65	; 0x41
 8003a9e:	221f      	movs	r2, #31
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	4019      	ands	r1, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b41      	subs	r3, #65	; 0x41
 8003ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b09      	cmp	r3, #9
 8003aca:	d91c      	bls.n	8003b06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68d9      	ldr	r1, [r3, #12]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	3b1e      	subs	r3, #30
 8003ade:	2207      	movs	r2, #7
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	4019      	ands	r1, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	6898      	ldr	r0, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	3b1e      	subs	r3, #30
 8003af8:	fa00 f203 	lsl.w	r2, r0, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	60da      	str	r2, [r3, #12]
 8003b04:	e019      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6919      	ldr	r1, [r3, #16]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4413      	add	r3, r2
 8003b16:	2207      	movs	r2, #7
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	4019      	ands	r1, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6898      	ldr	r0, [r3, #8]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d003      	beq.n	8003b4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b46:	2b11      	cmp	r3, #17
 8003b48:	d132      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d125      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d126      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b70:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d11a      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <HAL_ADC_ConfigChannel+0x1ec>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	0c9a      	lsrs	r2, r3, #18
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b90:	e002      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f9      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x1b2>
 8003b9e:	e007      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	40012400 	.word	0x40012400
 8003bc8:	2000000c 	.word	0x2000000c
 8003bcc:	431bde83 	.word	0x431bde83

08003bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d039      	beq.n	8003c62 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <ADC_Enable+0x9c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <ADC_Enable+0xa0>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	0c9b      	lsrs	r3, r3, #18
 8003c0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c0c:	e002      	b.n	8003c14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f9      	bne.n	8003c0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c1a:	f7ff fbfd 	bl	8003418 <HAL_GetTick>
 8003c1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c20:	e018      	b.n	8003c54 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c22:	f7ff fbf9 	bl	8003418 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d911      	bls.n	8003c54 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	f043 0210 	orr.w	r2, r3, #16
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	f043 0201 	orr.w	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e007      	b.n	8003c64 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d1df      	bne.n	8003c22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	2000000c 	.word	0x2000000c
 8003c70:	431bde83 	.word	0x431bde83

08003c74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d127      	bne.n	8003cde <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c9e:	f7ff fbbb 	bl	8003418 <HAL_GetTick>
 8003ca2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ca4:	e014      	b.n	8003cd0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ca6:	f7ff fbb7 	bl	8003418 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d90d      	bls.n	8003cd0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	f043 0210 	orr.w	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	f043 0201 	orr.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e007      	b.n	8003ce0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d0e3      	beq.n	8003ca6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <__NVIC_SetPriorityGrouping>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d04:	4013      	ands	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d1a:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <__NVIC_SetPriorityGrouping+0x44>)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	60d3      	str	r3, [r2, #12]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <__NVIC_GetPriorityGrouping>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <__NVIC_GetPriorityGrouping+0x18>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	f003 0307 	and.w	r3, r3, #7
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <__NVIC_EnableIRQ>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db0b      	blt.n	8003d76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	f003 021f 	and.w	r2, r3, #31
 8003d64:	4906      	ldr	r1, [pc, #24]	; (8003d80 <__NVIC_EnableIRQ+0x34>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	e000e100 	.word	0xe000e100

08003d84 <__NVIC_SetPriority>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	db0a      	blt.n	8003dae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <__NVIC_SetPriority+0x4c>)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	440b      	add	r3, r1
 8003da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003dac:	e00a      	b.n	8003dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <__NVIC_SetPriority+0x50>)
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	761a      	strb	r2, [r3, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000e100 	.word	0xe000e100
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <NVIC_EncodePriority>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	bf28      	it	cs
 8003df6:	2304      	movcs	r3, #4
 8003df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d902      	bls.n	8003e08 <NVIC_EncodePriority+0x30>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3b03      	subs	r3, #3
 8003e06:	e000      	b.n	8003e0a <NVIC_EncodePriority+0x32>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e20:	f04f 31ff 	mov.w	r1, #4294967295
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	43d9      	mvns	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	4313      	orrs	r3, r2
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e4c:	d301      	bcc.n	8003e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e00f      	b.n	8003e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <SysTick_Config+0x40>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e5a:	210f      	movs	r1, #15
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	f7ff ff90 	bl	8003d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <SysTick_Config+0x40>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <SysTick_Config+0x40>)
 8003e6c:	2207      	movs	r2, #7
 8003e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	e000e010 	.word	0xe000e010

08003e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ff2d 	bl	8003ce8 <__NVIC_SetPriorityGrouping>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea8:	f7ff ff42 	bl	8003d30 <__NVIC_GetPriorityGrouping>
 8003eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff ff90 	bl	8003dd8 <NVIC_EncodePriority>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff5f 	bl	8003d84 <__NVIC_SetPriority>
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff35 	bl	8003d4c <__NVIC_EnableIRQ>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ffa2 	bl	8003e3c <SysTick_Config>
 8003ef8:	4603      	mov	r3, r0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b08b      	sub	sp, #44	; 0x2c
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f12:	2300      	movs	r3, #0
 8003f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f16:	e127      	b.n	8004168 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f18:	2201      	movs	r2, #1
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	f040 8116 	bne.w	8004162 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b12      	cmp	r3, #18
 8003f3c:	d034      	beq.n	8003fa8 <HAL_GPIO_Init+0xa4>
 8003f3e:	2b12      	cmp	r3, #18
 8003f40:	d80d      	bhi.n	8003f5e <HAL_GPIO_Init+0x5a>
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d02b      	beq.n	8003f9e <HAL_GPIO_Init+0x9a>
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d804      	bhi.n	8003f54 <HAL_GPIO_Init+0x50>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d031      	beq.n	8003fb2 <HAL_GPIO_Init+0xae>
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d01c      	beq.n	8003f8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f52:	e048      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d043      	beq.n	8003fe0 <HAL_GPIO_Init+0xdc>
 8003f58:	2b11      	cmp	r3, #17
 8003f5a:	d01b      	beq.n	8003f94 <HAL_GPIO_Init+0x90>
          break;
 8003f5c:	e043      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003f5e:	4a89      	ldr	r2, [pc, #548]	; (8004184 <HAL_GPIO_Init+0x280>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d026      	beq.n	8003fb2 <HAL_GPIO_Init+0xae>
 8003f64:	4a87      	ldr	r2, [pc, #540]	; (8004184 <HAL_GPIO_Init+0x280>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d806      	bhi.n	8003f78 <HAL_GPIO_Init+0x74>
 8003f6a:	4a87      	ldr	r2, [pc, #540]	; (8004188 <HAL_GPIO_Init+0x284>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d020      	beq.n	8003fb2 <HAL_GPIO_Init+0xae>
 8003f70:	4a86      	ldr	r2, [pc, #536]	; (800418c <HAL_GPIO_Init+0x288>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01d      	beq.n	8003fb2 <HAL_GPIO_Init+0xae>
          break;
 8003f76:	e036      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003f78:	4a85      	ldr	r2, [pc, #532]	; (8004190 <HAL_GPIO_Init+0x28c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d019      	beq.n	8003fb2 <HAL_GPIO_Init+0xae>
 8003f7e:	4a85      	ldr	r2, [pc, #532]	; (8004194 <HAL_GPIO_Init+0x290>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d016      	beq.n	8003fb2 <HAL_GPIO_Init+0xae>
 8003f84:	4a84      	ldr	r2, [pc, #528]	; (8004198 <HAL_GPIO_Init+0x294>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_GPIO_Init+0xae>
          break;
 8003f8a:	e02c      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	623b      	str	r3, [r7, #32]
          break;
 8003f92:	e028      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	623b      	str	r3, [r7, #32]
          break;
 8003f9c:	e023      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	623b      	str	r3, [r7, #32]
          break;
 8003fa6:	e01e      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	330c      	adds	r3, #12
 8003fae:	623b      	str	r3, [r7, #32]
          break;
 8003fb0:	e019      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fba:	2304      	movs	r3, #4
 8003fbc:	623b      	str	r3, [r7, #32]
          break;
 8003fbe:	e012      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fc8:	2308      	movs	r3, #8
 8003fca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	611a      	str	r2, [r3, #16]
          break;
 8003fd2:	e008      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	615a      	str	r2, [r3, #20]
          break;
 8003fde:	e002      	b.n	8003fe6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	623b      	str	r3, [r7, #32]
          break;
 8003fe4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2bff      	cmp	r3, #255	; 0xff
 8003fea:	d801      	bhi.n	8003ff0 <HAL_GPIO_Init+0xec>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	e001      	b.n	8003ff4 <HAL_GPIO_Init+0xf0>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2bff      	cmp	r3, #255	; 0xff
 8003ffa:	d802      	bhi.n	8004002 <HAL_GPIO_Init+0xfe>
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	e002      	b.n	8004008 <HAL_GPIO_Init+0x104>
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	3b08      	subs	r3, #8
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	210f      	movs	r1, #15
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	401a      	ands	r2, r3
 800401a:	6a39      	ldr	r1, [r7, #32]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	431a      	orrs	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8096 	beq.w	8004162 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004036:	4b59      	ldr	r3, [pc, #356]	; (800419c <HAL_GPIO_Init+0x298>)
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	4a58      	ldr	r2, [pc, #352]	; (800419c <HAL_GPIO_Init+0x298>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6193      	str	r3, [r2, #24]
 8004042:	4b56      	ldr	r3, [pc, #344]	; (800419c <HAL_GPIO_Init+0x298>)
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800404e:	4a54      	ldr	r2, [pc, #336]	; (80041a0 <HAL_GPIO_Init+0x29c>)
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	089b      	lsrs	r3, r3, #2
 8004054:	3302      	adds	r3, #2
 8004056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	220f      	movs	r2, #15
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4b      	ldr	r2, [pc, #300]	; (80041a4 <HAL_GPIO_Init+0x2a0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_GPIO_Init+0x19e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4a      	ldr	r2, [pc, #296]	; (80041a8 <HAL_GPIO_Init+0x2a4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00d      	beq.n	800409e <HAL_GPIO_Init+0x19a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a49      	ldr	r2, [pc, #292]	; (80041ac <HAL_GPIO_Init+0x2a8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <HAL_GPIO_Init+0x196>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a48      	ldr	r2, [pc, #288]	; (80041b0 <HAL_GPIO_Init+0x2ac>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <HAL_GPIO_Init+0x192>
 8004092:	2303      	movs	r3, #3
 8004094:	e006      	b.n	80040a4 <HAL_GPIO_Init+0x1a0>
 8004096:	2304      	movs	r3, #4
 8004098:	e004      	b.n	80040a4 <HAL_GPIO_Init+0x1a0>
 800409a:	2302      	movs	r3, #2
 800409c:	e002      	b.n	80040a4 <HAL_GPIO_Init+0x1a0>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_GPIO_Init+0x1a0>
 80040a2:	2300      	movs	r3, #0
 80040a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a6:	f002 0203 	and.w	r2, r2, #3
 80040aa:	0092      	lsls	r2, r2, #2
 80040ac:	4093      	lsls	r3, r2
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040b4:	493a      	ldr	r1, [pc, #232]	; (80041a0 <HAL_GPIO_Init+0x29c>)
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	3302      	adds	r3, #2
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d006      	beq.n	80040dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040ce:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4938      	ldr	r1, [pc, #224]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]
 80040da:	e006      	b.n	80040ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040dc:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	4933      	ldr	r1, [pc, #204]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040f6:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	492e      	ldr	r1, [pc, #184]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]
 8004102:	e006      	b.n	8004112 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004104:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	43db      	mvns	r3, r3
 800410c:	4929      	ldr	r1, [pc, #164]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 800410e:	4013      	ands	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d006      	beq.n	800412c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800411e:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	4924      	ldr	r1, [pc, #144]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
 800412a:	e006      	b.n	800413a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800412c:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	43db      	mvns	r3, r3
 8004134:	491f      	ldr	r1, [pc, #124]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 8004136:	4013      	ands	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	491a      	ldr	r1, [pc, #104]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	60cb      	str	r3, [r1, #12]
 8004152:	e006      	b.n	8004162 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	43db      	mvns	r3, r3
 800415c:	4915      	ldr	r1, [pc, #84]	; (80041b4 <HAL_GPIO_Init+0x2b0>)
 800415e:	4013      	ands	r3, r2
 8004160:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	3301      	adds	r3, #1
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	f47f aed0 	bne.w	8003f18 <HAL_GPIO_Init+0x14>
  }
}
 8004178:	bf00      	nop
 800417a:	372c      	adds	r7, #44	; 0x2c
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	10210000 	.word	0x10210000
 8004188:	10110000 	.word	0x10110000
 800418c:	10120000 	.word	0x10120000
 8004190:	10310000 	.word	0x10310000
 8004194:	10320000 	.word	0x10320000
 8004198:	10220000 	.word	0x10220000
 800419c:	40021000 	.word	0x40021000
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40010800 	.word	0x40010800
 80041a8:	40010c00 	.word	0x40010c00
 80041ac:	40011000 	.word	0x40011000
 80041b0:	40011400 	.word	0x40011400
 80041b4:	40010400 	.word	0x40010400

080041b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
 80041c4:	4613      	mov	r3, r2
 80041c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041c8:	787b      	ldrb	r3, [r7, #1]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ce:	887a      	ldrh	r2, [r7, #2]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041d4:	e003      	b.n	80041de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	041a      	lsls	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	611a      	str	r2, [r3, #16]
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d006      	beq.n	800420c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041fe:	4a05      	ldr	r2, [pc, #20]	; (8004214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fd2c 	bl	8002c64 <HAL_GPIO_EXTI_Callback>
  }
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40010400 	.word	0x40010400

08004218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e10f      	b.n	800444a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd fa58 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800425c:	f001 fb80 	bl	8005960 <HAL_RCC_GetPCLK1Freq>
 8004260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4a7b      	ldr	r2, [pc, #492]	; (8004454 <HAL_I2C_Init+0x23c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d807      	bhi.n	800427c <HAL_I2C_Init+0x64>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a7a      	ldr	r2, [pc, #488]	; (8004458 <HAL_I2C_Init+0x240>)
 8004270:	4293      	cmp	r3, r2
 8004272:	bf94      	ite	ls
 8004274:	2301      	movls	r3, #1
 8004276:	2300      	movhi	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e006      	b.n	800428a <HAL_I2C_Init+0x72>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a77      	ldr	r2, [pc, #476]	; (800445c <HAL_I2C_Init+0x244>)
 8004280:	4293      	cmp	r3, r2
 8004282:	bf94      	ite	ls
 8004284:	2301      	movls	r3, #1
 8004286:	2300      	movhi	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0db      	b.n	800444a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a72      	ldr	r2, [pc, #456]	; (8004460 <HAL_I2C_Init+0x248>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0c9b      	lsrs	r3, r3, #18
 800429c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a64      	ldr	r2, [pc, #400]	; (8004454 <HAL_I2C_Init+0x23c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d802      	bhi.n	80042cc <HAL_I2C_Init+0xb4>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	3301      	adds	r3, #1
 80042ca:	e009      	b.n	80042e0 <HAL_I2C_Init+0xc8>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	4a63      	ldr	r2, [pc, #396]	; (8004464 <HAL_I2C_Init+0x24c>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	3301      	adds	r3, #1
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4956      	ldr	r1, [pc, #344]	; (8004454 <HAL_I2C_Init+0x23c>)
 80042fc:	428b      	cmp	r3, r1
 80042fe:	d80d      	bhi.n	800431c <HAL_I2C_Init+0x104>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1e59      	subs	r1, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fbb1 f3f3 	udiv	r3, r1, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	2b04      	cmp	r3, #4
 8004316:	bf38      	it	cc
 8004318:	2304      	movcc	r3, #4
 800431a:	e04f      	b.n	80043bc <HAL_I2C_Init+0x1a4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d111      	bne.n	8004348 <HAL_I2C_Init+0x130>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1e58      	subs	r0, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	440b      	add	r3, r1
 8004332:	fbb0 f3f3 	udiv	r3, r0, r3
 8004336:	3301      	adds	r3, #1
 8004338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e012      	b.n	800436e <HAL_I2C_Init+0x156>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e58      	subs	r0, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	0099      	lsls	r1, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	fbb0 f3f3 	udiv	r3, r0, r3
 800435e:	3301      	adds	r3, #1
 8004360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Init+0x15e>
 8004372:	2301      	movs	r3, #1
 8004374:	e022      	b.n	80043bc <HAL_I2C_Init+0x1a4>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10e      	bne.n	800439c <HAL_I2C_Init+0x184>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1e58      	subs	r0, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	440b      	add	r3, r1
 800438c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439a:	e00f      	b.n	80043bc <HAL_I2C_Init+0x1a4>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1e58      	subs	r0, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	0099      	lsls	r1, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	6809      	ldr	r1, [r1, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6911      	ldr	r1, [r2, #16]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68d2      	ldr	r2, [r2, #12]
 80043f6:	4311      	orrs	r1, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	000186a0 	.word	0x000186a0
 8004458:	001e847f 	.word	0x001e847f
 800445c:	003d08ff 	.word	0x003d08ff
 8004460:	431bde83 	.word	0x431bde83
 8004464:	10624dd3 	.word	0x10624dd3

08004468 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	460b      	mov	r3, r1
 800447c:	813b      	strh	r3, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004482:	f7fe ffc9 	bl	8003418 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b20      	cmp	r3, #32
 8004492:	f040 80d9 	bne.w	8004648 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	2319      	movs	r3, #25
 800449c:	2201      	movs	r2, #1
 800449e:	496d      	ldr	r1, [pc, #436]	; (8004654 <HAL_I2C_Mem_Write+0x1ec>)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fc6b 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
 80044ae:	e0cc      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_I2C_Mem_Write+0x56>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0c5      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d007      	beq.n	80044e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2221      	movs	r2, #33	; 0x21
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a4d      	ldr	r2, [pc, #308]	; (8004658 <HAL_I2C_Mem_Write+0x1f0>)
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004526:	88f8      	ldrh	r0, [r7, #6]
 8004528:	893a      	ldrh	r2, [r7, #8]
 800452a:	8979      	ldrh	r1, [r7, #10]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	4603      	mov	r3, r0
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fac6 	bl	8004ac8 <I2C_RequestMemoryWrite>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d052      	beq.n	80045e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e081      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fcec 	bl	8004f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00d      	beq.n	8004572 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b04      	cmp	r3, #4
 800455c:	d107      	bne.n	800456e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e06b      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d11b      	bne.n	80045e8 <HAL_I2C_Mem_Write+0x180>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1aa      	bne.n	8004546 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fcd8 	bl	8004faa <I2C_WaitOnBTFFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00d      	beq.n	800461c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	2b04      	cmp	r3, #4
 8004606:	d107      	bne.n	8004618 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004616:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e016      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	00100002 	.word	0x00100002
 8004658:	ffff0000 	.word	0xffff0000

0800465c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	; 0x30
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	461a      	mov	r2, r3
 800466a:	4603      	mov	r3, r0
 800466c:	817b      	strh	r3, [r7, #10]
 800466e:	460b      	mov	r3, r1
 8004670:	813b      	strh	r3, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004676:	f7fe fecf 	bl	8003418 <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b20      	cmp	r3, #32
 8004686:	f040 8218 	bne.w	8004aba <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2319      	movs	r3, #25
 8004690:	2201      	movs	r2, #1
 8004692:	4981      	ldr	r1, [pc, #516]	; (8004898 <HAL_I2C_Mem_Read+0x23c>)
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fb71 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
 80046a2:	e20b      	b.n	8004abc <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_I2C_Mem_Read+0x56>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e204      	b.n	8004abc <HAL_I2C_Mem_Read+0x460>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d007      	beq.n	80046d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2222      	movs	r2, #34	; 0x22
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2240      	movs	r2, #64	; 0x40
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a61      	ldr	r2, [pc, #388]	; (800489c <HAL_I2C_Mem_Read+0x240>)
 8004718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800471a:	88f8      	ldrh	r0, [r7, #6]
 800471c:	893a      	ldrh	r2, [r7, #8]
 800471e:	8979      	ldrh	r1, [r7, #10]
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	4603      	mov	r3, r0
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fa56 	bl	8004bdc <I2C_RequestMemoryRead>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e1c0      	b.n	8004abc <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473e:	2b00      	cmp	r3, #0
 8004740:	d113      	bne.n	800476a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e194      	b.n	8004a94 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	2b01      	cmp	r3, #1
 8004770:	d11d      	bne.n	80047ae <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004780:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004782:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80047aa:	b662      	cpsie	i
 80047ac:	e172      	b.n	8004a94 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d11d      	bne.n	80047f2 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047c6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80047ee:	b662      	cpsie	i
 80047f0:	e150      	b.n	8004a94 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004800:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004818:	e13c      	b.n	8004a94 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	2b03      	cmp	r3, #3
 8004820:	f200 80f5 	bhi.w	8004a0e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b01      	cmp	r3, #1
 800482a:	d123      	bne.n	8004874 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fbfb 	bl	800502c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e13d      	b.n	8004abc <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004872:	e10f      	b.n	8004a94 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	2b02      	cmp	r3, #2
 800487a:	d150      	bne.n	800491e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	2200      	movs	r2, #0
 8004884:	4906      	ldr	r1, [pc, #24]	; (80048a0 <HAL_I2C_Mem_Read+0x244>)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa78 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e112      	b.n	8004abc <HAL_I2C_Mem_Read+0x460>
 8004896:	bf00      	nop
 8004898:	00100002 	.word	0x00100002
 800489c:	ffff0000 	.word	0xffff0000
 80048a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80048a4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80048e8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800491c:	e0ba      	b.n	8004a94 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2200      	movs	r2, #0
 8004926:	4967      	ldr	r1, [pc, #412]	; (8004ac4 <HAL_I2C_Mem_Read+0x468>)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fa27 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0c1      	b.n	8004abc <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004946:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004948:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	2200      	movs	r2, #0
 8004984:	494f      	ldr	r1, [pc, #316]	; (8004ac4 <HAL_I2C_Mem_Read+0x468>)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f9f8 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e092      	b.n	8004abc <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049d8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a0c:	e042      	b.n	8004a94 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 fb0a 	bl	800502c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e04c      	b.n	8004abc <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d118      	bne.n	8004a94 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f47f aebe 	bne.w	800481a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
  }
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3728      	adds	r7, #40	; 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	00010004 	.word	0x00010004

08004ac8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	817b      	strh	r3, [r7, #10]
 8004ada:	460b      	mov	r3, r1
 8004adc:	813b      	strh	r3, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f93c 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e05f      	b.n	8004bce <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b0e:	897b      	ldrh	r3, [r7, #10]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	492d      	ldr	r1, [pc, #180]	; (8004bd8 <I2C_RequestMemoryWrite+0x110>)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f980 	bl	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e04c      	b.n	8004bce <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	6a39      	ldr	r1, [r7, #32]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f9ea 	bl	8004f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d107      	bne.n	8004b72 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e02b      	b.n	8004bce <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b7c:	893b      	ldrh	r3, [r7, #8]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	611a      	str	r2, [r3, #16]
 8004b86:	e021      	b.n	8004bcc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b88:	893b      	ldrh	r3, [r7, #8]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	6a39      	ldr	r1, [r7, #32]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f9c4 	bl	8004f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d107      	bne.n	8004bbe <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e005      	b.n	8004bce <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc2:	893b      	ldrh	r3, [r7, #8]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	00010002 	.word	0x00010002

08004bdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	817b      	strh	r3, [r7, #10]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	813b      	strh	r3, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f8aa 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e09e      	b.n	8004d70 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c32:	897b      	ldrh	r3, [r7, #10]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	6a3a      	ldr	r2, [r7, #32]
 8004c46:	494c      	ldr	r1, [pc, #304]	; (8004d78 <I2C_RequestMemoryRead+0x19c>)
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f8ee 	bl	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e08b      	b.n	8004d70 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	6a39      	ldr	r1, [r7, #32]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f958 	bl	8004f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d107      	bne.n	8004c96 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e06a      	b.n	8004d70 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca0:	893b      	ldrh	r3, [r7, #8]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	611a      	str	r2, [r3, #16]
 8004caa:	e021      	b.n	8004cf0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	6a39      	ldr	r1, [r7, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f932 	bl	8004f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d107      	bne.n	8004ce2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e044      	b.n	8004d70 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce6:	893b      	ldrh	r3, [r7, #8]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf2:	6a39      	ldr	r1, [r7, #32]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f917 	bl	8004f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00d      	beq.n	8004d1c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d107      	bne.n	8004d18 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e029      	b.n	8004d70 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f81f 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e013      	b.n	8004d70 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d48:	897b      	ldrh	r3, [r7, #10]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	6a3a      	ldr	r2, [r7, #32]
 8004d5c:	4906      	ldr	r1, [pc, #24]	; (8004d78 <I2C_RequestMemoryRead+0x19c>)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f863 	bl	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	00010002 	.word	0x00010002

08004d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d8c:	e025      	b.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d021      	beq.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fe fb3f 	bl	8003418 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d116      	bne.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e023      	b.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10d      	bne.n	8004e00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	43da      	mvns	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4013      	ands	r3, r2
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf0c      	ite	eq
 8004df6:	2301      	moveq	r3, #1
 8004df8:	2300      	movne	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	e00c      	b.n	8004e1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	43da      	mvns	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf0c      	ite	eq
 8004e12:	2301      	moveq	r3, #1
 8004e14:	2300      	movne	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d0b6      	beq.n	8004d8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e38:	e051      	b.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e48:	d123      	bne.n	8004e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f043 0204 	orr.w	r2, r3, #4
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e046      	b.n	8004f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d021      	beq.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fe fabd 	bl	8003418 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d116      	bne.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e020      	b.n	8004f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10c      	bne.n	8004f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	43da      	mvns	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bf14      	ite	ne
 8004efa:	2301      	movne	r3, #1
 8004efc:	2300      	moveq	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	e00b      	b.n	8004f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d18d      	bne.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f34:	e02d      	b.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f8ce 	bl	80050d8 <I2C_IsAcknowledgeFailed>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e02d      	b.n	8004fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d021      	beq.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fe fa63 	bl	8003418 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d116      	bne.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e007      	b.n	8004fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9c:	2b80      	cmp	r3, #128	; 0x80
 8004f9e:	d1ca      	bne.n	8004f36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb6:	e02d      	b.n	8005014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f88d 	bl	80050d8 <I2C_IsAcknowledgeFailed>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e02d      	b.n	8005024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d021      	beq.n	8005014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd0:	f7fe fa22 	bl	8003418 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f043 0220 	orr.w	r2, r3, #32
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e007      	b.n	8005024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b04      	cmp	r3, #4
 8005020:	d1ca      	bne.n	8004fb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005038:	e042      	b.n	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b10      	cmp	r3, #16
 8005046:	d119      	bne.n	800507c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0210 	mvn.w	r2, #16
 8005050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e029      	b.n	80050d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507c:	f7fe f9cc 	bl	8003418 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	d302      	bcc.n	8005092 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d116      	bne.n	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e007      	b.n	80050d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d1b5      	bne.n	800503a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ee:	d11b      	bne.n	8005128 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f043 0204 	orr.w	r2, r3, #4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <HAL_PWR_EnableBkUpAccess+0x14>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]
}
 800513e:	bf00      	nop
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	420e0020 	.word	0x420e0020

0800514c <HAL_PWR_DisableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005160:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_PWR_DisableWakeUpPin+0x34>)
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	461a      	mov	r2, r3
 8005172:	2300      	movs	r3, #0
 8005174:	6013      	str	r3, [r2, #0]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	10838020 	.word	0x10838020

08005184 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8005188:	4b08      	ldr	r3, [pc, #32]	; (80051ac <HAL_PWR_EnterSTANDBYMode+0x28>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a07      	ldr	r2, [pc, #28]	; (80051ac <HAL_PWR_EnterSTANDBYMode+0x28>)
 800518e:	f043 0302 	orr.w	r3, r3, #2
 8005192:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	4a05      	ldr	r2, [pc, #20]	; (80051b0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800519a:	f043 0304 	orr.w	r3, r3, #4
 800519e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80051a0:	bf30      	wfi
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40007000 	.word	0x40007000
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e26c      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8087 	beq.w	80052e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051d4:	4b92      	ldr	r3, [pc, #584]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d00c      	beq.n	80051fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051e0:	4b8f      	ldr	r3, [pc, #572]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 030c 	and.w	r3, r3, #12
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d112      	bne.n	8005212 <HAL_RCC_OscConfig+0x5e>
 80051ec:	4b8c      	ldr	r3, [pc, #560]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f8:	d10b      	bne.n	8005212 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fa:	4b89      	ldr	r3, [pc, #548]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d06c      	beq.n	80052e0 <HAL_RCC_OscConfig+0x12c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d168      	bne.n	80052e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e246      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521a:	d106      	bne.n	800522a <HAL_RCC_OscConfig+0x76>
 800521c:	4b80      	ldr	r3, [pc, #512]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a7f      	ldr	r2, [pc, #508]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e02e      	b.n	8005288 <HAL_RCC_OscConfig+0xd4>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10c      	bne.n	800524c <HAL_RCC_OscConfig+0x98>
 8005232:	4b7b      	ldr	r3, [pc, #492]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a7a      	ldr	r2, [pc, #488]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4b78      	ldr	r3, [pc, #480]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a77      	ldr	r2, [pc, #476]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e01d      	b.n	8005288 <HAL_RCC_OscConfig+0xd4>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0xbc>
 8005256:	4b72      	ldr	r3, [pc, #456]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a71      	ldr	r2, [pc, #452]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 800525c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a6e      	ldr	r2, [pc, #440]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e00b      	b.n	8005288 <HAL_RCC_OscConfig+0xd4>
 8005270:	4b6b      	ldr	r3, [pc, #428]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a6a      	ldr	r2, [pc, #424]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	4b68      	ldr	r3, [pc, #416]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a67      	ldr	r2, [pc, #412]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005286:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fe f8c2 	bl	8003418 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005298:	f7fe f8be 	bl	8003418 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	; 0x64
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1fa      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052aa:	4b5d      	ldr	r3, [pc, #372]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0xe4>
 80052b6:	e014      	b.n	80052e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fe f8ae 	bl	8003418 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c0:	f7fe f8aa 	bl	8003418 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e1e6      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d2:	4b53      	ldr	r3, [pc, #332]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x10c>
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d063      	beq.n	80053b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052ee:	4b4c      	ldr	r3, [pc, #304]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052fa:	4b49      	ldr	r3, [pc, #292]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	2b08      	cmp	r3, #8
 8005304:	d11c      	bne.n	8005340 <HAL_RCC_OscConfig+0x18c>
 8005306:	4b46      	ldr	r3, [pc, #280]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d116      	bne.n	8005340 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005312:	4b43      	ldr	r3, [pc, #268]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_RCC_OscConfig+0x176>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d001      	beq.n	800532a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e1ba      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532a:	4b3d      	ldr	r3, [pc, #244]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4939      	ldr	r1, [pc, #228]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 800533a:	4313      	orrs	r3, r2
 800533c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533e:	e03a      	b.n	80053b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d020      	beq.n	800538a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005348:	4b36      	ldr	r3, [pc, #216]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534e:	f7fe f863 	bl	8003418 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005356:	f7fe f85f 	bl	8003418 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e19b      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005368:	4b2d      	ldr	r3, [pc, #180]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005374:	4b2a      	ldr	r3, [pc, #168]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4927      	ldr	r1, [pc, #156]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 8005384:	4313      	orrs	r3, r2
 8005386:	600b      	str	r3, [r1, #0]
 8005388:	e015      	b.n	80053b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800538a:	4b26      	ldr	r3, [pc, #152]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7fe f842 	bl	8003418 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005398:	f7fe f83e 	bl	8003418 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e17a      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053aa:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d03a      	beq.n	8005438 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d019      	beq.n	80053fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ca:	4b17      	ldr	r3, [pc, #92]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d0:	f7fe f822 	bl	8003418 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d8:	f7fe f81e 	bl	8003418 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e15a      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ea:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <HAL_RCC_OscConfig+0x26c>)
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80053f6:	2001      	movs	r0, #1
 80053f8:	f000 fada 	bl	80059b0 <RCC_Delay>
 80053fc:	e01c      	b.n	8005438 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005404:	f7fe f808 	bl	8003418 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540a:	e00f      	b.n	800542c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540c:	f7fe f804 	bl	8003418 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d908      	bls.n	800542c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e140      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
 8005424:	42420000 	.word	0x42420000
 8005428:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800542c:	4b9e      	ldr	r3, [pc, #632]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e9      	bne.n	800540c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80a6 	beq.w	8005592 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005446:	2300      	movs	r3, #0
 8005448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800544a:	4b97      	ldr	r3, [pc, #604]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10d      	bne.n	8005472 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005456:	4b94      	ldr	r3, [pc, #592]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4a93      	ldr	r2, [pc, #588]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800545c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005460:	61d3      	str	r3, [r2, #28]
 8005462:	4b91      	ldr	r3, [pc, #580]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005472:	4b8e      	ldr	r3, [pc, #568]	; (80056ac <HAL_RCC_OscConfig+0x4f8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d118      	bne.n	80054b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800547e:	4b8b      	ldr	r3, [pc, #556]	; (80056ac <HAL_RCC_OscConfig+0x4f8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a8a      	ldr	r2, [pc, #552]	; (80056ac <HAL_RCC_OscConfig+0x4f8>)
 8005484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800548a:	f7fd ffc5 	bl	8003418 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005492:	f7fd ffc1 	bl	8003418 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b64      	cmp	r3, #100	; 0x64
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e0fd      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a4:	4b81      	ldr	r3, [pc, #516]	; (80056ac <HAL_RCC_OscConfig+0x4f8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0f0      	beq.n	8005492 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d106      	bne.n	80054c6 <HAL_RCC_OscConfig+0x312>
 80054b8:	4b7b      	ldr	r3, [pc, #492]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	4a7a      	ldr	r2, [pc, #488]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	6213      	str	r3, [r2, #32]
 80054c4:	e02d      	b.n	8005522 <HAL_RCC_OscConfig+0x36e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x334>
 80054ce:	4b76      	ldr	r3, [pc, #472]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	4a75      	ldr	r2, [pc, #468]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	6213      	str	r3, [r2, #32]
 80054da:	4b73      	ldr	r3, [pc, #460]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	4a72      	ldr	r2, [pc, #456]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80054e0:	f023 0304 	bic.w	r3, r3, #4
 80054e4:	6213      	str	r3, [r2, #32]
 80054e6:	e01c      	b.n	8005522 <HAL_RCC_OscConfig+0x36e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b05      	cmp	r3, #5
 80054ee:	d10c      	bne.n	800550a <HAL_RCC_OscConfig+0x356>
 80054f0:	4b6d      	ldr	r3, [pc, #436]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	4a6c      	ldr	r2, [pc, #432]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80054f6:	f043 0304 	orr.w	r3, r3, #4
 80054fa:	6213      	str	r3, [r2, #32]
 80054fc:	4b6a      	ldr	r3, [pc, #424]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	4a69      	ldr	r2, [pc, #420]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	6213      	str	r3, [r2, #32]
 8005508:	e00b      	b.n	8005522 <HAL_RCC_OscConfig+0x36e>
 800550a:	4b67      	ldr	r3, [pc, #412]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4a66      	ldr	r2, [pc, #408]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	6213      	str	r3, [r2, #32]
 8005516:	4b64      	ldr	r3, [pc, #400]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	4a63      	ldr	r2, [pc, #396]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800551c:	f023 0304 	bic.w	r3, r3, #4
 8005520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d015      	beq.n	8005556 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800552a:	f7fd ff75 	bl	8003418 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005530:	e00a      	b.n	8005548 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005532:	f7fd ff71 	bl	8003418 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e0ab      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005548:	4b57      	ldr	r3, [pc, #348]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ee      	beq.n	8005532 <HAL_RCC_OscConfig+0x37e>
 8005554:	e014      	b.n	8005580 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005556:	f7fd ff5f 	bl	8003418 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555c:	e00a      	b.n	8005574 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555e:	f7fd ff5b 	bl	8003418 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f241 3288 	movw	r2, #5000	; 0x1388
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e095      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005574:	4b4c      	ldr	r3, [pc, #304]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ee      	bne.n	800555e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d105      	bne.n	8005592 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005586:	4b48      	ldr	r3, [pc, #288]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	4a47      	ldr	r2, [pc, #284]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800558c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005590:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8081 	beq.w	800569e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800559c:	4b42      	ldr	r3, [pc, #264]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d061      	beq.n	800566c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d146      	bne.n	800563e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b0:	4b3f      	ldr	r3, [pc, #252]	; (80056b0 <HAL_RCC_OscConfig+0x4fc>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fd ff2f 	bl	8003418 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055be:	f7fd ff2b 	bl	8003418 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e067      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055d0:	4b35      	ldr	r3, [pc, #212]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e4:	d108      	bne.n	80055f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055e6:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	492d      	ldr	r1, [pc, #180]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f8:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a19      	ldr	r1, [r3, #32]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	430b      	orrs	r3, r1
 800560a:	4927      	ldr	r1, [pc, #156]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800560c:	4313      	orrs	r3, r2
 800560e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005610:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <HAL_RCC_OscConfig+0x4fc>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005616:	f7fd feff 	bl	8003418 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561e:	f7fd fefb 	bl	8003418 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e037      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005630:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCC_OscConfig+0x46a>
 800563c:	e02f      	b.n	800569e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563e:	4b1c      	ldr	r3, [pc, #112]	; (80056b0 <HAL_RCC_OscConfig+0x4fc>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005644:	f7fd fee8 	bl	8003418 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564c:	f7fd fee4 	bl	8003418 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e020      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x498>
 800566a:	e018      	b.n	800569e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e013      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCC_OscConfig+0x4f4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	429a      	cmp	r2, r3
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005696:	429a      	cmp	r2, r3
 8005698:	d001      	beq.n	800569e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40007000 	.word	0x40007000
 80056b0:	42420060 	.word	0x42420060

080056b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0d0      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056c8:	4b6a      	ldr	r3, [pc, #424]	; (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d910      	bls.n	80056f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b67      	ldr	r3, [pc, #412]	; (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 0207 	bic.w	r2, r3, #7
 80056de:	4965      	ldr	r1, [pc, #404]	; (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e6:	4b63      	ldr	r3, [pc, #396]	; (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0b8      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d020      	beq.n	8005746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005710:	4b59      	ldr	r3, [pc, #356]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4a58      	ldr	r2, [pc, #352]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800571a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005728:	4b53      	ldr	r3, [pc, #332]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4a52      	ldr	r2, [pc, #328]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800572e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005734:	4b50      	ldr	r3, [pc, #320]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	494d      	ldr	r1, [pc, #308]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d040      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d107      	bne.n	800576a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	4b47      	ldr	r3, [pc, #284]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d115      	bne.n	8005792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e07f      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005772:	4b41      	ldr	r3, [pc, #260]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e073      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005782:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e06b      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005792:	4b39      	ldr	r3, [pc, #228]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f023 0203 	bic.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4936      	ldr	r1, [pc, #216]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057a4:	f7fd fe38 	bl	8003418 <HAL_GetTick>
 80057a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ac:	f7fd fe34 	bl	8003418 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e053      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c2:	4b2d      	ldr	r3, [pc, #180]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f003 020c 	and.w	r2, r3, #12
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d1eb      	bne.n	80057ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057d4:	4b27      	ldr	r3, [pc, #156]	; (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d210      	bcs.n	8005804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e2:	4b24      	ldr	r3, [pc, #144]	; (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f023 0207 	bic.w	r2, r3, #7
 80057ea:	4922      	ldr	r1, [pc, #136]	; (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e032      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005810:	4b19      	ldr	r3, [pc, #100]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4916      	ldr	r1, [pc, #88]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800581e:	4313      	orrs	r3, r2
 8005820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800582e:	4b12      	ldr	r3, [pc, #72]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	490e      	ldr	r1, [pc, #56]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	4313      	orrs	r3, r2
 8005840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005842:	f000 f821 	bl	8005888 <HAL_RCC_GetSysClockFreq>
 8005846:	4601      	mov	r1, r0
 8005848:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <HAL_RCC_ClockConfig+0x1c8>)
 8005854:	5cd3      	ldrb	r3, [r2, r3]
 8005856:	fa21 f303 	lsr.w	r3, r1, r3
 800585a:	4a09      	ldr	r2, [pc, #36]	; (8005880 <HAL_RCC_ClockConfig+0x1cc>)
 800585c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <HAL_RCC_ClockConfig+0x1d0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f7fd fd96 	bl	8003394 <HAL_InitTick>

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40022000 	.word	0x40022000
 8005878:	40021000 	.word	0x40021000
 800587c:	08008e78 	.word	0x08008e78
 8005880:	2000000c 	.word	0x2000000c
 8005884:	20000010 	.word	0x20000010

08005888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005888:	b490      	push	{r4, r7}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800588e:	4b2a      	ldr	r3, [pc, #168]	; (8005938 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005890:	1d3c      	adds	r4, r7, #4
 8005892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005898:	4b28      	ldr	r3, [pc, #160]	; (800593c <HAL_RCC_GetSysClockFreq+0xb4>)
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	2300      	movs	r3, #0
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80058b2:	4b23      	ldr	r3, [pc, #140]	; (8005940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d002      	beq.n	80058c8 <HAL_RCC_GetSysClockFreq+0x40>
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d003      	beq.n	80058ce <HAL_RCC_GetSysClockFreq+0x46>
 80058c6:	e02d      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058ca:	623b      	str	r3, [r7, #32]
      break;
 80058cc:	e02d      	b.n	800592a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	0c9b      	lsrs	r3, r3, #18
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80058da:	4413      	add	r3, r2
 80058dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80058e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d013      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80058ec:	4b14      	ldr	r3, [pc, #80]	; (8005940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	0c5b      	lsrs	r3, r3, #17
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80058fa:	4413      	add	r3, r2
 80058fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005900:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4a0f      	ldr	r2, [pc, #60]	; (8005944 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005906:	fb02 f203 	mul.w	r2, r2, r3
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
 8005912:	e004      	b.n	800591e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	4a0c      	ldr	r2, [pc, #48]	; (8005948 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005918:	fb02 f303 	mul.w	r3, r2, r3
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	623b      	str	r3, [r7, #32]
      break;
 8005922:	e002      	b.n	800592a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005926:	623b      	str	r3, [r7, #32]
      break;
 8005928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800592a:	6a3b      	ldr	r3, [r7, #32]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3728      	adds	r7, #40	; 0x28
 8005930:	46bd      	mov	sp, r7
 8005932:	bc90      	pop	{r4, r7}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	08008e40 	.word	0x08008e40
 800593c:	08008e50 	.word	0x08008e50
 8005940:	40021000 	.word	0x40021000
 8005944:	007a1200 	.word	0x007a1200
 8005948:	003d0900 	.word	0x003d0900

0800594c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005950:	4b02      	ldr	r3, [pc, #8]	; (800595c <HAL_RCC_GetHCLKFreq+0x10>)
 8005952:	681b      	ldr	r3, [r3, #0]
}
 8005954:	4618      	mov	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr
 800595c:	2000000c 	.word	0x2000000c

08005960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005964:	f7ff fff2 	bl	800594c <HAL_RCC_GetHCLKFreq>
 8005968:	4601      	mov	r1, r0
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	4a03      	ldr	r2, [pc, #12]	; (8005984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005976:	5cd3      	ldrb	r3, [r2, r3]
 8005978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	08008e88 	.word	0x08008e88

08005988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800598c:	f7ff ffde 	bl	800594c <HAL_RCC_GetHCLKFreq>
 8005990:	4601      	mov	r1, r0
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	0adb      	lsrs	r3, r3, #11
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	4a03      	ldr	r2, [pc, #12]	; (80059ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800599e:	5cd3      	ldrb	r3, [r2, r3]
 80059a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000
 80059ac:	08008e88 	.word	0x08008e88

080059b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <RCC_Delay+0x34>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <RCC_Delay+0x38>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	0a5b      	lsrs	r3, r3, #9
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059cc:	bf00      	nop
  }
  while (Delay --);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1e5a      	subs	r2, r3, #1
 80059d2:	60fa      	str	r2, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f9      	bne.n	80059cc <RCC_Delay+0x1c>
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c
 80059e8:	10624dd3 	.word	0x10624dd3

080059ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d07d      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0c:	4b4f      	ldr	r3, [pc, #316]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a18:	4b4c      	ldr	r3, [pc, #304]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	4a4b      	ldr	r2, [pc, #300]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a22:	61d3      	str	r3, [r2, #28]
 8005a24:	4b49      	ldr	r3, [pc, #292]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a34:	4b46      	ldr	r3, [pc, #280]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d118      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a40:	4b43      	ldr	r3, [pc, #268]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a42      	ldr	r2, [pc, #264]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a4c:	f7fd fce4 	bl	8003418 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a52:	e008      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a54:	f7fd fce0 	bl	8003418 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b64      	cmp	r3, #100	; 0x64
 8005a60:	d901      	bls.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e06d      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a66:	4b3a      	ldr	r3, [pc, #232]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f0      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a72:	4b36      	ldr	r3, [pc, #216]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d02e      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d027      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a90:	4b2e      	ldr	r3, [pc, #184]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a9a:	4b2e      	ldr	r3, [pc, #184]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005aa0:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005aa6:	4a29      	ldr	r2, [pc, #164]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d014      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab6:	f7fd fcaf 	bl	8003418 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abc:	e00a      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fd fcab 	bl	8003418 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e036      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ee      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4917      	ldr	r1, [pc, #92]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d105      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af8:	4b14      	ldr	r3, [pc, #80]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	4a13      	ldr	r2, [pc, #76]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b10:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	490b      	ldr	r1, [pc, #44]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d008      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	4904      	ldr	r1, [pc, #16]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	40007000 	.word	0x40007000
 8005b54:	42420440 	.word	0x42420440

08005b58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b08d      	sub	sp, #52	; 0x34
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b60:	4b55      	ldr	r3, [pc, #340]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005b62:	f107 040c 	add.w	r4, r7, #12
 8005b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b6c:	4b53      	ldr	r3, [pc, #332]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
 8005b76:	2300      	movs	r3, #0
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61fb      	str	r3, [r7, #28]
 8005b82:	2300      	movs	r3, #0
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d07f      	beq.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005b8c:	2b10      	cmp	r3, #16
 8005b8e:	d002      	beq.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d048      	beq.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005b94:	e08b      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8005b96:	4b4a      	ldr	r3, [pc, #296]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005b9c:	4b48      	ldr	r3, [pc, #288]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d07f      	beq.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	0c9b      	lsrs	r3, r3, #18
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005bba:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d018      	beq.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bc6:	4b3e      	ldr	r3, [pc, #248]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	0c5b      	lsrs	r3, r3, #17
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005be6:	4a37      	ldr	r2, [pc, #220]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	fb02 f303 	mul.w	r3, r2, r3
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf6:	e004      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	4a33      	ldr	r2, [pc, #204]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005bfc:	fb02 f303 	mul.w	r3, r2, r3
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005c02:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c0e:	d102      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005c14:	e048      	b.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005c24:	e040      	b.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8005c26:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c36:	d108      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8005c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c48:	e01f      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c54:	d109      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8005c56:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8005c62:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c68:	e00f      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c74:	d11a      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005c76:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d014      	beq.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8005c82:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005c88:	e010      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005c8a:	e00f      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005c8c:	f7ff fe7c 	bl	8005988 <HAL_RCC_GetPCLK2Freq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	0b9b      	lsrs	r3, r3, #14
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005ca6:	e002      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005ca8:	bf00      	nop
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005cac:	bf00      	nop
    }
  }
  return (frequency);
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3734      	adds	r7, #52	; 0x34
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd90      	pop	{r4, r7, pc}
 8005cb8:	08008e54 	.word	0x08008e54
 8005cbc:	08008e64 	.word	0x08008e64
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	007a1200 	.word	0x007a1200
 8005cc8:	003d0900 	.word	0x003d0900
 8005ccc:	aaaaaaab 	.word	0xaaaaaaab

08005cd0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e084      	b.n	8005df0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	7c5b      	ldrb	r3, [r3, #17]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d105      	bne.n	8005cfc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fd f984 	bl	8003004 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fc1f 	bl	8006546 <HAL_RTC_WaitForSynchro>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d004      	beq.n	8005d18 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2204      	movs	r2, #4
 8005d12:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e06b      	b.n	8005df0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fcd8 	bl	80066ce <RTC_EnterInitMode>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2204      	movs	r2, #4
 8005d28:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e060      	b.n	8005df0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0207 	bic.w	r2, r2, #7
 8005d3c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005d46:	4b2c      	ldr	r3, [pc, #176]	; (8005df8 <HAL_RTC_Init+0x128>)
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	4a2b      	ldr	r2, [pc, #172]	; (8005df8 <HAL_RTC_Init+0x128>)
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005d52:	4b29      	ldr	r3, [pc, #164]	; (8005df8 <HAL_RTC_Init+0x128>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4926      	ldr	r1, [pc, #152]	; (8005df8 <HAL_RTC_Init+0x128>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d003      	beq.n	8005d76 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e00e      	b.n	8005d94 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005d76:	2001      	movs	r0, #1
 8005d78:	f7ff feee 	bl	8005b58 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d7c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2204      	movs	r2, #4
 8005d88:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e030      	b.n	8005df0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f023 010f 	bic.w	r1, r3, #15
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	0c1a      	lsrs	r2, r3, #16
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	b291      	uxth	r1, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fcac 	bl	800671e <RTC_ExitInitMode>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e00c      	b.n	8005df0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005dee:	2300      	movs	r3, #0
  }
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40006c00 	.word	0x40006c00

08005dfc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_RTC_SetTime+0x20>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e080      	b.n	8005f22 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	7c1b      	ldrb	r3, [r3, #16]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_RTC_SetTime+0x30>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e07a      	b.n	8005f22 <HAL_RTC_SetTime+0x126>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2202      	movs	r2, #2
 8005e36:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d113      	bne.n	8005e66 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005e48:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	4619      	mov	r1, r3
 8005e52:	460b      	mov	r3, r1
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	1a5b      	subs	r3, r3, r1
 8005e58:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005e5a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005e60:	4413      	add	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	e01e      	b.n	8005ea4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fc9c 	bl	80067a8 <RTC_Bcd2ToByte>
 8005e70:	4603      	mov	r3, r0
 8005e72:	461a      	mov	r2, r3
 8005e74:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005e78:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fc91 	bl	80067a8 <RTC_Bcd2ToByte>
 8005e86:	4603      	mov	r3, r0
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005e92:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	789b      	ldrb	r3, [r3, #2]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fc85 	bl	80067a8 <RTC_Bcd2ToByte>
 8005e9e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005ea0:	4423      	add	r3, r4
 8005ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005ea4:	6979      	ldr	r1, [r7, #20]
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 fbaa 	bl	8006600 <RTC_WriteTimeCounter>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e02f      	b.n	8005f22 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0205 	bic.w	r2, r2, #5
 8005ed0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fbbb 	bl	800664e <RTC_ReadAlarmCounter>
 8005ed8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d018      	beq.n	8005f14 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d214      	bcs.n	8005f14 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005ef0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ef4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ef6:	6939      	ldr	r1, [r7, #16]
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fbc1 	bl	8006680 <RTC_WriteAlarmCounter>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2204      	movs	r2, #4
 8005f08:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e006      	b.n	8005f22 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005f20:	2300      	movs	r3, #0
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd90      	pop	{r4, r7, pc}
	...

08005f2c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_RTC_GetTime+0x28>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0b5      	b.n	80060c4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e0ac      	b.n	80060c4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 fb18 	bl	80065a0 <RTC_ReadTimeCounter>
 8005f70:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	4a55      	ldr	r2, [pc, #340]	; (80060cc <HAL_RTC_GetTime+0x1a0>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0adb      	lsrs	r3, r3, #11
 8005f7c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4b52      	ldr	r3, [pc, #328]	; (80060cc <HAL_RTC_GetTime+0x1a0>)
 8005f82:	fba3 1302 	umull	r1, r3, r3, r2
 8005f86:	0adb      	lsrs	r3, r3, #11
 8005f88:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	4a4f      	ldr	r2, [pc, #316]	; (80060d0 <HAL_RTC_GetTime+0x1a4>)
 8005f94:	fba2 2303 	umull	r2, r3, r2, r3
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	4a4a      	ldr	r2, [pc, #296]	; (80060cc <HAL_RTC_GetTime+0x1a0>)
 8005fa4:	fba2 1203 	umull	r1, r2, r2, r3
 8005fa8:	0ad2      	lsrs	r2, r2, #11
 8005faa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005fae:	fb01 f202 	mul.w	r2, r1, r2
 8005fb2:	1a9a      	subs	r2, r3, r2
 8005fb4:	4b46      	ldr	r3, [pc, #280]	; (80060d0 <HAL_RTC_GetTime+0x1a4>)
 8005fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fba:	0959      	lsrs	r1, r3, #5
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	1a5b      	subs	r3, r3, r1
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	1ad1      	subs	r1, r2, r3
 8005fc6:	b2ca      	uxtb	r2, r1
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b17      	cmp	r3, #23
 8005fd0:	d955      	bls.n	800607e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4a3f      	ldr	r2, [pc, #252]	; (80060d4 <HAL_RTC_GetTime+0x1a8>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	091b      	lsrs	r3, r3, #4
 8005fdc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005fde:	6939      	ldr	r1, [r7, #16]
 8005fe0:	4b3c      	ldr	r3, [pc, #240]	; (80060d4 <HAL_RTC_GetTime+0x1a8>)
 8005fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8005fe6:	091a      	lsrs	r2, r3, #4
 8005fe8:	4613      	mov	r3, r2
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	4413      	add	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	1aca      	subs	r2, r1, r3
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fb28 	bl	800664e <RTC_ReadAlarmCounter>
 8005ffe:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d008      	beq.n	800601a <HAL_RTC_GetTime+0xee>
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	429a      	cmp	r2, r3
 800600e:	d904      	bls.n	800601a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	e002      	b.n	8006020 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4a2d      	ldr	r2, [pc, #180]	; (80060d8 <HAL_RTC_GetTime+0x1ac>)
 8006024:	fb02 f303 	mul.w	r3, r2, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800602e:	69b9      	ldr	r1, [r7, #24]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fae5 	bl	8006600 <RTC_WriteTimeCounter>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e041      	b.n	80060c4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d00c      	beq.n	8006062 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	4413      	add	r3, r2
 800604e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fb14 	bl	8006680 <RTC_WriteAlarmCounter>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e030      	b.n	80060c4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006062:	69f9      	ldr	r1, [r7, #28]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fb0b 	bl	8006680 <RTC_WriteAlarmCounter>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e027      	b.n	80060c4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006074:	6979      	ldr	r1, [r7, #20]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fbb3 	bl	80067e2 <RTC_DateUpdate>
 800607c:	e003      	b.n	8006086 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01a      	beq.n	80060c2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fb6c 	bl	800676e <RTC_ByteToBcd2>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fb63 	bl	800676e <RTC_ByteToBcd2>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	789b      	ldrb	r3, [r3, #2]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fb5a 	bl	800676e <RTC_ByteToBcd2>
 80060ba:	4603      	mov	r3, r0
 80060bc:	461a      	mov	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	91a2b3c5 	.word	0x91a2b3c5
 80060d0:	88888889 	.word	0x88888889
 80060d4:	aaaaaaab 	.word	0xaaaaaaab
 80060d8:	00015180 	.word	0x00015180

080060dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_RTC_SetDate+0x24>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e097      	b.n	8006234 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	7c1b      	ldrb	r3, [r3, #16]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_RTC_SetDate+0x34>
 800610c:	2302      	movs	r3, #2
 800610e:	e091      	b.n	8006234 <HAL_RTC_SetDate+0x158>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2202      	movs	r2, #2
 800611a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10c      	bne.n	800613c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	78da      	ldrb	r2, [r3, #3]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	785a      	ldrb	r2, [r3, #1]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	789a      	ldrb	r2, [r3, #2]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	739a      	strb	r2, [r3, #14]
 800613a:	e01a      	b.n	8006172 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	78db      	ldrb	r3, [r3, #3]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fb31 	bl	80067a8 <RTC_Bcd2ToByte>
 8006146:	4603      	mov	r3, r0
 8006148:	461a      	mov	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fb28 	bl	80067a8 <RTC_Bcd2ToByte>
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	789b      	ldrb	r3, [r3, #2]
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fb1f 	bl	80067a8 <RTC_Bcd2ToByte>
 800616a:	4603      	mov	r3, r0
 800616c:	461a      	mov	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	7bdb      	ldrb	r3, [r3, #15]
 8006176:	4618      	mov	r0, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	7b59      	ldrb	r1, [r3, #13]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	7b9b      	ldrb	r3, [r3, #14]
 8006180:	461a      	mov	r2, r3
 8006182:	f000 fc09 	bl	8006998 <RTC_WeekDayNum>
 8006186:	4603      	mov	r3, r0
 8006188:	461a      	mov	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	7b1a      	ldrb	r2, [r3, #12]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fa02 	bl	80065a0 <RTC_ReadTimeCounter>
 800619c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4a26      	ldr	r2, [pc, #152]	; (800623c <HAL_RTC_SetDate+0x160>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	0adb      	lsrs	r3, r3, #11
 80061a8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b18      	cmp	r3, #24
 80061ae:	d93a      	bls.n	8006226 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4a23      	ldr	r2, [pc, #140]	; (8006240 <HAL_RTC_SetDate+0x164>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	091b      	lsrs	r3, r3, #4
 80061ba:	4a22      	ldr	r2, [pc, #136]	; (8006244 <HAL_RTC_SetDate+0x168>)
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80061c6:	69f9      	ldr	r1, [r7, #28]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fa19 	bl	8006600 <RTC_WriteTimeCounter>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2204      	movs	r2, #4
 80061d8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e027      	b.n	8006234 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fa32 	bl	800664e <RTC_ReadAlarmCounter>
 80061ea:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d018      	beq.n	8006226 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d214      	bcs.n	8006226 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006202:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006206:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006208:	69b9      	ldr	r1, [r7, #24]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fa38 	bl	8006680 <RTC_WriteAlarmCounter>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2204      	movs	r2, #4
 800621a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e006      	b.n	8006234 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	91a2b3c5 	.word	0x91a2b3c5
 8006240:	aaaaaaab 	.word	0xaaaaaaab
 8006244:	00015180 	.word	0x00015180

08006248 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006248:	b590      	push	{r4, r7, lr}
 800624a:	b089      	sub	sp, #36	; 0x24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8006254:	2300      	movs	r3, #0
 8006256:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	2100      	movs	r1, #0
 800625e:	460a      	mov	r2, r1
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	460a      	mov	r2, r1
 8006264:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_RTC_SetAlarm+0x2a>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e07d      	b.n	8006372 <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	7c1b      	ldrb	r3, [r3, #16]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_RTC_SetAlarm+0x3a>
 800627e:	2302      	movs	r3, #2
 8006280:	e077      	b.n	8006372 <HAL_RTC_SetAlarm+0x12a>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2202      	movs	r2, #2
 800628c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800628e:	f107 0314 	add.w	r3, r7, #20
 8006292:	2200      	movs	r2, #0
 8006294:	4619      	mov	r1, r3
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fe48 	bl	8005f2c <HAL_RTC_GetTime>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e065      	b.n	8006372 <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80062a6:	7d3b      	ldrb	r3, [r7, #20]
 80062a8:	461a      	mov	r2, r3
 80062aa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80062ae:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80062b2:	7d7b      	ldrb	r3, [r7, #21]
 80062b4:	4619      	mov	r1, r3
 80062b6:	460b      	mov	r3, r1
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80062be:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80062c0:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80062c2:	4413      	add	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d113      	bne.n	80062f4 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80062d6:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	4619      	mov	r1, r3
 80062e0:	460b      	mov	r3, r1
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	1a5b      	subs	r3, r3, r1
 80062e6:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80062e8:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80062ee:	4413      	add	r3, r2
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	e01e      	b.n	8006332 <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fa55 	bl	80067a8 <RTC_Bcd2ToByte>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006306:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fa4a 	bl	80067a8 <RTC_Bcd2ToByte>
 8006314:	4603      	mov	r3, r0
 8006316:	461a      	mov	r2, r3
 8006318:	4613      	mov	r3, r2
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006320:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	789b      	ldrb	r3, [r3, #2]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fa3e 	bl	80067a8 <RTC_Bcd2ToByte>
 800632c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800632e:	4423      	add	r3, r4
 8006330:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	429a      	cmp	r2, r3
 8006338:	d205      	bcs.n	8006346 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006340:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006344:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006346:	69f9      	ldr	r1, [r7, #28]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f999 	bl	8006680 <RTC_WriteAlarmCounter>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d007      	beq.n	8006364 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2204      	movs	r2, #4
 8006358:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e006      	b.n	8006372 <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006370:	2300      	movs	r3, #0
  }
}
 8006372:	4618      	mov	r0, r3
 8006374:	3724      	adds	r7, #36	; 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd90      	pop	{r4, r7, pc}
	...

0800637c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800637c:	b590      	push	{r4, r7, lr}
 800637e:	b089      	sub	sp, #36	; 0x24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8006388:	2300      	movs	r3, #0
 800638a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800638c:	f107 0314 	add.w	r3, r7, #20
 8006390:	2100      	movs	r1, #0
 8006392:	460a      	mov	r2, r1
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	460a      	mov	r2, r1
 8006398:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_RTC_SetAlarm_IT+0x2a>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e096      	b.n	80064d8 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	7c1b      	ldrb	r3, [r3, #16]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_RTC_SetAlarm_IT+0x3a>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e090      	b.n	80064d8 <HAL_RTC_SetAlarm_IT+0x15c>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2202      	movs	r2, #2
 80063c0:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80063c2:	f107 0314 	add.w	r3, r7, #20
 80063c6:	2200      	movs	r2, #0
 80063c8:	4619      	mov	r1, r3
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff fdae 	bl	8005f2c <HAL_RTC_GetTime>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e07e      	b.n	80064d8 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80063da:	7d3b      	ldrb	r3, [r7, #20]
 80063dc:	461a      	mov	r2, r3
 80063de:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80063e2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80063e6:	7d7b      	ldrb	r3, [r7, #21]
 80063e8:	4619      	mov	r1, r3
 80063ea:	460b      	mov	r3, r1
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	1a5b      	subs	r3, r3, r1
 80063f0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80063f2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80063f4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80063f6:	4413      	add	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d113      	bne.n	8006428 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800640a:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	4619      	mov	r1, r3
 8006414:	460b      	mov	r3, r1
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	1a5b      	subs	r3, r3, r1
 800641a:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800641c:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006422:	4413      	add	r3, r2
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	e01e      	b.n	8006466 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f9bb 	bl	80067a8 <RTC_Bcd2ToByte>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800643a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f9b0 	bl	80067a8 <RTC_Bcd2ToByte>
 8006448:	4603      	mov	r3, r0
 800644a:	461a      	mov	r2, r3
 800644c:	4613      	mov	r3, r2
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	1a9b      	subs	r3, r3, r2
 8006452:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006454:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	789b      	ldrb	r3, [r3, #2]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f9a4 	bl	80067a8 <RTC_Bcd2ToByte>
 8006460:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006462:	4423      	add	r3, r4
 8006464:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	429a      	cmp	r2, r3
 800646c:	d205      	bcs.n	800647a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006474:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006478:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800647a:	69f9      	ldr	r1, [r7, #28]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f8ff 	bl	8006680 <RTC_WriteAlarmCounter>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2204      	movs	r2, #4
 800648c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e01f      	b.n	80064d8 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0202 	mvn.w	r2, #2
 80064a0:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0202 	orr.w	r2, r2, #2
 80064b0:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80064b2:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <HAL_RTC_SetAlarm_IT+0x164>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <HAL_RTC_SetAlarm_IT+0x164>)
 80064b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064bc:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80064be:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <HAL_RTC_SetAlarm_IT+0x164>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	4a07      	ldr	r2, [pc, #28]	; (80064e0 <HAL_RTC_SetAlarm_IT+0x164>)
 80064c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c8:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80064d6:	2300      	movs	r3, #0
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3724      	adds	r7, #36	; 0x24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}
 80064e0:	40010400 	.word	0x40010400

080064e4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00e      	beq.n	8006518 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f813 	bl	8006534 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f06f 0202 	mvn.w	r2, #2
 8006516:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <HAL_RTC_AlarmIRQHandler+0x4c>)
 800651a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800651e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	745a      	strb	r2, [r3, #17]
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40010400 	.word	0x40010400

08006534 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr

08006546 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e01d      	b.n	8006598 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0208 	bic.w	r2, r2, #8
 800656a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800656c:	f7fc ff54 	bl	8003418 <HAL_GetTick>
 8006570:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006572:	e009      	b.n	8006588 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006574:	f7fc ff50 	bl	8003418 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006582:	d901      	bls.n	8006588 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e007      	b.n	8006598 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0ee      	beq.n	8006574 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	827b      	strh	r3, [r7, #18]
 80065ac:	2300      	movs	r3, #0
 80065ae:	823b      	strh	r3, [r7, #16]
 80065b0:	2300      	movs	r3, #0
 80065b2:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80065d0:	8a7a      	ldrh	r2, [r7, #18]
 80065d2:	8a3b      	ldrh	r3, [r7, #16]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d008      	beq.n	80065ea <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80065d8:	8a3b      	ldrh	r3, [r7, #16]
 80065da:	041a      	lsls	r2, r3, #16
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e004      	b.n	80065f4 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80065ea:	8a7b      	ldrh	r3, [r7, #18]
 80065ec:	041a      	lsls	r2, r3, #16
 80065ee:	89fb      	ldrh	r3, [r7, #14]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80065f4:	697b      	ldr	r3, [r7, #20]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr

08006600 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f85d 	bl	80066ce <RTC_EnterInitMode>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	e011      	b.n	8006644 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	0c12      	lsrs	r2, r2, #16
 8006628:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	b292      	uxth	r2, r2
 8006632:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f872 	bl	800671e <RTC_ExitInitMode>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	81fb      	strh	r3, [r7, #14]
 800665a:	2300      	movs	r3, #0
 800665c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800666e:	89fb      	ldrh	r3, [r7, #14]
 8006670:	041a      	lsls	r2, r3, #16
 8006672:	89bb      	ldrh	r3, [r7, #12]
 8006674:	4313      	orrs	r3, r2
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr

08006680 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f81d 	bl	80066ce <RTC_EnterInitMode>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	73fb      	strb	r3, [r7, #15]
 800669e:	e011      	b.n	80066c4 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	0c12      	lsrs	r2, r2, #16
 80066a8:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	b292      	uxth	r2, r2
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f832 	bl	800671e <RTC_ExitInitMode>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80066da:	f7fc fe9d 	bl	8003418 <HAL_GetTick>
 80066de:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80066e0:	e009      	b.n	80066f6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80066e2:	f7fc fe99 	bl	8003418 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f0:	d901      	bls.n	80066f6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e00f      	b.n	8006716 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f003 0320 	and.w	r3, r3, #32
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0ee      	beq.n	80066e2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0210 	orr.w	r2, r2, #16
 8006712:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0210 	bic.w	r2, r2, #16
 8006738:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800673a:	f7fc fe6d 	bl	8003418 <HAL_GetTick>
 800673e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006740:	e009      	b.n	8006756 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006742:	f7fc fe69 	bl	8003418 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006750:	d901      	bls.n	8006756 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e007      	b.n	8006766 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0ee      	beq.n	8006742 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	4603      	mov	r3, r0
 8006776:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800677c:	e005      	b.n	800678a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3301      	adds	r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	3b0a      	subs	r3, #10
 8006788:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	2b09      	cmp	r3, #9
 800678e:	d8f6      	bhi.n	800677e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	b2da      	uxtb	r2, r3
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	4313      	orrs	r3, r2
 800679c:	b2db      	uxtb	r3, r3
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	091b      	lsrs	r3, r3, #4
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	4413      	add	r3, r2
 80067d6:	b2db      	uxtb	r3, r3
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b086      	sub	sp, #24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	7bdb      	ldrb	r3, [r3, #15]
 8006800:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7b5b      	ldrb	r3, [r3, #13]
 8006806:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	7b9b      	ldrb	r3, [r3, #14]
 800680c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	e06f      	b.n	80068f4 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d011      	beq.n	800683e <RTC_DateUpdate+0x5c>
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b03      	cmp	r3, #3
 800681e:	d00e      	beq.n	800683e <RTC_DateUpdate+0x5c>
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b05      	cmp	r3, #5
 8006824:	d00b      	beq.n	800683e <RTC_DateUpdate+0x5c>
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b07      	cmp	r3, #7
 800682a:	d008      	beq.n	800683e <RTC_DateUpdate+0x5c>
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b08      	cmp	r3, #8
 8006830:	d005      	beq.n	800683e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b0a      	cmp	r3, #10
 8006836:	d002      	beq.n	800683e <RTC_DateUpdate+0x5c>
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b0c      	cmp	r3, #12
 800683c:	d117      	bne.n	800686e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b1e      	cmp	r3, #30
 8006842:	d803      	bhi.n	800684c <RTC_DateUpdate+0x6a>
      {
        day++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800684a:	e050      	b.n	80068ee <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	2b0c      	cmp	r3, #12
 8006850:	d005      	beq.n	800685e <RTC_DateUpdate+0x7c>
        {
          month++;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3301      	adds	r3, #1
 8006856:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006858:	2301      	movs	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800685c:	e047      	b.n	80068ee <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800685e:	2301      	movs	r3, #1
 8006860:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006862:	2301      	movs	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
          year++;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	3301      	adds	r3, #1
 800686a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800686c:	e03f      	b.n	80068ee <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b04      	cmp	r3, #4
 8006872:	d008      	beq.n	8006886 <RTC_DateUpdate+0xa4>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b06      	cmp	r3, #6
 8006878:	d005      	beq.n	8006886 <RTC_DateUpdate+0xa4>
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b09      	cmp	r3, #9
 800687e:	d002      	beq.n	8006886 <RTC_DateUpdate+0xa4>
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b0b      	cmp	r3, #11
 8006884:	d10c      	bne.n	80068a0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b1d      	cmp	r3, #29
 800688a:	d803      	bhi.n	8006894 <RTC_DateUpdate+0xb2>
      {
        day++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3301      	adds	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006892:	e02c      	b.n	80068ee <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	3301      	adds	r3, #1
 8006898:	613b      	str	r3, [r7, #16]
        day = 1U;
 800689a:	2301      	movs	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800689e:	e026      	b.n	80068ee <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d123      	bne.n	80068ee <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b1b      	cmp	r3, #27
 80068aa:	d803      	bhi.n	80068b4 <RTC_DateUpdate+0xd2>
      {
        day++;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3301      	adds	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e01c      	b.n	80068ee <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b1c      	cmp	r3, #28
 80068b8:	d111      	bne.n	80068de <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f838 	bl	8006934 <RTC_IsLeapYear>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <RTC_DateUpdate+0xf0>
        {
          day++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e00d      	b.n	80068ee <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	3301      	adds	r3, #1
 80068d6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80068d8:	2301      	movs	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e007      	b.n	80068ee <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b1d      	cmp	r3, #29
 80068e2:	d104      	bne.n	80068ee <RTC_DateUpdate+0x10c>
      {
        month++;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3301      	adds	r3, #1
 80068e8:	613b      	str	r3, [r7, #16]
        day = 1U;
 80068ea:	2301      	movs	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	3301      	adds	r3, #1
 80068f2:	60bb      	str	r3, [r7, #8]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d38b      	bcc.n	8006814 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	b2db      	uxtb	r3, r3
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	4619      	mov	r1, r3
 800691e:	6978      	ldr	r0, [r7, #20]
 8006920:	f000 f83a 	bl	8006998 <RTC_WeekDayNum>
 8006924:	4603      	mov	r3, r0
 8006926:	461a      	mov	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	731a      	strb	r2, [r3, #12]
}
 800692c:	bf00      	nop
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	f003 0303 	and.w	r3, r3, #3
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	e01d      	b.n	800698a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	4a10      	ldr	r2, [pc, #64]	; (8006994 <RTC_IsLeapYear+0x60>)
 8006952:	fba2 1203 	umull	r1, r2, r2, r3
 8006956:	0952      	lsrs	r2, r2, #5
 8006958:	2164      	movs	r1, #100	; 0x64
 800695a:	fb01 f202 	mul.w	r2, r1, r2
 800695e:	1a9b      	subs	r3, r3, r2
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006966:	2301      	movs	r3, #1
 8006968:	e00f      	b.n	800698a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	4a09      	ldr	r2, [pc, #36]	; (8006994 <RTC_IsLeapYear+0x60>)
 800696e:	fba2 1203 	umull	r1, r2, r2, r3
 8006972:	09d2      	lsrs	r2, r2, #7
 8006974:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006978:	fb01 f202 	mul.w	r2, r1, r2
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006988:	2300      	movs	r3, #0
  }
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr
 8006994:	51eb851f 	.word	0x51eb851f

08006998 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
 80069a4:	4613      	mov	r3, r2
 80069a6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60bb      	str	r3, [r7, #8]
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80069b6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d82d      	bhi.n	8006a1a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80069be:	78fa      	ldrb	r2, [r7, #3]
 80069c0:	4613      	mov	r3, r2
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	4413      	add	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	4a2c      	ldr	r2, [pc, #176]	; (8006a7c <RTC_WeekDayNum+0xe4>)
 80069cc:	fba2 2303 	umull	r2, r3, r2, r3
 80069d0:	085a      	lsrs	r2, r3, #1
 80069d2:	78bb      	ldrb	r3, [r7, #2]
 80069d4:	441a      	add	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	441a      	add	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	3b01      	subs	r3, #1
 80069de:	089b      	lsrs	r3, r3, #2
 80069e0:	441a      	add	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	4926      	ldr	r1, [pc, #152]	; (8006a80 <RTC_WeekDayNum+0xe8>)
 80069e8:	fba1 1303 	umull	r1, r3, r1, r3
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	1ad2      	subs	r2, r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	4922      	ldr	r1, [pc, #136]	; (8006a80 <RTC_WeekDayNum+0xe8>)
 80069f6:	fba1 1303 	umull	r1, r3, r1, r3
 80069fa:	09db      	lsrs	r3, r3, #7
 80069fc:	4413      	add	r3, r2
 80069fe:	1d1a      	adds	r2, r3, #4
 8006a00:	4b20      	ldr	r3, [pc, #128]	; (8006a84 <RTC_WeekDayNum+0xec>)
 8006a02:	fba3 1302 	umull	r1, r3, r3, r2
 8006a06:	1ad1      	subs	r1, r2, r3
 8006a08:	0849      	lsrs	r1, r1, #1
 8006a0a:	440b      	add	r3, r1
 8006a0c:	0899      	lsrs	r1, r3, #2
 8006a0e:	460b      	mov	r3, r1
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	1a5b      	subs	r3, r3, r1
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e029      	b.n	8006a6e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <RTC_WeekDayNum+0xe4>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	085a      	lsrs	r2, r3, #1
 8006a2e:	78bb      	ldrb	r3, [r7, #2]
 8006a30:	441a      	add	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	441a      	add	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	441a      	add	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4910      	ldr	r1, [pc, #64]	; (8006a80 <RTC_WeekDayNum+0xe8>)
 8006a40:	fba1 1303 	umull	r1, r3, r1, r3
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	1ad2      	subs	r2, r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	490d      	ldr	r1, [pc, #52]	; (8006a80 <RTC_WeekDayNum+0xe8>)
 8006a4c:	fba1 1303 	umull	r1, r3, r1, r3
 8006a50:	09db      	lsrs	r3, r3, #7
 8006a52:	4413      	add	r3, r2
 8006a54:	1c9a      	adds	r2, r3, #2
 8006a56:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <RTC_WeekDayNum+0xec>)
 8006a58:	fba3 1302 	umull	r1, r3, r3, r2
 8006a5c:	1ad1      	subs	r1, r2, r3
 8006a5e:	0849      	lsrs	r1, r1, #1
 8006a60:	440b      	add	r3, r1
 8006a62:	0899      	lsrs	r1, r3, #2
 8006a64:	460b      	mov	r3, r1
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	1a5b      	subs	r3, r3, r1
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	b2db      	uxtb	r3, r3
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr
 8006a7c:	38e38e39 	.word	0x38e38e39
 8006a80:	51eb851f 	.word	0x51eb851f
 8006a84:	24924925 	.word	0x24924925

08006a88 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d024      	beq.n	8006ae8 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01d      	beq.n	8006ae8 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00b      	beq.n	8006ad2 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f821 	bl	8006b02 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0204 	mvn.w	r2, #4
 8006ac8:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2204      	movs	r2, #4
 8006ace:	745a      	strb	r2, [r3, #17]
 8006ad0:	e005      	b.n	8006ade <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f80c 	bl	8006af0 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f06f 0201 	mvn.w	r2, #1
 8006ae6:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr

08006b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e053      	b.n	8006bce <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d106      	bne.n	8006b46 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fc fac9 	bl	80030d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	ea42 0103 	orr.w	r1, r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	0c1a      	lsrs	r2, r3, #16
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f002 0204 	and.w	r2, r2, #4
 8006bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b088      	sub	sp, #32
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_SPI_Transmit+0x22>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e11e      	b.n	8006e36 <HAL_SPI_Transmit+0x260>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c00:	f7fc fc0a 	bl	8003418 <HAL_GetTick>
 8006c04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d002      	beq.n	8006c1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c16:	2302      	movs	r3, #2
 8006c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c1a:	e103      	b.n	8006e24 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <HAL_SPI_Transmit+0x52>
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c2c:	e0fa      	b.n	8006e24 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2203      	movs	r2, #3
 8006c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	88fa      	ldrh	r2, [r7, #6]
 8006c46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c74:	d107      	bne.n	8006c86 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d007      	beq.n	8006ca4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cac:	d14b      	bne.n	8006d46 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_SPI_Transmit+0xe6>
 8006cb6:	8afb      	ldrh	r3, [r7, #22]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d13e      	bne.n	8006d3a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	881a      	ldrh	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ccc:	1c9a      	adds	r2, r3, #2
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ce0:	e02b      	b.n	8006d3a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d112      	bne.n	8006d16 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	881a      	ldrh	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	1c9a      	adds	r2, r3, #2
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d14:	e011      	b.n	8006d3a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d16:	f7fc fb7f 	bl	8003418 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d803      	bhi.n	8006d2e <HAL_SPI_Transmit+0x158>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d102      	bne.n	8006d34 <HAL_SPI_Transmit+0x15e>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d38:	e074      	b.n	8006e24 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1ce      	bne.n	8006ce2 <HAL_SPI_Transmit+0x10c>
 8006d44:	e04c      	b.n	8006de0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <HAL_SPI_Transmit+0x17e>
 8006d4e:	8afb      	ldrh	r3, [r7, #22]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d140      	bne.n	8006dd6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d7a:	e02c      	b.n	8006dd6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d113      	bne.n	8006db2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	330c      	adds	r3, #12
 8006d94:	7812      	ldrb	r2, [r2, #0]
 8006d96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	86da      	strh	r2, [r3, #54]	; 0x36
 8006db0:	e011      	b.n	8006dd6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006db2:	f7fc fb31 	bl	8003418 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d803      	bhi.n	8006dca <HAL_SPI_Transmit+0x1f4>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc8:	d102      	bne.n	8006dd0 <HAL_SPI_Transmit+0x1fa>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d102      	bne.n	8006dd6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dd4:	e026      	b.n	8006e24 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1cd      	bne.n	8006d7c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fa36 	bl	8007256 <SPI_EndRxTxTransaction>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e000      	b.n	8006e24 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e34:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b08c      	sub	sp, #48	; 0x30
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x26>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e18a      	b.n	800717a <HAL_SPI_TransmitReceive+0x33c>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e6c:	f7fc fad4 	bl	8003418 <HAL_GetTick>
 8006e70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e82:	887b      	ldrh	r3, [r7, #2]
 8006e84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d00f      	beq.n	8006eae <HAL_SPI_TransmitReceive+0x70>
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e94:	d107      	bne.n	8006ea6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <HAL_SPI_TransmitReceive+0x68>
 8006e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d003      	beq.n	8006eae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006eac:	e15b      	b.n	8007166 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x82>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x82>
 8006eba:	887b      	ldrh	r3, [r7, #2]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ec6:	e14e      	b.n	8007166 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d003      	beq.n	8006edc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2205      	movs	r2, #5
 8006ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	887a      	ldrh	r2, [r7, #2]
 8006eec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	887a      	ldrh	r2, [r7, #2]
 8006ef2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	887a      	ldrh	r2, [r7, #2]
 8006efe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	887a      	ldrh	r2, [r7, #2]
 8006f04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1c:	2b40      	cmp	r3, #64	; 0x40
 8006f1e:	d007      	beq.n	8006f30 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f38:	d178      	bne.n	800702c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <HAL_SPI_TransmitReceive+0x10a>
 8006f42:	8b7b      	ldrh	r3, [r7, #26]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d166      	bne.n	8007016 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	881a      	ldrh	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	1c9a      	adds	r2, r3, #2
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f6c:	e053      	b.n	8007016 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d11b      	bne.n	8006fb4 <HAL_SPI_TransmitReceive+0x176>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d016      	beq.n	8006fb4 <HAL_SPI_TransmitReceive+0x176>
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d113      	bne.n	8006fb4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	881a      	ldrh	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	1c9a      	adds	r2, r3, #2
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d119      	bne.n	8006ff6 <HAL_SPI_TransmitReceive+0x1b8>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d014      	beq.n	8006ff6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	b292      	uxth	r2, r2
 8006fd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	1c9a      	adds	r2, r3, #2
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ff6:	f7fc fa0f 	bl	8003418 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007002:	429a      	cmp	r2, r3
 8007004:	d807      	bhi.n	8007016 <HAL_SPI_TransmitReceive+0x1d8>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d003      	beq.n	8007016 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007014:	e0a7      	b.n	8007166 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1a6      	bne.n	8006f6e <HAL_SPI_TransmitReceive+0x130>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1a1      	bne.n	8006f6e <HAL_SPI_TransmitReceive+0x130>
 800702a:	e07c      	b.n	8007126 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_SPI_TransmitReceive+0x1fc>
 8007034:	8b7b      	ldrh	r3, [r7, #26]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d16b      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	330c      	adds	r3, #12
 8007044:	7812      	ldrb	r2, [r2, #0]
 8007046:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007060:	e057      	b.n	8007112 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b02      	cmp	r3, #2
 800706e:	d11c      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x26c>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007074:	b29b      	uxth	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d017      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x26c>
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	2b01      	cmp	r3, #1
 800707e:	d114      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	7812      	ldrb	r2, [r2, #0]
 800708c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d119      	bne.n	80070ec <HAL_SPI_TransmitReceive+0x2ae>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d014      	beq.n	80070ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070e8:	2301      	movs	r3, #1
 80070ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070ec:	f7fc f994 	bl	8003418 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d803      	bhi.n	8007104 <HAL_SPI_TransmitReceive+0x2c6>
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d102      	bne.n	800710a <HAL_SPI_TransmitReceive+0x2cc>
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007110:	e029      	b.n	8007166 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1a2      	bne.n	8007062 <HAL_SPI_TransmitReceive+0x224>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d19d      	bne.n	8007062 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007128:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f893 	bl	8007256 <SPI_EndRxTxTransaction>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d006      	beq.n	8007144 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007142:	e010      	b.n	8007166 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10b      	bne.n	8007164 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	e000      	b.n	8007166 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007164:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800717a:	4618      	mov	r0, r3
 800717c:	3730      	adds	r7, #48	; 0x30
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	603b      	str	r3, [r7, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007192:	e04c      	b.n	800722e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d048      	beq.n	800722e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800719c:	f7fc f93c 	bl	8003418 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d902      	bls.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d13d      	bne.n	800722e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ca:	d111      	bne.n	80071f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071d4:	d004      	beq.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071de:	d107      	bne.n	80071f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f8:	d10f      	bne.n	800721a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e00f      	b.n	800724e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4013      	ands	r3, r2
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	429a      	cmp	r2, r3
 800723c:	bf0c      	ite	eq
 800723e:	2301      	moveq	r3, #1
 8007240:	2300      	movne	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	429a      	cmp	r2, r3
 800724a:	d1a3      	bne.n	8007194 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af02      	add	r7, sp, #8
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2200      	movs	r2, #0
 800726a:	2180      	movs	r1, #128	; 0x80
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff ff88 	bl	8007182 <SPI_WaitFlagStateUntilTimeout>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d007      	beq.n	8007288 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727c:	f043 0220 	orr.w	r2, r3, #32
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e000      	b.n	800728a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <__errno>:
 8007294:	4b01      	ldr	r3, [pc, #4]	; (800729c <__errno+0x8>)
 8007296:	6818      	ldr	r0, [r3, #0]
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	20000018 	.word	0x20000018

080072a0 <__libc_init_array>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	2500      	movs	r5, #0
 80072a4:	4e0c      	ldr	r6, [pc, #48]	; (80072d8 <__libc_init_array+0x38>)
 80072a6:	4c0d      	ldr	r4, [pc, #52]	; (80072dc <__libc_init_array+0x3c>)
 80072a8:	1ba4      	subs	r4, r4, r6
 80072aa:	10a4      	asrs	r4, r4, #2
 80072ac:	42a5      	cmp	r5, r4
 80072ae:	d109      	bne.n	80072c4 <__libc_init_array+0x24>
 80072b0:	f001 fdba 	bl	8008e28 <_init>
 80072b4:	2500      	movs	r5, #0
 80072b6:	4e0a      	ldr	r6, [pc, #40]	; (80072e0 <__libc_init_array+0x40>)
 80072b8:	4c0a      	ldr	r4, [pc, #40]	; (80072e4 <__libc_init_array+0x44>)
 80072ba:	1ba4      	subs	r4, r4, r6
 80072bc:	10a4      	asrs	r4, r4, #2
 80072be:	42a5      	cmp	r5, r4
 80072c0:	d105      	bne.n	80072ce <__libc_init_array+0x2e>
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072c8:	4798      	blx	r3
 80072ca:	3501      	adds	r5, #1
 80072cc:	e7ee      	b.n	80072ac <__libc_init_array+0xc>
 80072ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072d2:	4798      	blx	r3
 80072d4:	3501      	adds	r5, #1
 80072d6:	e7f2      	b.n	80072be <__libc_init_array+0x1e>
 80072d8:	080090c0 	.word	0x080090c0
 80072dc:	080090c0 	.word	0x080090c0
 80072e0:	080090c0 	.word	0x080090c0
 80072e4:	080090c4 	.word	0x080090c4

080072e8 <memcpy>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	1e43      	subs	r3, r0, #1
 80072ec:	440a      	add	r2, r1
 80072ee:	4291      	cmp	r1, r2
 80072f0:	d100      	bne.n	80072f4 <memcpy+0xc>
 80072f2:	bd10      	pop	{r4, pc}
 80072f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072fc:	e7f7      	b.n	80072ee <memcpy+0x6>

080072fe <memset>:
 80072fe:	4603      	mov	r3, r0
 8007300:	4402      	add	r2, r0
 8007302:	4293      	cmp	r3, r2
 8007304:	d100      	bne.n	8007308 <memset+0xa>
 8007306:	4770      	bx	lr
 8007308:	f803 1b01 	strb.w	r1, [r3], #1
 800730c:	e7f9      	b.n	8007302 <memset+0x4>

0800730e <__cvt>:
 800730e:	2b00      	cmp	r3, #0
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	461e      	mov	r6, r3
 8007316:	bfbb      	ittet	lt
 8007318:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800731c:	461e      	movlt	r6, r3
 800731e:	2300      	movge	r3, #0
 8007320:	232d      	movlt	r3, #45	; 0x2d
 8007322:	b088      	sub	sp, #32
 8007324:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007326:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800732a:	f027 0720 	bic.w	r7, r7, #32
 800732e:	2f46      	cmp	r7, #70	; 0x46
 8007330:	4614      	mov	r4, r2
 8007332:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007334:	700b      	strb	r3, [r1, #0]
 8007336:	d004      	beq.n	8007342 <__cvt+0x34>
 8007338:	2f45      	cmp	r7, #69	; 0x45
 800733a:	d100      	bne.n	800733e <__cvt+0x30>
 800733c:	3501      	adds	r5, #1
 800733e:	2302      	movs	r3, #2
 8007340:	e000      	b.n	8007344 <__cvt+0x36>
 8007342:	2303      	movs	r3, #3
 8007344:	aa07      	add	r2, sp, #28
 8007346:	9204      	str	r2, [sp, #16]
 8007348:	aa06      	add	r2, sp, #24
 800734a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800734e:	e9cd 3500 	strd	r3, r5, [sp]
 8007352:	4622      	mov	r2, r4
 8007354:	4633      	mov	r3, r6
 8007356:	f000 fba7 	bl	8007aa8 <_dtoa_r>
 800735a:	2f47      	cmp	r7, #71	; 0x47
 800735c:	4680      	mov	r8, r0
 800735e:	d102      	bne.n	8007366 <__cvt+0x58>
 8007360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007362:	07db      	lsls	r3, r3, #31
 8007364:	d526      	bpl.n	80073b4 <__cvt+0xa6>
 8007366:	2f46      	cmp	r7, #70	; 0x46
 8007368:	eb08 0905 	add.w	r9, r8, r5
 800736c:	d111      	bne.n	8007392 <__cvt+0x84>
 800736e:	f898 3000 	ldrb.w	r3, [r8]
 8007372:	2b30      	cmp	r3, #48	; 0x30
 8007374:	d10a      	bne.n	800738c <__cvt+0x7e>
 8007376:	2200      	movs	r2, #0
 8007378:	2300      	movs	r3, #0
 800737a:	4620      	mov	r0, r4
 800737c:	4631      	mov	r1, r6
 800737e:	f7f9 fb13 	bl	80009a8 <__aeabi_dcmpeq>
 8007382:	b918      	cbnz	r0, 800738c <__cvt+0x7e>
 8007384:	f1c5 0501 	rsb	r5, r5, #1
 8007388:	f8ca 5000 	str.w	r5, [sl]
 800738c:	f8da 3000 	ldr.w	r3, [sl]
 8007390:	4499      	add	r9, r3
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	4620      	mov	r0, r4
 8007398:	4631      	mov	r1, r6
 800739a:	f7f9 fb05 	bl	80009a8 <__aeabi_dcmpeq>
 800739e:	b938      	cbnz	r0, 80073b0 <__cvt+0xa2>
 80073a0:	2230      	movs	r2, #48	; 0x30
 80073a2:	9b07      	ldr	r3, [sp, #28]
 80073a4:	454b      	cmp	r3, r9
 80073a6:	d205      	bcs.n	80073b4 <__cvt+0xa6>
 80073a8:	1c59      	adds	r1, r3, #1
 80073aa:	9107      	str	r1, [sp, #28]
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	e7f8      	b.n	80073a2 <__cvt+0x94>
 80073b0:	f8cd 901c 	str.w	r9, [sp, #28]
 80073b4:	4640      	mov	r0, r8
 80073b6:	9b07      	ldr	r3, [sp, #28]
 80073b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073ba:	eba3 0308 	sub.w	r3, r3, r8
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	b008      	add	sp, #32
 80073c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080073c6 <__exponent>:
 80073c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073c8:	2900      	cmp	r1, #0
 80073ca:	bfb4      	ite	lt
 80073cc:	232d      	movlt	r3, #45	; 0x2d
 80073ce:	232b      	movge	r3, #43	; 0x2b
 80073d0:	4604      	mov	r4, r0
 80073d2:	bfb8      	it	lt
 80073d4:	4249      	neglt	r1, r1
 80073d6:	2909      	cmp	r1, #9
 80073d8:	f804 2b02 	strb.w	r2, [r4], #2
 80073dc:	7043      	strb	r3, [r0, #1]
 80073de:	dd21      	ble.n	8007424 <__exponent+0x5e>
 80073e0:	f10d 0307 	add.w	r3, sp, #7
 80073e4:	461f      	mov	r7, r3
 80073e6:	260a      	movs	r6, #10
 80073e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80073ec:	fb06 1115 	mls	r1, r6, r5, r1
 80073f0:	2d09      	cmp	r5, #9
 80073f2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80073f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073fa:	f103 32ff 	add.w	r2, r3, #4294967295
 80073fe:	4629      	mov	r1, r5
 8007400:	dc09      	bgt.n	8007416 <__exponent+0x50>
 8007402:	3130      	adds	r1, #48	; 0x30
 8007404:	3b02      	subs	r3, #2
 8007406:	f802 1c01 	strb.w	r1, [r2, #-1]
 800740a:	42bb      	cmp	r3, r7
 800740c:	4622      	mov	r2, r4
 800740e:	d304      	bcc.n	800741a <__exponent+0x54>
 8007410:	1a10      	subs	r0, r2, r0
 8007412:	b003      	add	sp, #12
 8007414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007416:	4613      	mov	r3, r2
 8007418:	e7e6      	b.n	80073e8 <__exponent+0x22>
 800741a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800741e:	f804 2b01 	strb.w	r2, [r4], #1
 8007422:	e7f2      	b.n	800740a <__exponent+0x44>
 8007424:	2330      	movs	r3, #48	; 0x30
 8007426:	4419      	add	r1, r3
 8007428:	7083      	strb	r3, [r0, #2]
 800742a:	1d02      	adds	r2, r0, #4
 800742c:	70c1      	strb	r1, [r0, #3]
 800742e:	e7ef      	b.n	8007410 <__exponent+0x4a>

08007430 <_printf_float>:
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	b091      	sub	sp, #68	; 0x44
 8007436:	460c      	mov	r4, r1
 8007438:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800743a:	4693      	mov	fp, r2
 800743c:	461e      	mov	r6, r3
 800743e:	4605      	mov	r5, r0
 8007440:	f001 f8e6 	bl	8008610 <_localeconv_r>
 8007444:	6803      	ldr	r3, [r0, #0]
 8007446:	4618      	mov	r0, r3
 8007448:	9309      	str	r3, [sp, #36]	; 0x24
 800744a:	f7f8 fe81 	bl	8000150 <strlen>
 800744e:	2300      	movs	r3, #0
 8007450:	930e      	str	r3, [sp, #56]	; 0x38
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	900a      	str	r0, [sp, #40]	; 0x28
 8007456:	3307      	adds	r3, #7
 8007458:	f023 0307 	bic.w	r3, r3, #7
 800745c:	f103 0208 	add.w	r2, r3, #8
 8007460:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007464:	f8d4 a000 	ldr.w	sl, [r4]
 8007468:	603a      	str	r2, [r7, #0]
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007472:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800747a:	930b      	str	r3, [sp, #44]	; 0x2c
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	4ba6      	ldr	r3, [pc, #664]	; (800771c <_printf_float+0x2ec>)
 8007482:	4638      	mov	r0, r7
 8007484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007486:	f7f9 fac1 	bl	8000a0c <__aeabi_dcmpun>
 800748a:	bb68      	cbnz	r0, 80074e8 <_printf_float+0xb8>
 800748c:	f04f 32ff 	mov.w	r2, #4294967295
 8007490:	4ba2      	ldr	r3, [pc, #648]	; (800771c <_printf_float+0x2ec>)
 8007492:	4638      	mov	r0, r7
 8007494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007496:	f7f9 fa9b 	bl	80009d0 <__aeabi_dcmple>
 800749a:	bb28      	cbnz	r0, 80074e8 <_printf_float+0xb8>
 800749c:	2200      	movs	r2, #0
 800749e:	2300      	movs	r3, #0
 80074a0:	4638      	mov	r0, r7
 80074a2:	4649      	mov	r1, r9
 80074a4:	f7f9 fa8a 	bl	80009bc <__aeabi_dcmplt>
 80074a8:	b110      	cbz	r0, 80074b0 <_printf_float+0x80>
 80074aa:	232d      	movs	r3, #45	; 0x2d
 80074ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b0:	4f9b      	ldr	r7, [pc, #620]	; (8007720 <_printf_float+0x2f0>)
 80074b2:	4b9c      	ldr	r3, [pc, #624]	; (8007724 <_printf_float+0x2f4>)
 80074b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074b8:	bf98      	it	ls
 80074ba:	461f      	movls	r7, r3
 80074bc:	2303      	movs	r3, #3
 80074be:	f04f 0900 	mov.w	r9, #0
 80074c2:	6123      	str	r3, [r4, #16]
 80074c4:	f02a 0304 	bic.w	r3, sl, #4
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	9600      	str	r6, [sp, #0]
 80074cc:	465b      	mov	r3, fp
 80074ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80074d0:	4621      	mov	r1, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 f9e2 	bl	800789c <_printf_common>
 80074d8:	3001      	adds	r0, #1
 80074da:	f040 8090 	bne.w	80075fe <_printf_float+0x1ce>
 80074de:	f04f 30ff 	mov.w	r0, #4294967295
 80074e2:	b011      	add	sp, #68	; 0x44
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	463a      	mov	r2, r7
 80074ea:	464b      	mov	r3, r9
 80074ec:	4638      	mov	r0, r7
 80074ee:	4649      	mov	r1, r9
 80074f0:	f7f9 fa8c 	bl	8000a0c <__aeabi_dcmpun>
 80074f4:	b110      	cbz	r0, 80074fc <_printf_float+0xcc>
 80074f6:	4f8c      	ldr	r7, [pc, #560]	; (8007728 <_printf_float+0x2f8>)
 80074f8:	4b8c      	ldr	r3, [pc, #560]	; (800772c <_printf_float+0x2fc>)
 80074fa:	e7db      	b.n	80074b4 <_printf_float+0x84>
 80074fc:	6863      	ldr	r3, [r4, #4]
 80074fe:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007502:	1c59      	adds	r1, r3, #1
 8007504:	a80d      	add	r0, sp, #52	; 0x34
 8007506:	a90e      	add	r1, sp, #56	; 0x38
 8007508:	d140      	bne.n	800758c <_printf_float+0x15c>
 800750a:	2306      	movs	r3, #6
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	f04f 0c00 	mov.w	ip, #0
 8007512:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007516:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800751a:	6863      	ldr	r3, [r4, #4]
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	463a      	mov	r2, r7
 8007526:	464b      	mov	r3, r9
 8007528:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800752c:	4628      	mov	r0, r5
 800752e:	f7ff feee 	bl	800730e <__cvt>
 8007532:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007536:	2b47      	cmp	r3, #71	; 0x47
 8007538:	4607      	mov	r7, r0
 800753a:	d109      	bne.n	8007550 <_printf_float+0x120>
 800753c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800753e:	1cd8      	adds	r0, r3, #3
 8007540:	db02      	blt.n	8007548 <_printf_float+0x118>
 8007542:	6862      	ldr	r2, [r4, #4]
 8007544:	4293      	cmp	r3, r2
 8007546:	dd47      	ble.n	80075d8 <_printf_float+0x1a8>
 8007548:	f1a8 0802 	sub.w	r8, r8, #2
 800754c:	fa5f f888 	uxtb.w	r8, r8
 8007550:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007554:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007556:	d824      	bhi.n	80075a2 <_printf_float+0x172>
 8007558:	3901      	subs	r1, #1
 800755a:	4642      	mov	r2, r8
 800755c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007560:	910d      	str	r1, [sp, #52]	; 0x34
 8007562:	f7ff ff30 	bl	80073c6 <__exponent>
 8007566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007568:	4681      	mov	r9, r0
 800756a:	1813      	adds	r3, r2, r0
 800756c:	2a01      	cmp	r2, #1
 800756e:	6123      	str	r3, [r4, #16]
 8007570:	dc02      	bgt.n	8007578 <_printf_float+0x148>
 8007572:	6822      	ldr	r2, [r4, #0]
 8007574:	07d1      	lsls	r1, r2, #31
 8007576:	d501      	bpl.n	800757c <_printf_float+0x14c>
 8007578:	3301      	adds	r3, #1
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0a2      	beq.n	80074ca <_printf_float+0x9a>
 8007584:	232d      	movs	r3, #45	; 0x2d
 8007586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800758a:	e79e      	b.n	80074ca <_printf_float+0x9a>
 800758c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007590:	f000 816e 	beq.w	8007870 <_printf_float+0x440>
 8007594:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007598:	d1b9      	bne.n	800750e <_printf_float+0xde>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1b7      	bne.n	800750e <_printf_float+0xde>
 800759e:	2301      	movs	r3, #1
 80075a0:	e7b4      	b.n	800750c <_printf_float+0xdc>
 80075a2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80075a6:	d119      	bne.n	80075dc <_printf_float+0x1ac>
 80075a8:	2900      	cmp	r1, #0
 80075aa:	6863      	ldr	r3, [r4, #4]
 80075ac:	dd0c      	ble.n	80075c8 <_printf_float+0x198>
 80075ae:	6121      	str	r1, [r4, #16]
 80075b0:	b913      	cbnz	r3, 80075b8 <_printf_float+0x188>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	07d2      	lsls	r2, r2, #31
 80075b6:	d502      	bpl.n	80075be <_printf_float+0x18e>
 80075b8:	3301      	adds	r3, #1
 80075ba:	440b      	add	r3, r1
 80075bc:	6123      	str	r3, [r4, #16]
 80075be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c0:	f04f 0900 	mov.w	r9, #0
 80075c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80075c6:	e7d9      	b.n	800757c <_printf_float+0x14c>
 80075c8:	b913      	cbnz	r3, 80075d0 <_printf_float+0x1a0>
 80075ca:	6822      	ldr	r2, [r4, #0]
 80075cc:	07d0      	lsls	r0, r2, #31
 80075ce:	d501      	bpl.n	80075d4 <_printf_float+0x1a4>
 80075d0:	3302      	adds	r3, #2
 80075d2:	e7f3      	b.n	80075bc <_printf_float+0x18c>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e7f1      	b.n	80075bc <_printf_float+0x18c>
 80075d8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80075dc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80075e0:	4293      	cmp	r3, r2
 80075e2:	db05      	blt.n	80075f0 <_printf_float+0x1c0>
 80075e4:	6822      	ldr	r2, [r4, #0]
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	07d1      	lsls	r1, r2, #31
 80075ea:	d5e8      	bpl.n	80075be <_printf_float+0x18e>
 80075ec:	3301      	adds	r3, #1
 80075ee:	e7e5      	b.n	80075bc <_printf_float+0x18c>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfcc      	ite	gt
 80075f4:	2301      	movgt	r3, #1
 80075f6:	f1c3 0302 	rsble	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	e7de      	b.n	80075bc <_printf_float+0x18c>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	055a      	lsls	r2, r3, #21
 8007602:	d407      	bmi.n	8007614 <_printf_float+0x1e4>
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	463a      	mov	r2, r7
 8007608:	4659      	mov	r1, fp
 800760a:	4628      	mov	r0, r5
 800760c:	47b0      	blx	r6
 800760e:	3001      	adds	r0, #1
 8007610:	d129      	bne.n	8007666 <_printf_float+0x236>
 8007612:	e764      	b.n	80074de <_printf_float+0xae>
 8007614:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007618:	f240 80d7 	bls.w	80077ca <_printf_float+0x39a>
 800761c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007620:	2200      	movs	r2, #0
 8007622:	2300      	movs	r3, #0
 8007624:	f7f9 f9c0 	bl	80009a8 <__aeabi_dcmpeq>
 8007628:	b388      	cbz	r0, 800768e <_printf_float+0x25e>
 800762a:	2301      	movs	r3, #1
 800762c:	4a40      	ldr	r2, [pc, #256]	; (8007730 <_printf_float+0x300>)
 800762e:	4659      	mov	r1, fp
 8007630:	4628      	mov	r0, r5
 8007632:	47b0      	blx	r6
 8007634:	3001      	adds	r0, #1
 8007636:	f43f af52 	beq.w	80074de <_printf_float+0xae>
 800763a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800763e:	429a      	cmp	r2, r3
 8007640:	db02      	blt.n	8007648 <_printf_float+0x218>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	07d8      	lsls	r0, r3, #31
 8007646:	d50e      	bpl.n	8007666 <_printf_float+0x236>
 8007648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800764c:	4659      	mov	r1, fp
 800764e:	4628      	mov	r0, r5
 8007650:	47b0      	blx	r6
 8007652:	3001      	adds	r0, #1
 8007654:	f43f af43 	beq.w	80074de <_printf_float+0xae>
 8007658:	2700      	movs	r7, #0
 800765a:	f104 081a 	add.w	r8, r4, #26
 800765e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007660:	3b01      	subs	r3, #1
 8007662:	42bb      	cmp	r3, r7
 8007664:	dc09      	bgt.n	800767a <_printf_float+0x24a>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	079f      	lsls	r7, r3, #30
 800766a:	f100 80fd 	bmi.w	8007868 <_printf_float+0x438>
 800766e:	68e0      	ldr	r0, [r4, #12]
 8007670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007672:	4298      	cmp	r0, r3
 8007674:	bfb8      	it	lt
 8007676:	4618      	movlt	r0, r3
 8007678:	e733      	b.n	80074e2 <_printf_float+0xb2>
 800767a:	2301      	movs	r3, #1
 800767c:	4642      	mov	r2, r8
 800767e:	4659      	mov	r1, fp
 8007680:	4628      	mov	r0, r5
 8007682:	47b0      	blx	r6
 8007684:	3001      	adds	r0, #1
 8007686:	f43f af2a 	beq.w	80074de <_printf_float+0xae>
 800768a:	3701      	adds	r7, #1
 800768c:	e7e7      	b.n	800765e <_printf_float+0x22e>
 800768e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007690:	2b00      	cmp	r3, #0
 8007692:	dc2b      	bgt.n	80076ec <_printf_float+0x2bc>
 8007694:	2301      	movs	r3, #1
 8007696:	4a26      	ldr	r2, [pc, #152]	; (8007730 <_printf_float+0x300>)
 8007698:	4659      	mov	r1, fp
 800769a:	4628      	mov	r0, r5
 800769c:	47b0      	blx	r6
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f af1d 	beq.w	80074de <_printf_float+0xae>
 80076a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a6:	b923      	cbnz	r3, 80076b2 <_printf_float+0x282>
 80076a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076aa:	b913      	cbnz	r3, 80076b2 <_printf_float+0x282>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	07d9      	lsls	r1, r3, #31
 80076b0:	d5d9      	bpl.n	8007666 <_printf_float+0x236>
 80076b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b6:	4659      	mov	r1, fp
 80076b8:	4628      	mov	r0, r5
 80076ba:	47b0      	blx	r6
 80076bc:	3001      	adds	r0, #1
 80076be:	f43f af0e 	beq.w	80074de <_printf_float+0xae>
 80076c2:	f04f 0800 	mov.w	r8, #0
 80076c6:	f104 091a 	add.w	r9, r4, #26
 80076ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076cc:	425b      	negs	r3, r3
 80076ce:	4543      	cmp	r3, r8
 80076d0:	dc01      	bgt.n	80076d6 <_printf_float+0x2a6>
 80076d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d4:	e797      	b.n	8007606 <_printf_float+0x1d6>
 80076d6:	2301      	movs	r3, #1
 80076d8:	464a      	mov	r2, r9
 80076da:	4659      	mov	r1, fp
 80076dc:	4628      	mov	r0, r5
 80076de:	47b0      	blx	r6
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f aefc 	beq.w	80074de <_printf_float+0xae>
 80076e6:	f108 0801 	add.w	r8, r8, #1
 80076ea:	e7ee      	b.n	80076ca <_printf_float+0x29a>
 80076ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076f0:	429a      	cmp	r2, r3
 80076f2:	bfa8      	it	ge
 80076f4:	461a      	movge	r2, r3
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	4690      	mov	r8, r2
 80076fa:	dd07      	ble.n	800770c <_printf_float+0x2dc>
 80076fc:	4613      	mov	r3, r2
 80076fe:	4659      	mov	r1, fp
 8007700:	463a      	mov	r2, r7
 8007702:	4628      	mov	r0, r5
 8007704:	47b0      	blx	r6
 8007706:	3001      	adds	r0, #1
 8007708:	f43f aee9 	beq.w	80074de <_printf_float+0xae>
 800770c:	f104 031a 	add.w	r3, r4, #26
 8007710:	f04f 0a00 	mov.w	sl, #0
 8007714:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007718:	930b      	str	r3, [sp, #44]	; 0x2c
 800771a:	e015      	b.n	8007748 <_printf_float+0x318>
 800771c:	7fefffff 	.word	0x7fefffff
 8007720:	08008e94 	.word	0x08008e94
 8007724:	08008e90 	.word	0x08008e90
 8007728:	08008e9c 	.word	0x08008e9c
 800772c:	08008e98 	.word	0x08008e98
 8007730:	08008ea0 	.word	0x08008ea0
 8007734:	2301      	movs	r3, #1
 8007736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007738:	4659      	mov	r1, fp
 800773a:	4628      	mov	r0, r5
 800773c:	47b0      	blx	r6
 800773e:	3001      	adds	r0, #1
 8007740:	f43f aecd 	beq.w	80074de <_printf_float+0xae>
 8007744:	f10a 0a01 	add.w	sl, sl, #1
 8007748:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800774c:	eba9 0308 	sub.w	r3, r9, r8
 8007750:	4553      	cmp	r3, sl
 8007752:	dcef      	bgt.n	8007734 <_printf_float+0x304>
 8007754:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007758:	429a      	cmp	r2, r3
 800775a:	444f      	add	r7, r9
 800775c:	db14      	blt.n	8007788 <_printf_float+0x358>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	07da      	lsls	r2, r3, #31
 8007762:	d411      	bmi.n	8007788 <_printf_float+0x358>
 8007764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007766:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007768:	eba3 0209 	sub.w	r2, r3, r9
 800776c:	eba3 0901 	sub.w	r9, r3, r1
 8007770:	4591      	cmp	r9, r2
 8007772:	bfa8      	it	ge
 8007774:	4691      	movge	r9, r2
 8007776:	f1b9 0f00 	cmp.w	r9, #0
 800777a:	dc0d      	bgt.n	8007798 <_printf_float+0x368>
 800777c:	2700      	movs	r7, #0
 800777e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007782:	f104 081a 	add.w	r8, r4, #26
 8007786:	e018      	b.n	80077ba <_printf_float+0x38a>
 8007788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800778c:	4659      	mov	r1, fp
 800778e:	4628      	mov	r0, r5
 8007790:	47b0      	blx	r6
 8007792:	3001      	adds	r0, #1
 8007794:	d1e6      	bne.n	8007764 <_printf_float+0x334>
 8007796:	e6a2      	b.n	80074de <_printf_float+0xae>
 8007798:	464b      	mov	r3, r9
 800779a:	463a      	mov	r2, r7
 800779c:	4659      	mov	r1, fp
 800779e:	4628      	mov	r0, r5
 80077a0:	47b0      	blx	r6
 80077a2:	3001      	adds	r0, #1
 80077a4:	d1ea      	bne.n	800777c <_printf_float+0x34c>
 80077a6:	e69a      	b.n	80074de <_printf_float+0xae>
 80077a8:	2301      	movs	r3, #1
 80077aa:	4642      	mov	r2, r8
 80077ac:	4659      	mov	r1, fp
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b0      	blx	r6
 80077b2:	3001      	adds	r0, #1
 80077b4:	f43f ae93 	beq.w	80074de <_printf_float+0xae>
 80077b8:	3701      	adds	r7, #1
 80077ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	eba3 0309 	sub.w	r3, r3, r9
 80077c4:	42bb      	cmp	r3, r7
 80077c6:	dcef      	bgt.n	80077a8 <_printf_float+0x378>
 80077c8:	e74d      	b.n	8007666 <_printf_float+0x236>
 80077ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077cc:	2a01      	cmp	r2, #1
 80077ce:	dc01      	bgt.n	80077d4 <_printf_float+0x3a4>
 80077d0:	07db      	lsls	r3, r3, #31
 80077d2:	d538      	bpl.n	8007846 <_printf_float+0x416>
 80077d4:	2301      	movs	r3, #1
 80077d6:	463a      	mov	r2, r7
 80077d8:	4659      	mov	r1, fp
 80077da:	4628      	mov	r0, r5
 80077dc:	47b0      	blx	r6
 80077de:	3001      	adds	r0, #1
 80077e0:	f43f ae7d 	beq.w	80074de <_printf_float+0xae>
 80077e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e8:	4659      	mov	r1, fp
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b0      	blx	r6
 80077ee:	3001      	adds	r0, #1
 80077f0:	f107 0701 	add.w	r7, r7, #1
 80077f4:	f43f ae73 	beq.w	80074de <_printf_float+0xae>
 80077f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077fe:	2200      	movs	r2, #0
 8007800:	f103 38ff 	add.w	r8, r3, #4294967295
 8007804:	2300      	movs	r3, #0
 8007806:	f7f9 f8cf 	bl	80009a8 <__aeabi_dcmpeq>
 800780a:	b9c0      	cbnz	r0, 800783e <_printf_float+0x40e>
 800780c:	4643      	mov	r3, r8
 800780e:	463a      	mov	r2, r7
 8007810:	4659      	mov	r1, fp
 8007812:	4628      	mov	r0, r5
 8007814:	47b0      	blx	r6
 8007816:	3001      	adds	r0, #1
 8007818:	d10d      	bne.n	8007836 <_printf_float+0x406>
 800781a:	e660      	b.n	80074de <_printf_float+0xae>
 800781c:	2301      	movs	r3, #1
 800781e:	4642      	mov	r2, r8
 8007820:	4659      	mov	r1, fp
 8007822:	4628      	mov	r0, r5
 8007824:	47b0      	blx	r6
 8007826:	3001      	adds	r0, #1
 8007828:	f43f ae59 	beq.w	80074de <_printf_float+0xae>
 800782c:	3701      	adds	r7, #1
 800782e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007830:	3b01      	subs	r3, #1
 8007832:	42bb      	cmp	r3, r7
 8007834:	dcf2      	bgt.n	800781c <_printf_float+0x3ec>
 8007836:	464b      	mov	r3, r9
 8007838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800783c:	e6e4      	b.n	8007608 <_printf_float+0x1d8>
 800783e:	2700      	movs	r7, #0
 8007840:	f104 081a 	add.w	r8, r4, #26
 8007844:	e7f3      	b.n	800782e <_printf_float+0x3fe>
 8007846:	2301      	movs	r3, #1
 8007848:	e7e1      	b.n	800780e <_printf_float+0x3de>
 800784a:	2301      	movs	r3, #1
 800784c:	4642      	mov	r2, r8
 800784e:	4659      	mov	r1, fp
 8007850:	4628      	mov	r0, r5
 8007852:	47b0      	blx	r6
 8007854:	3001      	adds	r0, #1
 8007856:	f43f ae42 	beq.w	80074de <_printf_float+0xae>
 800785a:	3701      	adds	r7, #1
 800785c:	68e3      	ldr	r3, [r4, #12]
 800785e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	42bb      	cmp	r3, r7
 8007864:	dcf1      	bgt.n	800784a <_printf_float+0x41a>
 8007866:	e702      	b.n	800766e <_printf_float+0x23e>
 8007868:	2700      	movs	r7, #0
 800786a:	f104 0819 	add.w	r8, r4, #25
 800786e:	e7f5      	b.n	800785c <_printf_float+0x42c>
 8007870:	2b00      	cmp	r3, #0
 8007872:	f43f ae94 	beq.w	800759e <_printf_float+0x16e>
 8007876:	f04f 0c00 	mov.w	ip, #0
 800787a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800787e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007882:	6022      	str	r2, [r4, #0]
 8007884:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007888:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	463a      	mov	r2, r7
 8007890:	464b      	mov	r3, r9
 8007892:	4628      	mov	r0, r5
 8007894:	f7ff fd3b 	bl	800730e <__cvt>
 8007898:	4607      	mov	r7, r0
 800789a:	e64f      	b.n	800753c <_printf_float+0x10c>

0800789c <_printf_common>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	4691      	mov	r9, r2
 80078a2:	461f      	mov	r7, r3
 80078a4:	688a      	ldr	r2, [r1, #8]
 80078a6:	690b      	ldr	r3, [r1, #16]
 80078a8:	4606      	mov	r6, r0
 80078aa:	4293      	cmp	r3, r2
 80078ac:	bfb8      	it	lt
 80078ae:	4613      	movlt	r3, r2
 80078b0:	f8c9 3000 	str.w	r3, [r9]
 80078b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b8:	460c      	mov	r4, r1
 80078ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078be:	b112      	cbz	r2, 80078c6 <_printf_common+0x2a>
 80078c0:	3301      	adds	r3, #1
 80078c2:	f8c9 3000 	str.w	r3, [r9]
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	0699      	lsls	r1, r3, #26
 80078ca:	bf42      	ittt	mi
 80078cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078d0:	3302      	addmi	r3, #2
 80078d2:	f8c9 3000 	strmi.w	r3, [r9]
 80078d6:	6825      	ldr	r5, [r4, #0]
 80078d8:	f015 0506 	ands.w	r5, r5, #6
 80078dc:	d107      	bne.n	80078ee <_printf_common+0x52>
 80078de:	f104 0a19 	add.w	sl, r4, #25
 80078e2:	68e3      	ldr	r3, [r4, #12]
 80078e4:	f8d9 2000 	ldr.w	r2, [r9]
 80078e8:	1a9b      	subs	r3, r3, r2
 80078ea:	42ab      	cmp	r3, r5
 80078ec:	dc29      	bgt.n	8007942 <_printf_common+0xa6>
 80078ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	3300      	adds	r3, #0
 80078f6:	bf18      	it	ne
 80078f8:	2301      	movne	r3, #1
 80078fa:	0692      	lsls	r2, r2, #26
 80078fc:	d42e      	bmi.n	800795c <_printf_common+0xc0>
 80078fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007902:	4639      	mov	r1, r7
 8007904:	4630      	mov	r0, r6
 8007906:	47c0      	blx	r8
 8007908:	3001      	adds	r0, #1
 800790a:	d021      	beq.n	8007950 <_printf_common+0xb4>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	68e5      	ldr	r5, [r4, #12]
 8007910:	f003 0306 	and.w	r3, r3, #6
 8007914:	2b04      	cmp	r3, #4
 8007916:	bf18      	it	ne
 8007918:	2500      	movne	r5, #0
 800791a:	f8d9 2000 	ldr.w	r2, [r9]
 800791e:	f04f 0900 	mov.w	r9, #0
 8007922:	bf08      	it	eq
 8007924:	1aad      	subeq	r5, r5, r2
 8007926:	68a3      	ldr	r3, [r4, #8]
 8007928:	6922      	ldr	r2, [r4, #16]
 800792a:	bf08      	it	eq
 800792c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007930:	4293      	cmp	r3, r2
 8007932:	bfc4      	itt	gt
 8007934:	1a9b      	subgt	r3, r3, r2
 8007936:	18ed      	addgt	r5, r5, r3
 8007938:	341a      	adds	r4, #26
 800793a:	454d      	cmp	r5, r9
 800793c:	d11a      	bne.n	8007974 <_printf_common+0xd8>
 800793e:	2000      	movs	r0, #0
 8007940:	e008      	b.n	8007954 <_printf_common+0xb8>
 8007942:	2301      	movs	r3, #1
 8007944:	4652      	mov	r2, sl
 8007946:	4639      	mov	r1, r7
 8007948:	4630      	mov	r0, r6
 800794a:	47c0      	blx	r8
 800794c:	3001      	adds	r0, #1
 800794e:	d103      	bne.n	8007958 <_printf_common+0xbc>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007958:	3501      	adds	r5, #1
 800795a:	e7c2      	b.n	80078e2 <_printf_common+0x46>
 800795c:	2030      	movs	r0, #48	; 0x30
 800795e:	18e1      	adds	r1, r4, r3
 8007960:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800796a:	4422      	add	r2, r4
 800796c:	3302      	adds	r3, #2
 800796e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007972:	e7c4      	b.n	80078fe <_printf_common+0x62>
 8007974:	2301      	movs	r3, #1
 8007976:	4622      	mov	r2, r4
 8007978:	4639      	mov	r1, r7
 800797a:	4630      	mov	r0, r6
 800797c:	47c0      	blx	r8
 800797e:	3001      	adds	r0, #1
 8007980:	d0e6      	beq.n	8007950 <_printf_common+0xb4>
 8007982:	f109 0901 	add.w	r9, r9, #1
 8007986:	e7d8      	b.n	800793a <_printf_common+0x9e>

08007988 <quorem>:
 8007988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	6903      	ldr	r3, [r0, #16]
 800798e:	690c      	ldr	r4, [r1, #16]
 8007990:	4680      	mov	r8, r0
 8007992:	42a3      	cmp	r3, r4
 8007994:	f2c0 8084 	blt.w	8007aa0 <quorem+0x118>
 8007998:	3c01      	subs	r4, #1
 800799a:	f101 0714 	add.w	r7, r1, #20
 800799e:	f100 0614 	add.w	r6, r0, #20
 80079a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80079a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80079aa:	3501      	adds	r5, #1
 80079ac:	fbb0 f5f5 	udiv	r5, r0, r5
 80079b0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80079b4:	eb06 030c 	add.w	r3, r6, ip
 80079b8:	eb07 090c 	add.w	r9, r7, ip
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	b39d      	cbz	r5, 8007a28 <quorem+0xa0>
 80079c0:	f04f 0a00 	mov.w	sl, #0
 80079c4:	4638      	mov	r0, r7
 80079c6:	46b6      	mov	lr, r6
 80079c8:	46d3      	mov	fp, sl
 80079ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80079ce:	b293      	uxth	r3, r2
 80079d0:	fb05 a303 	mla	r3, r5, r3, sl
 80079d4:	0c12      	lsrs	r2, r2, #16
 80079d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079da:	fb05 a202 	mla	r2, r5, r2, sl
 80079de:	b29b      	uxth	r3, r3
 80079e0:	ebab 0303 	sub.w	r3, fp, r3
 80079e4:	f8de b000 	ldr.w	fp, [lr]
 80079e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80079ec:	fa1f fb8b 	uxth.w	fp, fp
 80079f0:	445b      	add	r3, fp
 80079f2:	fa1f fb82 	uxth.w	fp, r2
 80079f6:	f8de 2000 	ldr.w	r2, [lr]
 80079fa:	4581      	cmp	r9, r0
 80079fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007a00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007a0e:	f84e 3b04 	str.w	r3, [lr], #4
 8007a12:	d2da      	bcs.n	80079ca <quorem+0x42>
 8007a14:	f856 300c 	ldr.w	r3, [r6, ip]
 8007a18:	b933      	cbnz	r3, 8007a28 <quorem+0xa0>
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	3b04      	subs	r3, #4
 8007a1e:	429e      	cmp	r6, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	d331      	bcc.n	8007a88 <quorem+0x100>
 8007a24:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a28:	4640      	mov	r0, r8
 8007a2a:	f001 f81b 	bl	8008a64 <__mcmp>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	db26      	blt.n	8007a80 <quorem+0xf8>
 8007a32:	4630      	mov	r0, r6
 8007a34:	f04f 0c00 	mov.w	ip, #0
 8007a38:	3501      	adds	r5, #1
 8007a3a:	f857 1b04 	ldr.w	r1, [r7], #4
 8007a3e:	f8d0 e000 	ldr.w	lr, [r0]
 8007a42:	b28b      	uxth	r3, r1
 8007a44:	ebac 0303 	sub.w	r3, ip, r3
 8007a48:	fa1f f28e 	uxth.w	r2, lr
 8007a4c:	4413      	add	r3, r2
 8007a4e:	0c0a      	lsrs	r2, r1, #16
 8007a50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a5e:	45b9      	cmp	r9, r7
 8007a60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a64:	f840 3b04 	str.w	r3, [r0], #4
 8007a68:	d2e7      	bcs.n	8007a3a <quorem+0xb2>
 8007a6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007a6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007a72:	b92a      	cbnz	r2, 8007a80 <quorem+0xf8>
 8007a74:	3b04      	subs	r3, #4
 8007a76:	429e      	cmp	r6, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	d30b      	bcc.n	8007a94 <quorem+0x10c>
 8007a7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a80:	4628      	mov	r0, r5
 8007a82:	b003      	add	sp, #12
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	3b04      	subs	r3, #4
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	d1c9      	bne.n	8007a24 <quorem+0x9c>
 8007a90:	3c01      	subs	r4, #1
 8007a92:	e7c4      	b.n	8007a1e <quorem+0x96>
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	3b04      	subs	r3, #4
 8007a98:	2a00      	cmp	r2, #0
 8007a9a:	d1ef      	bne.n	8007a7c <quorem+0xf4>
 8007a9c:	3c01      	subs	r4, #1
 8007a9e:	e7ea      	b.n	8007a76 <quorem+0xee>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e7ee      	b.n	8007a82 <quorem+0xfa>
 8007aa4:	0000      	movs	r0, r0
	...

08007aa8 <_dtoa_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	4616      	mov	r6, r2
 8007aae:	461f      	mov	r7, r3
 8007ab0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ab2:	b095      	sub	sp, #84	; 0x54
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007aba:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007abe:	b93d      	cbnz	r5, 8007ad0 <_dtoa_r+0x28>
 8007ac0:	2010      	movs	r0, #16
 8007ac2:	f000 fdb3 	bl	800862c <malloc>
 8007ac6:	6260      	str	r0, [r4, #36]	; 0x24
 8007ac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007acc:	6005      	str	r5, [r0, #0]
 8007ace:	60c5      	str	r5, [r0, #12]
 8007ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	b151      	cbz	r1, 8007aec <_dtoa_r+0x44>
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4093      	lsls	r3, r2
 8007adc:	604a      	str	r2, [r1, #4]
 8007ade:	608b      	str	r3, [r1, #8]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fddf 	bl	80086a4 <_Bfree>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	1e3b      	subs	r3, r7, #0
 8007aee:	bfaf      	iteee	ge
 8007af0:	2300      	movge	r3, #0
 8007af2:	2201      	movlt	r2, #1
 8007af4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007af8:	9303      	strlt	r3, [sp, #12]
 8007afa:	bfac      	ite	ge
 8007afc:	f8c8 3000 	strge.w	r3, [r8]
 8007b00:	f8c8 2000 	strlt.w	r2, [r8]
 8007b04:	4bae      	ldr	r3, [pc, #696]	; (8007dc0 <_dtoa_r+0x318>)
 8007b06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b0a:	ea33 0308 	bics.w	r3, r3, r8
 8007b0e:	d11b      	bne.n	8007b48 <_dtoa_r+0xa0>
 8007b10:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	b923      	cbnz	r3, 8007b26 <_dtoa_r+0x7e>
 8007b1c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007b20:	2800      	cmp	r0, #0
 8007b22:	f000 8545 	beq.w	80085b0 <_dtoa_r+0xb08>
 8007b26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b28:	b953      	cbnz	r3, 8007b40 <_dtoa_r+0x98>
 8007b2a:	4ba6      	ldr	r3, [pc, #664]	; (8007dc4 <_dtoa_r+0x31c>)
 8007b2c:	e021      	b.n	8007b72 <_dtoa_r+0xca>
 8007b2e:	4ba6      	ldr	r3, [pc, #664]	; (8007dc8 <_dtoa_r+0x320>)
 8007b30:	9306      	str	r3, [sp, #24]
 8007b32:	3308      	adds	r3, #8
 8007b34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	9806      	ldr	r0, [sp, #24]
 8007b3a:	b015      	add	sp, #84	; 0x54
 8007b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b40:	4ba0      	ldr	r3, [pc, #640]	; (8007dc4 <_dtoa_r+0x31c>)
 8007b42:	9306      	str	r3, [sp, #24]
 8007b44:	3303      	adds	r3, #3
 8007b46:	e7f5      	b.n	8007b34 <_dtoa_r+0x8c>
 8007b48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4630      	mov	r0, r6
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f8 ff28 	bl	80009a8 <__aeabi_dcmpeq>
 8007b58:	4682      	mov	sl, r0
 8007b5a:	b160      	cbz	r0, 8007b76 <_dtoa_r+0xce>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8520 	beq.w	80085aa <_dtoa_r+0xb02>
 8007b6a:	4b98      	ldr	r3, [pc, #608]	; (8007dcc <_dtoa_r+0x324>)
 8007b6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	9306      	str	r3, [sp, #24]
 8007b74:	e7e0      	b.n	8007b38 <_dtoa_r+0x90>
 8007b76:	ab12      	add	r3, sp, #72	; 0x48
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	ab13      	add	r3, sp, #76	; 0x4c
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	4632      	mov	r2, r6
 8007b80:	463b      	mov	r3, r7
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 ffe6 	bl	8008b54 <__d2b>
 8007b88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b8c:	4683      	mov	fp, r0
 8007b8e:	2d00      	cmp	r5, #0
 8007b90:	d07d      	beq.n	8007c8e <_dtoa_r+0x1e6>
 8007b92:	46b0      	mov	r8, r6
 8007b94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b98:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007b9c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007ba0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ba4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4b89      	ldr	r3, [pc, #548]	; (8007dd0 <_dtoa_r+0x328>)
 8007bac:	4640      	mov	r0, r8
 8007bae:	4649      	mov	r1, r9
 8007bb0:	f7f8 fada 	bl	8000168 <__aeabi_dsub>
 8007bb4:	a37c      	add	r3, pc, #496	; (adr r3, 8007da8 <_dtoa_r+0x300>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f7f8 fc8d 	bl	80004d8 <__aeabi_dmul>
 8007bbe:	a37c      	add	r3, pc, #496	; (adr r3, 8007db0 <_dtoa_r+0x308>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fad2 	bl	800016c <__adddf3>
 8007bc8:	4606      	mov	r6, r0
 8007bca:	4628      	mov	r0, r5
 8007bcc:	460f      	mov	r7, r1
 8007bce:	f7f8 fc19 	bl	8000404 <__aeabi_i2d>
 8007bd2:	a379      	add	r3, pc, #484	; (adr r3, 8007db8 <_dtoa_r+0x310>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 fc7e 	bl	80004d8 <__aeabi_dmul>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4630      	mov	r0, r6
 8007be2:	4639      	mov	r1, r7
 8007be4:	f7f8 fac2 	bl	800016c <__adddf3>
 8007be8:	4606      	mov	r6, r0
 8007bea:	460f      	mov	r7, r1
 8007bec:	f7f8 ff24 	bl	8000a38 <__aeabi_d2iz>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4682      	mov	sl, r0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	f7f8 fedf 	bl	80009bc <__aeabi_dcmplt>
 8007bfe:	b148      	cbz	r0, 8007c14 <_dtoa_r+0x16c>
 8007c00:	4650      	mov	r0, sl
 8007c02:	f7f8 fbff 	bl	8000404 <__aeabi_i2d>
 8007c06:	4632      	mov	r2, r6
 8007c08:	463b      	mov	r3, r7
 8007c0a:	f7f8 fecd 	bl	80009a8 <__aeabi_dcmpeq>
 8007c0e:	b908      	cbnz	r0, 8007c14 <_dtoa_r+0x16c>
 8007c10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c14:	f1ba 0f16 	cmp.w	sl, #22
 8007c18:	d85a      	bhi.n	8007cd0 <_dtoa_r+0x228>
 8007c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c1e:	496d      	ldr	r1, [pc, #436]	; (8007dd4 <_dtoa_r+0x32c>)
 8007c20:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c28:	f7f8 fee6 	bl	80009f8 <__aeabi_dcmpgt>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d051      	beq.n	8007cd4 <_dtoa_r+0x22c>
 8007c30:	2300      	movs	r3, #0
 8007c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c36:	930d      	str	r3, [sp, #52]	; 0x34
 8007c38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c3a:	1b5d      	subs	r5, r3, r5
 8007c3c:	1e6b      	subs	r3, r5, #1
 8007c3e:	9307      	str	r3, [sp, #28]
 8007c40:	bf43      	ittte	mi
 8007c42:	2300      	movmi	r3, #0
 8007c44:	f1c5 0901 	rsbmi	r9, r5, #1
 8007c48:	9307      	strmi	r3, [sp, #28]
 8007c4a:	f04f 0900 	movpl.w	r9, #0
 8007c4e:	f1ba 0f00 	cmp.w	sl, #0
 8007c52:	db41      	blt.n	8007cd8 <_dtoa_r+0x230>
 8007c54:	9b07      	ldr	r3, [sp, #28]
 8007c56:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007c5a:	4453      	add	r3, sl
 8007c5c:	9307      	str	r3, [sp, #28]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9308      	str	r3, [sp, #32]
 8007c62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c64:	2b09      	cmp	r3, #9
 8007c66:	f200 808f 	bhi.w	8007d88 <_dtoa_r+0x2e0>
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	bfc4      	itt	gt
 8007c6e:	3b04      	subgt	r3, #4
 8007c70:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007c72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c74:	bfc8      	it	gt
 8007c76:	2500      	movgt	r5, #0
 8007c78:	f1a3 0302 	sub.w	r3, r3, #2
 8007c7c:	bfd8      	it	le
 8007c7e:	2501      	movle	r5, #1
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	f200 808d 	bhi.w	8007da0 <_dtoa_r+0x2f8>
 8007c86:	e8df f003 	tbb	[pc, r3]
 8007c8a:	7d7b      	.short	0x7d7b
 8007c8c:	6f2f      	.short	0x6f2f
 8007c8e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007c92:	441d      	add	r5, r3
 8007c94:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007c98:	2820      	cmp	r0, #32
 8007c9a:	dd13      	ble.n	8007cc4 <_dtoa_r+0x21c>
 8007c9c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007ca0:	9b02      	ldr	r3, [sp, #8]
 8007ca2:	fa08 f800 	lsl.w	r8, r8, r0
 8007ca6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007caa:	fa23 f000 	lsr.w	r0, r3, r0
 8007cae:	ea48 0000 	orr.w	r0, r8, r0
 8007cb2:	f7f8 fb97 	bl	80003e4 <__aeabi_ui2d>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4680      	mov	r8, r0
 8007cba:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007cbe:	3d01      	subs	r5, #1
 8007cc0:	9310      	str	r3, [sp, #64]	; 0x40
 8007cc2:	e771      	b.n	8007ba8 <_dtoa_r+0x100>
 8007cc4:	9b02      	ldr	r3, [sp, #8]
 8007cc6:	f1c0 0020 	rsb	r0, r0, #32
 8007cca:	fa03 f000 	lsl.w	r0, r3, r0
 8007cce:	e7f0      	b.n	8007cb2 <_dtoa_r+0x20a>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e7b0      	b.n	8007c36 <_dtoa_r+0x18e>
 8007cd4:	900d      	str	r0, [sp, #52]	; 0x34
 8007cd6:	e7af      	b.n	8007c38 <_dtoa_r+0x190>
 8007cd8:	f1ca 0300 	rsb	r3, sl, #0
 8007cdc:	9308      	str	r3, [sp, #32]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	eba9 090a 	sub.w	r9, r9, sl
 8007ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce6:	e7bc      	b.n	8007c62 <_dtoa_r+0x1ba>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	9309      	str	r3, [sp, #36]	; 0x24
 8007cec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	dd74      	ble.n	8007ddc <_dtoa_r+0x334>
 8007cf2:	4698      	mov	r8, r3
 8007cf4:	9304      	str	r3, [sp, #16]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007cfa:	6072      	str	r2, [r6, #4]
 8007cfc:	2204      	movs	r2, #4
 8007cfe:	f102 0014 	add.w	r0, r2, #20
 8007d02:	4298      	cmp	r0, r3
 8007d04:	6871      	ldr	r1, [r6, #4]
 8007d06:	d96e      	bls.n	8007de6 <_dtoa_r+0x33e>
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 fc97 	bl	800863c <_Balloc>
 8007d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d10:	6030      	str	r0, [r6, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f1b8 0f0e 	cmp.w	r8, #14
 8007d18:	9306      	str	r3, [sp, #24]
 8007d1a:	f200 80ed 	bhi.w	8007ef8 <_dtoa_r+0x450>
 8007d1e:	2d00      	cmp	r5, #0
 8007d20:	f000 80ea 	beq.w	8007ef8 <_dtoa_r+0x450>
 8007d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d28:	f1ba 0f00 	cmp.w	sl, #0
 8007d2c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007d30:	dd77      	ble.n	8007e22 <_dtoa_r+0x37a>
 8007d32:	4a28      	ldr	r2, [pc, #160]	; (8007dd4 <_dtoa_r+0x32c>)
 8007d34:	f00a 030f 	and.w	r3, sl, #15
 8007d38:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007d3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d40:	06f0      	lsls	r0, r6, #27
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d4a:	d568      	bpl.n	8007e1e <_dtoa_r+0x376>
 8007d4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d50:	4b21      	ldr	r3, [pc, #132]	; (8007dd8 <_dtoa_r+0x330>)
 8007d52:	2503      	movs	r5, #3
 8007d54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d58:	f7f8 fce8 	bl	800072c <__aeabi_ddiv>
 8007d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d60:	f006 060f 	and.w	r6, r6, #15
 8007d64:	4f1c      	ldr	r7, [pc, #112]	; (8007dd8 <_dtoa_r+0x330>)
 8007d66:	e04f      	b.n	8007e08 <_dtoa_r+0x360>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d6e:	4453      	add	r3, sl
 8007d70:	f103 0801 	add.w	r8, r3, #1
 8007d74:	9304      	str	r3, [sp, #16]
 8007d76:	4643      	mov	r3, r8
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	bfb8      	it	lt
 8007d7c:	2301      	movlt	r3, #1
 8007d7e:	e7ba      	b.n	8007cf6 <_dtoa_r+0x24e>
 8007d80:	2300      	movs	r3, #0
 8007d82:	e7b2      	b.n	8007cea <_dtoa_r+0x242>
 8007d84:	2300      	movs	r3, #0
 8007d86:	e7f0      	b.n	8007d6a <_dtoa_r+0x2c2>
 8007d88:	2501      	movs	r5, #1
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9509      	str	r5, [sp, #36]	; 0x24
 8007d8e:	931e      	str	r3, [sp, #120]	; 0x78
 8007d90:	f04f 33ff 	mov.w	r3, #4294967295
 8007d94:	2200      	movs	r2, #0
 8007d96:	9304      	str	r3, [sp, #16]
 8007d98:	4698      	mov	r8, r3
 8007d9a:	2312      	movs	r3, #18
 8007d9c:	921f      	str	r2, [sp, #124]	; 0x7c
 8007d9e:	e7aa      	b.n	8007cf6 <_dtoa_r+0x24e>
 8007da0:	2301      	movs	r3, #1
 8007da2:	9309      	str	r3, [sp, #36]	; 0x24
 8007da4:	e7f4      	b.n	8007d90 <_dtoa_r+0x2e8>
 8007da6:	bf00      	nop
 8007da8:	636f4361 	.word	0x636f4361
 8007dac:	3fd287a7 	.word	0x3fd287a7
 8007db0:	8b60c8b3 	.word	0x8b60c8b3
 8007db4:	3fc68a28 	.word	0x3fc68a28
 8007db8:	509f79fb 	.word	0x509f79fb
 8007dbc:	3fd34413 	.word	0x3fd34413
 8007dc0:	7ff00000 	.word	0x7ff00000
 8007dc4:	08008eab 	.word	0x08008eab
 8007dc8:	08008ea2 	.word	0x08008ea2
 8007dcc:	08008ea1 	.word	0x08008ea1
 8007dd0:	3ff80000 	.word	0x3ff80000
 8007dd4:	08008ed8 	.word	0x08008ed8
 8007dd8:	08008eb0 	.word	0x08008eb0
 8007ddc:	2301      	movs	r3, #1
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	4698      	mov	r8, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	e7da      	b.n	8007d9c <_dtoa_r+0x2f4>
 8007de6:	3101      	adds	r1, #1
 8007de8:	6071      	str	r1, [r6, #4]
 8007dea:	0052      	lsls	r2, r2, #1
 8007dec:	e787      	b.n	8007cfe <_dtoa_r+0x256>
 8007dee:	07f1      	lsls	r1, r6, #31
 8007df0:	d508      	bpl.n	8007e04 <_dtoa_r+0x35c>
 8007df2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dfa:	f7f8 fb6d 	bl	80004d8 <__aeabi_dmul>
 8007dfe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e02:	3501      	adds	r5, #1
 8007e04:	1076      	asrs	r6, r6, #1
 8007e06:	3708      	adds	r7, #8
 8007e08:	2e00      	cmp	r6, #0
 8007e0a:	d1f0      	bne.n	8007dee <_dtoa_r+0x346>
 8007e0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e14:	f7f8 fc8a 	bl	800072c <__aeabi_ddiv>
 8007e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1c:	e01b      	b.n	8007e56 <_dtoa_r+0x3ae>
 8007e1e:	2502      	movs	r5, #2
 8007e20:	e7a0      	b.n	8007d64 <_dtoa_r+0x2bc>
 8007e22:	f000 80a4 	beq.w	8007f6e <_dtoa_r+0x4c6>
 8007e26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e2a:	f1ca 0600 	rsb	r6, sl, #0
 8007e2e:	4ba0      	ldr	r3, [pc, #640]	; (80080b0 <_dtoa_r+0x608>)
 8007e30:	f006 020f 	and.w	r2, r6, #15
 8007e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f7f8 fb4c 	bl	80004d8 <__aeabi_dmul>
 8007e40:	2502      	movs	r5, #2
 8007e42:	2300      	movs	r3, #0
 8007e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e48:	4f9a      	ldr	r7, [pc, #616]	; (80080b4 <_dtoa_r+0x60c>)
 8007e4a:	1136      	asrs	r6, r6, #4
 8007e4c:	2e00      	cmp	r6, #0
 8007e4e:	f040 8083 	bne.w	8007f58 <_dtoa_r+0x4b0>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e0      	bne.n	8007e18 <_dtoa_r+0x370>
 8007e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 808a 	beq.w	8007f72 <_dtoa_r+0x4ca>
 8007e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007e66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	4b92      	ldr	r3, [pc, #584]	; (80080b8 <_dtoa_r+0x610>)
 8007e6e:	f7f8 fda5 	bl	80009bc <__aeabi_dcmplt>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d07d      	beq.n	8007f72 <_dtoa_r+0x4ca>
 8007e76:	f1b8 0f00 	cmp.w	r8, #0
 8007e7a:	d07a      	beq.n	8007f72 <_dtoa_r+0x4ca>
 8007e7c:	9b04      	ldr	r3, [sp, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	dd36      	ble.n	8007ef0 <_dtoa_r+0x448>
 8007e82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e86:	2200      	movs	r2, #0
 8007e88:	4b8c      	ldr	r3, [pc, #560]	; (80080bc <_dtoa_r+0x614>)
 8007e8a:	f7f8 fb25 	bl	80004d8 <__aeabi_dmul>
 8007e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e92:	9e04      	ldr	r6, [sp, #16]
 8007e94:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007e98:	3501      	adds	r5, #1
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f7f8 fab2 	bl	8000404 <__aeabi_i2d>
 8007ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ea4:	f7f8 fb18 	bl	80004d8 <__aeabi_dmul>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4b85      	ldr	r3, [pc, #532]	; (80080c0 <_dtoa_r+0x618>)
 8007eac:	f7f8 f95e 	bl	800016c <__adddf3>
 8007eb0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007eb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007eb8:	950b      	str	r5, [sp, #44]	; 0x2c
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	d15c      	bne.n	8007f78 <_dtoa_r+0x4d0>
 8007ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4b7f      	ldr	r3, [pc, #508]	; (80080c4 <_dtoa_r+0x61c>)
 8007ec6:	f7f8 f94f 	bl	8000168 <__aeabi_dsub>
 8007eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ecc:	462b      	mov	r3, r5
 8007ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed2:	f7f8 fd91 	bl	80009f8 <__aeabi_dcmpgt>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f040 8281 	bne.w	80083de <_dtoa_r+0x936>
 8007edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ee2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007ee6:	f7f8 fd69 	bl	80009bc <__aeabi_dcmplt>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	f040 8275 	bne.w	80083da <_dtoa_r+0x932>
 8007ef0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ef8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f2c0 814b 	blt.w	8008196 <_dtoa_r+0x6ee>
 8007f00:	f1ba 0f0e 	cmp.w	sl, #14
 8007f04:	f300 8147 	bgt.w	8008196 <_dtoa_r+0x6ee>
 8007f08:	4b69      	ldr	r3, [pc, #420]	; (80080b0 <_dtoa_r+0x608>)
 8007f0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f280 80d7 	bge.w	80080cc <_dtoa_r+0x624>
 8007f1e:	f1b8 0f00 	cmp.w	r8, #0
 8007f22:	f300 80d3 	bgt.w	80080cc <_dtoa_r+0x624>
 8007f26:	f040 8257 	bne.w	80083d8 <_dtoa_r+0x930>
 8007f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4b64      	ldr	r3, [pc, #400]	; (80080c4 <_dtoa_r+0x61c>)
 8007f32:	f7f8 fad1 	bl	80004d8 <__aeabi_dmul>
 8007f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f3a:	f7f8 fd53 	bl	80009e4 <__aeabi_dcmpge>
 8007f3e:	4646      	mov	r6, r8
 8007f40:	4647      	mov	r7, r8
 8007f42:	2800      	cmp	r0, #0
 8007f44:	f040 822d 	bne.w	80083a2 <_dtoa_r+0x8fa>
 8007f48:	9b06      	ldr	r3, [sp, #24]
 8007f4a:	9a06      	ldr	r2, [sp, #24]
 8007f4c:	1c5d      	adds	r5, r3, #1
 8007f4e:	2331      	movs	r3, #49	; 0x31
 8007f50:	f10a 0a01 	add.w	sl, sl, #1
 8007f54:	7013      	strb	r3, [r2, #0]
 8007f56:	e228      	b.n	80083aa <_dtoa_r+0x902>
 8007f58:	07f2      	lsls	r2, r6, #31
 8007f5a:	d505      	bpl.n	8007f68 <_dtoa_r+0x4c0>
 8007f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f60:	f7f8 faba 	bl	80004d8 <__aeabi_dmul>
 8007f64:	2301      	movs	r3, #1
 8007f66:	3501      	adds	r5, #1
 8007f68:	1076      	asrs	r6, r6, #1
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	e76e      	b.n	8007e4c <_dtoa_r+0x3a4>
 8007f6e:	2502      	movs	r5, #2
 8007f70:	e771      	b.n	8007e56 <_dtoa_r+0x3ae>
 8007f72:	4657      	mov	r7, sl
 8007f74:	4646      	mov	r6, r8
 8007f76:	e790      	b.n	8007e9a <_dtoa_r+0x3f2>
 8007f78:	4b4d      	ldr	r3, [pc, #308]	; (80080b0 <_dtoa_r+0x608>)
 8007f7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f7e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d048      	beq.n	800801a <_dtoa_r+0x572>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	494e      	ldr	r1, [pc, #312]	; (80080c8 <_dtoa_r+0x620>)
 8007f90:	f7f8 fbcc 	bl	800072c <__aeabi_ddiv>
 8007f94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f98:	f7f8 f8e6 	bl	8000168 <__aeabi_dsub>
 8007f9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fa0:	9d06      	ldr	r5, [sp, #24]
 8007fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa6:	f7f8 fd47 	bl	8000a38 <__aeabi_d2iz>
 8007faa:	9011      	str	r0, [sp, #68]	; 0x44
 8007fac:	f7f8 fa2a 	bl	8000404 <__aeabi_i2d>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb8:	f7f8 f8d6 	bl	8000168 <__aeabi_dsub>
 8007fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fc2:	3330      	adds	r3, #48	; 0x30
 8007fc4:	f805 3b01 	strb.w	r3, [r5], #1
 8007fc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fcc:	f7f8 fcf6 	bl	80009bc <__aeabi_dcmplt>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d163      	bne.n	800809c <_dtoa_r+0x5f4>
 8007fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fd8:	2000      	movs	r0, #0
 8007fda:	4937      	ldr	r1, [pc, #220]	; (80080b8 <_dtoa_r+0x610>)
 8007fdc:	f7f8 f8c4 	bl	8000168 <__aeabi_dsub>
 8007fe0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fe4:	f7f8 fcea 	bl	80009bc <__aeabi_dcmplt>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	f040 80b5 	bne.w	8008158 <_dtoa_r+0x6b0>
 8007fee:	9b06      	ldr	r3, [sp, #24]
 8007ff0:	1aeb      	subs	r3, r5, r3
 8007ff2:	429e      	cmp	r6, r3
 8007ff4:	f77f af7c 	ble.w	8007ef0 <_dtoa_r+0x448>
 8007ff8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4b2f      	ldr	r3, [pc, #188]	; (80080bc <_dtoa_r+0x614>)
 8008000:	f7f8 fa6a 	bl	80004d8 <__aeabi_dmul>
 8008004:	2200      	movs	r2, #0
 8008006:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800800a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800800e:	4b2b      	ldr	r3, [pc, #172]	; (80080bc <_dtoa_r+0x614>)
 8008010:	f7f8 fa62 	bl	80004d8 <__aeabi_dmul>
 8008014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008018:	e7c3      	b.n	8007fa2 <_dtoa_r+0x4fa>
 800801a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800801e:	f7f8 fa5b 	bl	80004d8 <__aeabi_dmul>
 8008022:	9b06      	ldr	r3, [sp, #24]
 8008024:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008028:	199d      	adds	r5, r3, r6
 800802a:	461e      	mov	r6, r3
 800802c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008030:	f7f8 fd02 	bl	8000a38 <__aeabi_d2iz>
 8008034:	9011      	str	r0, [sp, #68]	; 0x44
 8008036:	f7f8 f9e5 	bl	8000404 <__aeabi_i2d>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008042:	f7f8 f891 	bl	8000168 <__aeabi_dsub>
 8008046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800804c:	3330      	adds	r3, #48	; 0x30
 800804e:	f806 3b01 	strb.w	r3, [r6], #1
 8008052:	42ae      	cmp	r6, r5
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	d124      	bne.n	80080a4 <_dtoa_r+0x5fc>
 800805a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800805e:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <_dtoa_r+0x620>)
 8008060:	f7f8 f884 	bl	800016c <__adddf3>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800806c:	f7f8 fcc4 	bl	80009f8 <__aeabi_dcmpgt>
 8008070:	2800      	cmp	r0, #0
 8008072:	d171      	bne.n	8008158 <_dtoa_r+0x6b0>
 8008074:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008078:	2000      	movs	r0, #0
 800807a:	4913      	ldr	r1, [pc, #76]	; (80080c8 <_dtoa_r+0x620>)
 800807c:	f7f8 f874 	bl	8000168 <__aeabi_dsub>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008088:	f7f8 fc98 	bl	80009bc <__aeabi_dcmplt>
 800808c:	2800      	cmp	r0, #0
 800808e:	f43f af2f 	beq.w	8007ef0 <_dtoa_r+0x448>
 8008092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008096:	1e6a      	subs	r2, r5, #1
 8008098:	2b30      	cmp	r3, #48	; 0x30
 800809a:	d001      	beq.n	80080a0 <_dtoa_r+0x5f8>
 800809c:	46ba      	mov	sl, r7
 800809e:	e04a      	b.n	8008136 <_dtoa_r+0x68e>
 80080a0:	4615      	mov	r5, r2
 80080a2:	e7f6      	b.n	8008092 <_dtoa_r+0x5ea>
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <_dtoa_r+0x614>)
 80080a6:	f7f8 fa17 	bl	80004d8 <__aeabi_dmul>
 80080aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ae:	e7bd      	b.n	800802c <_dtoa_r+0x584>
 80080b0:	08008ed8 	.word	0x08008ed8
 80080b4:	08008eb0 	.word	0x08008eb0
 80080b8:	3ff00000 	.word	0x3ff00000
 80080bc:	40240000 	.word	0x40240000
 80080c0:	401c0000 	.word	0x401c0000
 80080c4:	40140000 	.word	0x40140000
 80080c8:	3fe00000 	.word	0x3fe00000
 80080cc:	9d06      	ldr	r5, [sp, #24]
 80080ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 fb27 	bl	800072c <__aeabi_ddiv>
 80080de:	f7f8 fcab 	bl	8000a38 <__aeabi_d2iz>
 80080e2:	4681      	mov	r9, r0
 80080e4:	f7f8 f98e 	bl	8000404 <__aeabi_i2d>
 80080e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ec:	f7f8 f9f4 	bl	80004d8 <__aeabi_dmul>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4630      	mov	r0, r6
 80080f6:	4639      	mov	r1, r7
 80080f8:	f7f8 f836 	bl	8000168 <__aeabi_dsub>
 80080fc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008100:	f805 6b01 	strb.w	r6, [r5], #1
 8008104:	9e06      	ldr	r6, [sp, #24]
 8008106:	4602      	mov	r2, r0
 8008108:	1bae      	subs	r6, r5, r6
 800810a:	45b0      	cmp	r8, r6
 800810c:	460b      	mov	r3, r1
 800810e:	d135      	bne.n	800817c <_dtoa_r+0x6d4>
 8008110:	f7f8 f82c 	bl	800016c <__adddf3>
 8008114:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008118:	4606      	mov	r6, r0
 800811a:	460f      	mov	r7, r1
 800811c:	f7f8 fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 8008120:	b9c8      	cbnz	r0, 8008156 <_dtoa_r+0x6ae>
 8008122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008126:	4630      	mov	r0, r6
 8008128:	4639      	mov	r1, r7
 800812a:	f7f8 fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800812e:	b110      	cbz	r0, 8008136 <_dtoa_r+0x68e>
 8008130:	f019 0f01 	tst.w	r9, #1
 8008134:	d10f      	bne.n	8008156 <_dtoa_r+0x6ae>
 8008136:	4659      	mov	r1, fp
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fab3 	bl	80086a4 <_Bfree>
 800813e:	2300      	movs	r3, #0
 8008140:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008142:	702b      	strb	r3, [r5, #0]
 8008144:	f10a 0301 	add.w	r3, sl, #1
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800814c:	2b00      	cmp	r3, #0
 800814e:	f43f acf3 	beq.w	8007b38 <_dtoa_r+0x90>
 8008152:	601d      	str	r5, [r3, #0]
 8008154:	e4f0      	b.n	8007b38 <_dtoa_r+0x90>
 8008156:	4657      	mov	r7, sl
 8008158:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800815c:	1e6b      	subs	r3, r5, #1
 800815e:	2a39      	cmp	r2, #57	; 0x39
 8008160:	d106      	bne.n	8008170 <_dtoa_r+0x6c8>
 8008162:	9a06      	ldr	r2, [sp, #24]
 8008164:	429a      	cmp	r2, r3
 8008166:	d107      	bne.n	8008178 <_dtoa_r+0x6d0>
 8008168:	2330      	movs	r3, #48	; 0x30
 800816a:	7013      	strb	r3, [r2, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	3701      	adds	r7, #1
 8008170:	781a      	ldrb	r2, [r3, #0]
 8008172:	3201      	adds	r2, #1
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	e791      	b.n	800809c <_dtoa_r+0x5f4>
 8008178:	461d      	mov	r5, r3
 800817a:	e7ed      	b.n	8008158 <_dtoa_r+0x6b0>
 800817c:	2200      	movs	r2, #0
 800817e:	4b99      	ldr	r3, [pc, #612]	; (80083e4 <_dtoa_r+0x93c>)
 8008180:	f7f8 f9aa 	bl	80004d8 <__aeabi_dmul>
 8008184:	2200      	movs	r2, #0
 8008186:	2300      	movs	r3, #0
 8008188:	4606      	mov	r6, r0
 800818a:	460f      	mov	r7, r1
 800818c:	f7f8 fc0c 	bl	80009a8 <__aeabi_dcmpeq>
 8008190:	2800      	cmp	r0, #0
 8008192:	d09e      	beq.n	80080d2 <_dtoa_r+0x62a>
 8008194:	e7cf      	b.n	8008136 <_dtoa_r+0x68e>
 8008196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008198:	2a00      	cmp	r2, #0
 800819a:	f000 8088 	beq.w	80082ae <_dtoa_r+0x806>
 800819e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081a0:	2a01      	cmp	r2, #1
 80081a2:	dc6d      	bgt.n	8008280 <_dtoa_r+0x7d8>
 80081a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081a6:	2a00      	cmp	r2, #0
 80081a8:	d066      	beq.n	8008278 <_dtoa_r+0x7d0>
 80081aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081ae:	464d      	mov	r5, r9
 80081b0:	9e08      	ldr	r6, [sp, #32]
 80081b2:	9a07      	ldr	r2, [sp, #28]
 80081b4:	2101      	movs	r1, #1
 80081b6:	441a      	add	r2, r3
 80081b8:	4620      	mov	r0, r4
 80081ba:	4499      	add	r9, r3
 80081bc:	9207      	str	r2, [sp, #28]
 80081be:	f000 fb11 	bl	80087e4 <__i2b>
 80081c2:	4607      	mov	r7, r0
 80081c4:	2d00      	cmp	r5, #0
 80081c6:	dd0b      	ble.n	80081e0 <_dtoa_r+0x738>
 80081c8:	9b07      	ldr	r3, [sp, #28]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dd08      	ble.n	80081e0 <_dtoa_r+0x738>
 80081ce:	42ab      	cmp	r3, r5
 80081d0:	bfa8      	it	ge
 80081d2:	462b      	movge	r3, r5
 80081d4:	9a07      	ldr	r2, [sp, #28]
 80081d6:	eba9 0903 	sub.w	r9, r9, r3
 80081da:	1aed      	subs	r5, r5, r3
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	9307      	str	r3, [sp, #28]
 80081e0:	9b08      	ldr	r3, [sp, #32]
 80081e2:	b1eb      	cbz	r3, 8008220 <_dtoa_r+0x778>
 80081e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d065      	beq.n	80082b6 <_dtoa_r+0x80e>
 80081ea:	b18e      	cbz	r6, 8008210 <_dtoa_r+0x768>
 80081ec:	4639      	mov	r1, r7
 80081ee:	4632      	mov	r2, r6
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fb95 	bl	8008920 <__pow5mult>
 80081f6:	465a      	mov	r2, fp
 80081f8:	4601      	mov	r1, r0
 80081fa:	4607      	mov	r7, r0
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fafa 	bl	80087f6 <__multiply>
 8008202:	4659      	mov	r1, fp
 8008204:	900a      	str	r0, [sp, #40]	; 0x28
 8008206:	4620      	mov	r0, r4
 8008208:	f000 fa4c 	bl	80086a4 <_Bfree>
 800820c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820e:	469b      	mov	fp, r3
 8008210:	9b08      	ldr	r3, [sp, #32]
 8008212:	1b9a      	subs	r2, r3, r6
 8008214:	d004      	beq.n	8008220 <_dtoa_r+0x778>
 8008216:	4659      	mov	r1, fp
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fb81 	bl	8008920 <__pow5mult>
 800821e:	4683      	mov	fp, r0
 8008220:	2101      	movs	r1, #1
 8008222:	4620      	mov	r0, r4
 8008224:	f000 fade 	bl	80087e4 <__i2b>
 8008228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800822a:	4606      	mov	r6, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 81c6 	beq.w	80085be <_dtoa_r+0xb16>
 8008232:	461a      	mov	r2, r3
 8008234:	4601      	mov	r1, r0
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fb72 	bl	8008920 <__pow5mult>
 800823c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800823e:	4606      	mov	r6, r0
 8008240:	2b01      	cmp	r3, #1
 8008242:	dc3e      	bgt.n	80082c2 <_dtoa_r+0x81a>
 8008244:	9b02      	ldr	r3, [sp, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d137      	bne.n	80082ba <_dtoa_r+0x812>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008250:	2b00      	cmp	r3, #0
 8008252:	d134      	bne.n	80082be <_dtoa_r+0x816>
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800825a:	0d1b      	lsrs	r3, r3, #20
 800825c:	051b      	lsls	r3, r3, #20
 800825e:	b12b      	cbz	r3, 800826c <_dtoa_r+0x7c4>
 8008260:	9b07      	ldr	r3, [sp, #28]
 8008262:	f109 0901 	add.w	r9, r9, #1
 8008266:	3301      	adds	r3, #1
 8008268:	9307      	str	r3, [sp, #28]
 800826a:	2301      	movs	r3, #1
 800826c:	9308      	str	r3, [sp, #32]
 800826e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008270:	2b00      	cmp	r3, #0
 8008272:	d128      	bne.n	80082c6 <_dtoa_r+0x81e>
 8008274:	2001      	movs	r0, #1
 8008276:	e02e      	b.n	80082d6 <_dtoa_r+0x82e>
 8008278:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800827a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800827e:	e796      	b.n	80081ae <_dtoa_r+0x706>
 8008280:	9b08      	ldr	r3, [sp, #32]
 8008282:	f108 36ff 	add.w	r6, r8, #4294967295
 8008286:	42b3      	cmp	r3, r6
 8008288:	bfb7      	itett	lt
 800828a:	9b08      	ldrlt	r3, [sp, #32]
 800828c:	1b9e      	subge	r6, r3, r6
 800828e:	1af2      	sublt	r2, r6, r3
 8008290:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008292:	bfbf      	itttt	lt
 8008294:	9608      	strlt	r6, [sp, #32]
 8008296:	189b      	addlt	r3, r3, r2
 8008298:	930c      	strlt	r3, [sp, #48]	; 0x30
 800829a:	2600      	movlt	r6, #0
 800829c:	f1b8 0f00 	cmp.w	r8, #0
 80082a0:	bfb9      	ittee	lt
 80082a2:	eba9 0508 	sublt.w	r5, r9, r8
 80082a6:	2300      	movlt	r3, #0
 80082a8:	464d      	movge	r5, r9
 80082aa:	4643      	movge	r3, r8
 80082ac:	e781      	b.n	80081b2 <_dtoa_r+0x70a>
 80082ae:	9e08      	ldr	r6, [sp, #32]
 80082b0:	464d      	mov	r5, r9
 80082b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80082b4:	e786      	b.n	80081c4 <_dtoa_r+0x71c>
 80082b6:	9a08      	ldr	r2, [sp, #32]
 80082b8:	e7ad      	b.n	8008216 <_dtoa_r+0x76e>
 80082ba:	2300      	movs	r3, #0
 80082bc:	e7d6      	b.n	800826c <_dtoa_r+0x7c4>
 80082be:	9b02      	ldr	r3, [sp, #8]
 80082c0:	e7d4      	b.n	800826c <_dtoa_r+0x7c4>
 80082c2:	2300      	movs	r3, #0
 80082c4:	9308      	str	r3, [sp, #32]
 80082c6:	6933      	ldr	r3, [r6, #16]
 80082c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082cc:	6918      	ldr	r0, [r3, #16]
 80082ce:	f000 fa3b 	bl	8008748 <__hi0bits>
 80082d2:	f1c0 0020 	rsb	r0, r0, #32
 80082d6:	9b07      	ldr	r3, [sp, #28]
 80082d8:	4418      	add	r0, r3
 80082da:	f010 001f 	ands.w	r0, r0, #31
 80082de:	d047      	beq.n	8008370 <_dtoa_r+0x8c8>
 80082e0:	f1c0 0320 	rsb	r3, r0, #32
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	dd3b      	ble.n	8008360 <_dtoa_r+0x8b8>
 80082e8:	9b07      	ldr	r3, [sp, #28]
 80082ea:	f1c0 001c 	rsb	r0, r0, #28
 80082ee:	4481      	add	r9, r0
 80082f0:	4405      	add	r5, r0
 80082f2:	4403      	add	r3, r0
 80082f4:	9307      	str	r3, [sp, #28]
 80082f6:	f1b9 0f00 	cmp.w	r9, #0
 80082fa:	dd05      	ble.n	8008308 <_dtoa_r+0x860>
 80082fc:	4659      	mov	r1, fp
 80082fe:	464a      	mov	r2, r9
 8008300:	4620      	mov	r0, r4
 8008302:	f000 fb5b 	bl	80089bc <__lshift>
 8008306:	4683      	mov	fp, r0
 8008308:	9b07      	ldr	r3, [sp, #28]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dd05      	ble.n	800831a <_dtoa_r+0x872>
 800830e:	4631      	mov	r1, r6
 8008310:	461a      	mov	r2, r3
 8008312:	4620      	mov	r0, r4
 8008314:	f000 fb52 	bl	80089bc <__lshift>
 8008318:	4606      	mov	r6, r0
 800831a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800831c:	b353      	cbz	r3, 8008374 <_dtoa_r+0x8cc>
 800831e:	4631      	mov	r1, r6
 8008320:	4658      	mov	r0, fp
 8008322:	f000 fb9f 	bl	8008a64 <__mcmp>
 8008326:	2800      	cmp	r0, #0
 8008328:	da24      	bge.n	8008374 <_dtoa_r+0x8cc>
 800832a:	2300      	movs	r3, #0
 800832c:	4659      	mov	r1, fp
 800832e:	220a      	movs	r2, #10
 8008330:	4620      	mov	r0, r4
 8008332:	f000 f9ce 	bl	80086d2 <__multadd>
 8008336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008338:	f10a 3aff 	add.w	sl, sl, #4294967295
 800833c:	4683      	mov	fp, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 8144 	beq.w	80085cc <_dtoa_r+0xb24>
 8008344:	2300      	movs	r3, #0
 8008346:	4639      	mov	r1, r7
 8008348:	220a      	movs	r2, #10
 800834a:	4620      	mov	r0, r4
 800834c:	f000 f9c1 	bl	80086d2 <__multadd>
 8008350:	9b04      	ldr	r3, [sp, #16]
 8008352:	4607      	mov	r7, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	dc4d      	bgt.n	80083f4 <_dtoa_r+0x94c>
 8008358:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800835a:	2b02      	cmp	r3, #2
 800835c:	dd4a      	ble.n	80083f4 <_dtoa_r+0x94c>
 800835e:	e011      	b.n	8008384 <_dtoa_r+0x8dc>
 8008360:	d0c9      	beq.n	80082f6 <_dtoa_r+0x84e>
 8008362:	9a07      	ldr	r2, [sp, #28]
 8008364:	331c      	adds	r3, #28
 8008366:	441a      	add	r2, r3
 8008368:	4499      	add	r9, r3
 800836a:	441d      	add	r5, r3
 800836c:	4613      	mov	r3, r2
 800836e:	e7c1      	b.n	80082f4 <_dtoa_r+0x84c>
 8008370:	4603      	mov	r3, r0
 8008372:	e7f6      	b.n	8008362 <_dtoa_r+0x8ba>
 8008374:	f1b8 0f00 	cmp.w	r8, #0
 8008378:	dc36      	bgt.n	80083e8 <_dtoa_r+0x940>
 800837a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800837c:	2b02      	cmp	r3, #2
 800837e:	dd33      	ble.n	80083e8 <_dtoa_r+0x940>
 8008380:	f8cd 8010 	str.w	r8, [sp, #16]
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	b963      	cbnz	r3, 80083a2 <_dtoa_r+0x8fa>
 8008388:	4631      	mov	r1, r6
 800838a:	2205      	movs	r2, #5
 800838c:	4620      	mov	r0, r4
 800838e:	f000 f9a0 	bl	80086d2 <__multadd>
 8008392:	4601      	mov	r1, r0
 8008394:	4606      	mov	r6, r0
 8008396:	4658      	mov	r0, fp
 8008398:	f000 fb64 	bl	8008a64 <__mcmp>
 800839c:	2800      	cmp	r0, #0
 800839e:	f73f add3 	bgt.w	8007f48 <_dtoa_r+0x4a0>
 80083a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083a4:	9d06      	ldr	r5, [sp, #24]
 80083a6:	ea6f 0a03 	mvn.w	sl, r3
 80083aa:	f04f 0900 	mov.w	r9, #0
 80083ae:	4631      	mov	r1, r6
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 f977 	bl	80086a4 <_Bfree>
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	f43f aebd 	beq.w	8008136 <_dtoa_r+0x68e>
 80083bc:	f1b9 0f00 	cmp.w	r9, #0
 80083c0:	d005      	beq.n	80083ce <_dtoa_r+0x926>
 80083c2:	45b9      	cmp	r9, r7
 80083c4:	d003      	beq.n	80083ce <_dtoa_r+0x926>
 80083c6:	4649      	mov	r1, r9
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 f96b 	bl	80086a4 <_Bfree>
 80083ce:	4639      	mov	r1, r7
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f967 	bl	80086a4 <_Bfree>
 80083d6:	e6ae      	b.n	8008136 <_dtoa_r+0x68e>
 80083d8:	2600      	movs	r6, #0
 80083da:	4637      	mov	r7, r6
 80083dc:	e7e1      	b.n	80083a2 <_dtoa_r+0x8fa>
 80083de:	46ba      	mov	sl, r7
 80083e0:	4637      	mov	r7, r6
 80083e2:	e5b1      	b.n	8007f48 <_dtoa_r+0x4a0>
 80083e4:	40240000 	.word	0x40240000
 80083e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 80f3 	beq.w	80085da <_dtoa_r+0xb32>
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	dd05      	ble.n	8008404 <_dtoa_r+0x95c>
 80083f8:	4639      	mov	r1, r7
 80083fa:	462a      	mov	r2, r5
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 fadd 	bl	80089bc <__lshift>
 8008402:	4607      	mov	r7, r0
 8008404:	9b08      	ldr	r3, [sp, #32]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d04c      	beq.n	80084a4 <_dtoa_r+0x9fc>
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4620      	mov	r0, r4
 800840e:	f000 f915 	bl	800863c <_Balloc>
 8008412:	4605      	mov	r5, r0
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	f107 010c 	add.w	r1, r7, #12
 800841a:	3202      	adds	r2, #2
 800841c:	0092      	lsls	r2, r2, #2
 800841e:	300c      	adds	r0, #12
 8008420:	f7fe ff62 	bl	80072e8 <memcpy>
 8008424:	2201      	movs	r2, #1
 8008426:	4629      	mov	r1, r5
 8008428:	4620      	mov	r0, r4
 800842a:	f000 fac7 	bl	80089bc <__lshift>
 800842e:	46b9      	mov	r9, r7
 8008430:	4607      	mov	r7, r0
 8008432:	9b06      	ldr	r3, [sp, #24]
 8008434:	9307      	str	r3, [sp, #28]
 8008436:	9b02      	ldr	r3, [sp, #8]
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	9308      	str	r3, [sp, #32]
 800843e:	4631      	mov	r1, r6
 8008440:	4658      	mov	r0, fp
 8008442:	f7ff faa1 	bl	8007988 <quorem>
 8008446:	4649      	mov	r1, r9
 8008448:	4605      	mov	r5, r0
 800844a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800844e:	4658      	mov	r0, fp
 8008450:	f000 fb08 	bl	8008a64 <__mcmp>
 8008454:	463a      	mov	r2, r7
 8008456:	9002      	str	r0, [sp, #8]
 8008458:	4631      	mov	r1, r6
 800845a:	4620      	mov	r0, r4
 800845c:	f000 fb1c 	bl	8008a98 <__mdiff>
 8008460:	68c3      	ldr	r3, [r0, #12]
 8008462:	4602      	mov	r2, r0
 8008464:	bb03      	cbnz	r3, 80084a8 <_dtoa_r+0xa00>
 8008466:	4601      	mov	r1, r0
 8008468:	9009      	str	r0, [sp, #36]	; 0x24
 800846a:	4658      	mov	r0, fp
 800846c:	f000 fafa 	bl	8008a64 <__mcmp>
 8008470:	4603      	mov	r3, r0
 8008472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008474:	4611      	mov	r1, r2
 8008476:	4620      	mov	r0, r4
 8008478:	9309      	str	r3, [sp, #36]	; 0x24
 800847a:	f000 f913 	bl	80086a4 <_Bfree>
 800847e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008480:	b9a3      	cbnz	r3, 80084ac <_dtoa_r+0xa04>
 8008482:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008484:	b992      	cbnz	r2, 80084ac <_dtoa_r+0xa04>
 8008486:	9a08      	ldr	r2, [sp, #32]
 8008488:	b982      	cbnz	r2, 80084ac <_dtoa_r+0xa04>
 800848a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800848e:	d029      	beq.n	80084e4 <_dtoa_r+0xa3c>
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	dd01      	ble.n	800849a <_dtoa_r+0x9f2>
 8008496:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800849a:	9b07      	ldr	r3, [sp, #28]
 800849c:	1c5d      	adds	r5, r3, #1
 800849e:	f883 8000 	strb.w	r8, [r3]
 80084a2:	e784      	b.n	80083ae <_dtoa_r+0x906>
 80084a4:	4638      	mov	r0, r7
 80084a6:	e7c2      	b.n	800842e <_dtoa_r+0x986>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e7e3      	b.n	8008474 <_dtoa_r+0x9cc>
 80084ac:	9a02      	ldr	r2, [sp, #8]
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	db04      	blt.n	80084bc <_dtoa_r+0xa14>
 80084b2:	d123      	bne.n	80084fc <_dtoa_r+0xa54>
 80084b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084b6:	bb0a      	cbnz	r2, 80084fc <_dtoa_r+0xa54>
 80084b8:	9a08      	ldr	r2, [sp, #32]
 80084ba:	b9fa      	cbnz	r2, 80084fc <_dtoa_r+0xa54>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	ddec      	ble.n	800849a <_dtoa_r+0x9f2>
 80084c0:	4659      	mov	r1, fp
 80084c2:	2201      	movs	r2, #1
 80084c4:	4620      	mov	r0, r4
 80084c6:	f000 fa79 	bl	80089bc <__lshift>
 80084ca:	4631      	mov	r1, r6
 80084cc:	4683      	mov	fp, r0
 80084ce:	f000 fac9 	bl	8008a64 <__mcmp>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	dc03      	bgt.n	80084de <_dtoa_r+0xa36>
 80084d6:	d1e0      	bne.n	800849a <_dtoa_r+0x9f2>
 80084d8:	f018 0f01 	tst.w	r8, #1
 80084dc:	d0dd      	beq.n	800849a <_dtoa_r+0x9f2>
 80084de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084e2:	d1d8      	bne.n	8008496 <_dtoa_r+0x9ee>
 80084e4:	9b07      	ldr	r3, [sp, #28]
 80084e6:	9a07      	ldr	r2, [sp, #28]
 80084e8:	1c5d      	adds	r5, r3, #1
 80084ea:	2339      	movs	r3, #57	; 0x39
 80084ec:	7013      	strb	r3, [r2, #0]
 80084ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084f2:	1e6a      	subs	r2, r5, #1
 80084f4:	2b39      	cmp	r3, #57	; 0x39
 80084f6:	d04d      	beq.n	8008594 <_dtoa_r+0xaec>
 80084f8:	3301      	adds	r3, #1
 80084fa:	e052      	b.n	80085a2 <_dtoa_r+0xafa>
 80084fc:	9a07      	ldr	r2, [sp, #28]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f102 0501 	add.w	r5, r2, #1
 8008504:	dd06      	ble.n	8008514 <_dtoa_r+0xa6c>
 8008506:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800850a:	d0eb      	beq.n	80084e4 <_dtoa_r+0xa3c>
 800850c:	f108 0801 	add.w	r8, r8, #1
 8008510:	9b07      	ldr	r3, [sp, #28]
 8008512:	e7c4      	b.n	800849e <_dtoa_r+0x9f6>
 8008514:	9b06      	ldr	r3, [sp, #24]
 8008516:	9a04      	ldr	r2, [sp, #16]
 8008518:	1aeb      	subs	r3, r5, r3
 800851a:	4293      	cmp	r3, r2
 800851c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008520:	d021      	beq.n	8008566 <_dtoa_r+0xabe>
 8008522:	4659      	mov	r1, fp
 8008524:	2300      	movs	r3, #0
 8008526:	220a      	movs	r2, #10
 8008528:	4620      	mov	r0, r4
 800852a:	f000 f8d2 	bl	80086d2 <__multadd>
 800852e:	45b9      	cmp	r9, r7
 8008530:	4683      	mov	fp, r0
 8008532:	f04f 0300 	mov.w	r3, #0
 8008536:	f04f 020a 	mov.w	r2, #10
 800853a:	4649      	mov	r1, r9
 800853c:	4620      	mov	r0, r4
 800853e:	d105      	bne.n	800854c <_dtoa_r+0xaa4>
 8008540:	f000 f8c7 	bl	80086d2 <__multadd>
 8008544:	4681      	mov	r9, r0
 8008546:	4607      	mov	r7, r0
 8008548:	9507      	str	r5, [sp, #28]
 800854a:	e778      	b.n	800843e <_dtoa_r+0x996>
 800854c:	f000 f8c1 	bl	80086d2 <__multadd>
 8008550:	4639      	mov	r1, r7
 8008552:	4681      	mov	r9, r0
 8008554:	2300      	movs	r3, #0
 8008556:	220a      	movs	r2, #10
 8008558:	4620      	mov	r0, r4
 800855a:	f000 f8ba 	bl	80086d2 <__multadd>
 800855e:	4607      	mov	r7, r0
 8008560:	e7f2      	b.n	8008548 <_dtoa_r+0xaa0>
 8008562:	f04f 0900 	mov.w	r9, #0
 8008566:	4659      	mov	r1, fp
 8008568:	2201      	movs	r2, #1
 800856a:	4620      	mov	r0, r4
 800856c:	f000 fa26 	bl	80089bc <__lshift>
 8008570:	4631      	mov	r1, r6
 8008572:	4683      	mov	fp, r0
 8008574:	f000 fa76 	bl	8008a64 <__mcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	dcb8      	bgt.n	80084ee <_dtoa_r+0xa46>
 800857c:	d102      	bne.n	8008584 <_dtoa_r+0xadc>
 800857e:	f018 0f01 	tst.w	r8, #1
 8008582:	d1b4      	bne.n	80084ee <_dtoa_r+0xa46>
 8008584:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008588:	1e6a      	subs	r2, r5, #1
 800858a:	2b30      	cmp	r3, #48	; 0x30
 800858c:	f47f af0f 	bne.w	80083ae <_dtoa_r+0x906>
 8008590:	4615      	mov	r5, r2
 8008592:	e7f7      	b.n	8008584 <_dtoa_r+0xadc>
 8008594:	9b06      	ldr	r3, [sp, #24]
 8008596:	4293      	cmp	r3, r2
 8008598:	d105      	bne.n	80085a6 <_dtoa_r+0xafe>
 800859a:	2331      	movs	r3, #49	; 0x31
 800859c:	9a06      	ldr	r2, [sp, #24]
 800859e:	f10a 0a01 	add.w	sl, sl, #1
 80085a2:	7013      	strb	r3, [r2, #0]
 80085a4:	e703      	b.n	80083ae <_dtoa_r+0x906>
 80085a6:	4615      	mov	r5, r2
 80085a8:	e7a1      	b.n	80084ee <_dtoa_r+0xa46>
 80085aa:	4b17      	ldr	r3, [pc, #92]	; (8008608 <_dtoa_r+0xb60>)
 80085ac:	f7ff bae1 	b.w	8007b72 <_dtoa_r+0xca>
 80085b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f47f aabb 	bne.w	8007b2e <_dtoa_r+0x86>
 80085b8:	4b14      	ldr	r3, [pc, #80]	; (800860c <_dtoa_r+0xb64>)
 80085ba:	f7ff bada 	b.w	8007b72 <_dtoa_r+0xca>
 80085be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	f77f ae3f 	ble.w	8008244 <_dtoa_r+0x79c>
 80085c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085c8:	9308      	str	r3, [sp, #32]
 80085ca:	e653      	b.n	8008274 <_dtoa_r+0x7cc>
 80085cc:	9b04      	ldr	r3, [sp, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	dc03      	bgt.n	80085da <_dtoa_r+0xb32>
 80085d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	f73f aed5 	bgt.w	8008384 <_dtoa_r+0x8dc>
 80085da:	9d06      	ldr	r5, [sp, #24]
 80085dc:	4631      	mov	r1, r6
 80085de:	4658      	mov	r0, fp
 80085e0:	f7ff f9d2 	bl	8007988 <quorem>
 80085e4:	9b06      	ldr	r3, [sp, #24]
 80085e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80085ea:	f805 8b01 	strb.w	r8, [r5], #1
 80085ee:	9a04      	ldr	r2, [sp, #16]
 80085f0:	1aeb      	subs	r3, r5, r3
 80085f2:	429a      	cmp	r2, r3
 80085f4:	ddb5      	ble.n	8008562 <_dtoa_r+0xaba>
 80085f6:	4659      	mov	r1, fp
 80085f8:	2300      	movs	r3, #0
 80085fa:	220a      	movs	r2, #10
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 f868 	bl	80086d2 <__multadd>
 8008602:	4683      	mov	fp, r0
 8008604:	e7ea      	b.n	80085dc <_dtoa_r+0xb34>
 8008606:	bf00      	nop
 8008608:	08008ea0 	.word	0x08008ea0
 800860c:	08008ea2 	.word	0x08008ea2

08008610 <_localeconv_r>:
 8008610:	4b04      	ldr	r3, [pc, #16]	; (8008624 <_localeconv_r+0x14>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6a18      	ldr	r0, [r3, #32]
 8008616:	4b04      	ldr	r3, [pc, #16]	; (8008628 <_localeconv_r+0x18>)
 8008618:	2800      	cmp	r0, #0
 800861a:	bf08      	it	eq
 800861c:	4618      	moveq	r0, r3
 800861e:	30f0      	adds	r0, #240	; 0xf0
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	20000018 	.word	0x20000018
 8008628:	2000007c 	.word	0x2000007c

0800862c <malloc>:
 800862c:	4b02      	ldr	r3, [pc, #8]	; (8008638 <malloc+0xc>)
 800862e:	4601      	mov	r1, r0
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	f000 baed 	b.w	8008c10 <_malloc_r>
 8008636:	bf00      	nop
 8008638:	20000018 	.word	0x20000018

0800863c <_Balloc>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008640:	4604      	mov	r4, r0
 8008642:	460e      	mov	r6, r1
 8008644:	b93d      	cbnz	r5, 8008656 <_Balloc+0x1a>
 8008646:	2010      	movs	r0, #16
 8008648:	f7ff fff0 	bl	800862c <malloc>
 800864c:	6260      	str	r0, [r4, #36]	; 0x24
 800864e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008652:	6005      	str	r5, [r0, #0]
 8008654:	60c5      	str	r5, [r0, #12]
 8008656:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008658:	68eb      	ldr	r3, [r5, #12]
 800865a:	b183      	cbz	r3, 800867e <_Balloc+0x42>
 800865c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008664:	b9b8      	cbnz	r0, 8008696 <_Balloc+0x5a>
 8008666:	2101      	movs	r1, #1
 8008668:	fa01 f506 	lsl.w	r5, r1, r6
 800866c:	1d6a      	adds	r2, r5, #5
 800866e:	0092      	lsls	r2, r2, #2
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fabe 	bl	8008bf2 <_calloc_r>
 8008676:	b160      	cbz	r0, 8008692 <_Balloc+0x56>
 8008678:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800867c:	e00e      	b.n	800869c <_Balloc+0x60>
 800867e:	2221      	movs	r2, #33	; 0x21
 8008680:	2104      	movs	r1, #4
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fab5 	bl	8008bf2 <_calloc_r>
 8008688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800868a:	60e8      	str	r0, [r5, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e4      	bne.n	800865c <_Balloc+0x20>
 8008692:	2000      	movs	r0, #0
 8008694:	bd70      	pop	{r4, r5, r6, pc}
 8008696:	6802      	ldr	r2, [r0, #0]
 8008698:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800869c:	2300      	movs	r3, #0
 800869e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086a2:	e7f7      	b.n	8008694 <_Balloc+0x58>

080086a4 <_Bfree>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80086a8:	4606      	mov	r6, r0
 80086aa:	460d      	mov	r5, r1
 80086ac:	b93c      	cbnz	r4, 80086be <_Bfree+0x1a>
 80086ae:	2010      	movs	r0, #16
 80086b0:	f7ff ffbc 	bl	800862c <malloc>
 80086b4:	6270      	str	r0, [r6, #36]	; 0x24
 80086b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086ba:	6004      	str	r4, [r0, #0]
 80086bc:	60c4      	str	r4, [r0, #12]
 80086be:	b13d      	cbz	r5, 80086d0 <_Bfree+0x2c>
 80086c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086c2:	686a      	ldr	r2, [r5, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086ca:	6029      	str	r1, [r5, #0]
 80086cc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80086d0:	bd70      	pop	{r4, r5, r6, pc}

080086d2 <__multadd>:
 80086d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d6:	461f      	mov	r7, r3
 80086d8:	4606      	mov	r6, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	2300      	movs	r3, #0
 80086de:	690d      	ldr	r5, [r1, #16]
 80086e0:	f101 0c14 	add.w	ip, r1, #20
 80086e4:	f8dc 0000 	ldr.w	r0, [ip]
 80086e8:	3301      	adds	r3, #1
 80086ea:	b281      	uxth	r1, r0
 80086ec:	fb02 7101 	mla	r1, r2, r1, r7
 80086f0:	0c00      	lsrs	r0, r0, #16
 80086f2:	0c0f      	lsrs	r7, r1, #16
 80086f4:	fb02 7000 	mla	r0, r2, r0, r7
 80086f8:	b289      	uxth	r1, r1
 80086fa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80086fe:	429d      	cmp	r5, r3
 8008700:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008704:	f84c 1b04 	str.w	r1, [ip], #4
 8008708:	dcec      	bgt.n	80086e4 <__multadd+0x12>
 800870a:	b1d7      	cbz	r7, 8008742 <__multadd+0x70>
 800870c:	68a3      	ldr	r3, [r4, #8]
 800870e:	42ab      	cmp	r3, r5
 8008710:	dc12      	bgt.n	8008738 <__multadd+0x66>
 8008712:	6861      	ldr	r1, [r4, #4]
 8008714:	4630      	mov	r0, r6
 8008716:	3101      	adds	r1, #1
 8008718:	f7ff ff90 	bl	800863c <_Balloc>
 800871c:	4680      	mov	r8, r0
 800871e:	6922      	ldr	r2, [r4, #16]
 8008720:	f104 010c 	add.w	r1, r4, #12
 8008724:	3202      	adds	r2, #2
 8008726:	0092      	lsls	r2, r2, #2
 8008728:	300c      	adds	r0, #12
 800872a:	f7fe fddd 	bl	80072e8 <memcpy>
 800872e:	4621      	mov	r1, r4
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff ffb7 	bl	80086a4 <_Bfree>
 8008736:	4644      	mov	r4, r8
 8008738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800873c:	3501      	adds	r5, #1
 800873e:	615f      	str	r7, [r3, #20]
 8008740:	6125      	str	r5, [r4, #16]
 8008742:	4620      	mov	r0, r4
 8008744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008748 <__hi0bits>:
 8008748:	0c02      	lsrs	r2, r0, #16
 800874a:	0412      	lsls	r2, r2, #16
 800874c:	4603      	mov	r3, r0
 800874e:	b9b2      	cbnz	r2, 800877e <__hi0bits+0x36>
 8008750:	0403      	lsls	r3, r0, #16
 8008752:	2010      	movs	r0, #16
 8008754:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008758:	bf04      	itt	eq
 800875a:	021b      	lsleq	r3, r3, #8
 800875c:	3008      	addeq	r0, #8
 800875e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008762:	bf04      	itt	eq
 8008764:	011b      	lsleq	r3, r3, #4
 8008766:	3004      	addeq	r0, #4
 8008768:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800876c:	bf04      	itt	eq
 800876e:	009b      	lsleq	r3, r3, #2
 8008770:	3002      	addeq	r0, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	db06      	blt.n	8008784 <__hi0bits+0x3c>
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	d503      	bpl.n	8008782 <__hi0bits+0x3a>
 800877a:	3001      	adds	r0, #1
 800877c:	4770      	bx	lr
 800877e:	2000      	movs	r0, #0
 8008780:	e7e8      	b.n	8008754 <__hi0bits+0xc>
 8008782:	2020      	movs	r0, #32
 8008784:	4770      	bx	lr

08008786 <__lo0bits>:
 8008786:	6803      	ldr	r3, [r0, #0]
 8008788:	4601      	mov	r1, r0
 800878a:	f013 0207 	ands.w	r2, r3, #7
 800878e:	d00b      	beq.n	80087a8 <__lo0bits+0x22>
 8008790:	07da      	lsls	r2, r3, #31
 8008792:	d423      	bmi.n	80087dc <__lo0bits+0x56>
 8008794:	0798      	lsls	r0, r3, #30
 8008796:	bf49      	itett	mi
 8008798:	085b      	lsrmi	r3, r3, #1
 800879a:	089b      	lsrpl	r3, r3, #2
 800879c:	2001      	movmi	r0, #1
 800879e:	600b      	strmi	r3, [r1, #0]
 80087a0:	bf5c      	itt	pl
 80087a2:	600b      	strpl	r3, [r1, #0]
 80087a4:	2002      	movpl	r0, #2
 80087a6:	4770      	bx	lr
 80087a8:	b298      	uxth	r0, r3
 80087aa:	b9a8      	cbnz	r0, 80087d8 <__lo0bits+0x52>
 80087ac:	2010      	movs	r0, #16
 80087ae:	0c1b      	lsrs	r3, r3, #16
 80087b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80087b4:	bf04      	itt	eq
 80087b6:	0a1b      	lsreq	r3, r3, #8
 80087b8:	3008      	addeq	r0, #8
 80087ba:	071a      	lsls	r2, r3, #28
 80087bc:	bf04      	itt	eq
 80087be:	091b      	lsreq	r3, r3, #4
 80087c0:	3004      	addeq	r0, #4
 80087c2:	079a      	lsls	r2, r3, #30
 80087c4:	bf04      	itt	eq
 80087c6:	089b      	lsreq	r3, r3, #2
 80087c8:	3002      	addeq	r0, #2
 80087ca:	07da      	lsls	r2, r3, #31
 80087cc:	d402      	bmi.n	80087d4 <__lo0bits+0x4e>
 80087ce:	085b      	lsrs	r3, r3, #1
 80087d0:	d006      	beq.n	80087e0 <__lo0bits+0x5a>
 80087d2:	3001      	adds	r0, #1
 80087d4:	600b      	str	r3, [r1, #0]
 80087d6:	4770      	bx	lr
 80087d8:	4610      	mov	r0, r2
 80087da:	e7e9      	b.n	80087b0 <__lo0bits+0x2a>
 80087dc:	2000      	movs	r0, #0
 80087de:	4770      	bx	lr
 80087e0:	2020      	movs	r0, #32
 80087e2:	4770      	bx	lr

080087e4 <__i2b>:
 80087e4:	b510      	push	{r4, lr}
 80087e6:	460c      	mov	r4, r1
 80087e8:	2101      	movs	r1, #1
 80087ea:	f7ff ff27 	bl	800863c <_Balloc>
 80087ee:	2201      	movs	r2, #1
 80087f0:	6144      	str	r4, [r0, #20]
 80087f2:	6102      	str	r2, [r0, #16]
 80087f4:	bd10      	pop	{r4, pc}

080087f6 <__multiply>:
 80087f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	4614      	mov	r4, r2
 80087fc:	690a      	ldr	r2, [r1, #16]
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	4688      	mov	r8, r1
 8008802:	429a      	cmp	r2, r3
 8008804:	bfbe      	ittt	lt
 8008806:	460b      	movlt	r3, r1
 8008808:	46a0      	movlt	r8, r4
 800880a:	461c      	movlt	r4, r3
 800880c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008810:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008814:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008818:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800881c:	eb07 0609 	add.w	r6, r7, r9
 8008820:	42b3      	cmp	r3, r6
 8008822:	bfb8      	it	lt
 8008824:	3101      	addlt	r1, #1
 8008826:	f7ff ff09 	bl	800863c <_Balloc>
 800882a:	f100 0514 	add.w	r5, r0, #20
 800882e:	462b      	mov	r3, r5
 8008830:	2200      	movs	r2, #0
 8008832:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008836:	4573      	cmp	r3, lr
 8008838:	d316      	bcc.n	8008868 <__multiply+0x72>
 800883a:	f104 0214 	add.w	r2, r4, #20
 800883e:	f108 0114 	add.w	r1, r8, #20
 8008842:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008846:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	9b00      	ldr	r3, [sp, #0]
 800884e:	9201      	str	r2, [sp, #4]
 8008850:	4293      	cmp	r3, r2
 8008852:	d80c      	bhi.n	800886e <__multiply+0x78>
 8008854:	2e00      	cmp	r6, #0
 8008856:	dd03      	ble.n	8008860 <__multiply+0x6a>
 8008858:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800885c:	2b00      	cmp	r3, #0
 800885e:	d05d      	beq.n	800891c <__multiply+0x126>
 8008860:	6106      	str	r6, [r0, #16]
 8008862:	b003      	add	sp, #12
 8008864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008868:	f843 2b04 	str.w	r2, [r3], #4
 800886c:	e7e3      	b.n	8008836 <__multiply+0x40>
 800886e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008872:	f1bb 0f00 	cmp.w	fp, #0
 8008876:	d023      	beq.n	80088c0 <__multiply+0xca>
 8008878:	4689      	mov	r9, r1
 800887a:	46ac      	mov	ip, r5
 800887c:	f04f 0800 	mov.w	r8, #0
 8008880:	f859 4b04 	ldr.w	r4, [r9], #4
 8008884:	f8dc a000 	ldr.w	sl, [ip]
 8008888:	b2a3      	uxth	r3, r4
 800888a:	fa1f fa8a 	uxth.w	sl, sl
 800888e:	fb0b a303 	mla	r3, fp, r3, sl
 8008892:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008896:	f8dc 4000 	ldr.w	r4, [ip]
 800889a:	4443      	add	r3, r8
 800889c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088a0:	fb0b 840a 	mla	r4, fp, sl, r8
 80088a4:	46e2      	mov	sl, ip
 80088a6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80088b0:	454f      	cmp	r7, r9
 80088b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088b6:	f84a 3b04 	str.w	r3, [sl], #4
 80088ba:	d82b      	bhi.n	8008914 <__multiply+0x11e>
 80088bc:	f8cc 8004 	str.w	r8, [ip, #4]
 80088c0:	9b01      	ldr	r3, [sp, #4]
 80088c2:	3204      	adds	r2, #4
 80088c4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80088c8:	f1ba 0f00 	cmp.w	sl, #0
 80088cc:	d020      	beq.n	8008910 <__multiply+0x11a>
 80088ce:	4689      	mov	r9, r1
 80088d0:	46a8      	mov	r8, r5
 80088d2:	f04f 0b00 	mov.w	fp, #0
 80088d6:	682b      	ldr	r3, [r5, #0]
 80088d8:	f8b9 c000 	ldrh.w	ip, [r9]
 80088dc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	fb0a 440c 	mla	r4, sl, ip, r4
 80088e6:	46c4      	mov	ip, r8
 80088e8:	445c      	add	r4, fp
 80088ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80088ee:	f84c 3b04 	str.w	r3, [ip], #4
 80088f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80088f6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80088fa:	0c1b      	lsrs	r3, r3, #16
 80088fc:	fb0a b303 	mla	r3, sl, r3, fp
 8008900:	454f      	cmp	r7, r9
 8008902:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008906:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800890a:	d805      	bhi.n	8008918 <__multiply+0x122>
 800890c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008910:	3504      	adds	r5, #4
 8008912:	e79b      	b.n	800884c <__multiply+0x56>
 8008914:	46d4      	mov	ip, sl
 8008916:	e7b3      	b.n	8008880 <__multiply+0x8a>
 8008918:	46e0      	mov	r8, ip
 800891a:	e7dd      	b.n	80088d8 <__multiply+0xe2>
 800891c:	3e01      	subs	r6, #1
 800891e:	e799      	b.n	8008854 <__multiply+0x5e>

08008920 <__pow5mult>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	4615      	mov	r5, r2
 8008926:	f012 0203 	ands.w	r2, r2, #3
 800892a:	4606      	mov	r6, r0
 800892c:	460f      	mov	r7, r1
 800892e:	d007      	beq.n	8008940 <__pow5mult+0x20>
 8008930:	4c21      	ldr	r4, [pc, #132]	; (80089b8 <__pow5mult+0x98>)
 8008932:	3a01      	subs	r2, #1
 8008934:	2300      	movs	r3, #0
 8008936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800893a:	f7ff feca 	bl	80086d2 <__multadd>
 800893e:	4607      	mov	r7, r0
 8008940:	10ad      	asrs	r5, r5, #2
 8008942:	d035      	beq.n	80089b0 <__pow5mult+0x90>
 8008944:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008946:	b93c      	cbnz	r4, 8008958 <__pow5mult+0x38>
 8008948:	2010      	movs	r0, #16
 800894a:	f7ff fe6f 	bl	800862c <malloc>
 800894e:	6270      	str	r0, [r6, #36]	; 0x24
 8008950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008954:	6004      	str	r4, [r0, #0]
 8008956:	60c4      	str	r4, [r0, #12]
 8008958:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800895c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008960:	b94c      	cbnz	r4, 8008976 <__pow5mult+0x56>
 8008962:	f240 2171 	movw	r1, #625	; 0x271
 8008966:	4630      	mov	r0, r6
 8008968:	f7ff ff3c 	bl	80087e4 <__i2b>
 800896c:	2300      	movs	r3, #0
 800896e:	4604      	mov	r4, r0
 8008970:	f8c8 0008 	str.w	r0, [r8, #8]
 8008974:	6003      	str	r3, [r0, #0]
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	07eb      	lsls	r3, r5, #31
 800897c:	d50a      	bpl.n	8008994 <__pow5mult+0x74>
 800897e:	4639      	mov	r1, r7
 8008980:	4622      	mov	r2, r4
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff ff37 	bl	80087f6 <__multiply>
 8008988:	4681      	mov	r9, r0
 800898a:	4639      	mov	r1, r7
 800898c:	4630      	mov	r0, r6
 800898e:	f7ff fe89 	bl	80086a4 <_Bfree>
 8008992:	464f      	mov	r7, r9
 8008994:	106d      	asrs	r5, r5, #1
 8008996:	d00b      	beq.n	80089b0 <__pow5mult+0x90>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	b938      	cbnz	r0, 80089ac <__pow5mult+0x8c>
 800899c:	4622      	mov	r2, r4
 800899e:	4621      	mov	r1, r4
 80089a0:	4630      	mov	r0, r6
 80089a2:	f7ff ff28 	bl	80087f6 <__multiply>
 80089a6:	6020      	str	r0, [r4, #0]
 80089a8:	f8c0 8000 	str.w	r8, [r0]
 80089ac:	4604      	mov	r4, r0
 80089ae:	e7e4      	b.n	800897a <__pow5mult+0x5a>
 80089b0:	4638      	mov	r0, r7
 80089b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089b6:	bf00      	nop
 80089b8:	08008fa0 	.word	0x08008fa0

080089bc <__lshift>:
 80089bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c0:	460c      	mov	r4, r1
 80089c2:	4607      	mov	r7, r0
 80089c4:	4616      	mov	r6, r2
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089cc:	eb0a 0903 	add.w	r9, sl, r3
 80089d0:	6849      	ldr	r1, [r1, #4]
 80089d2:	68a3      	ldr	r3, [r4, #8]
 80089d4:	f109 0501 	add.w	r5, r9, #1
 80089d8:	42ab      	cmp	r3, r5
 80089da:	db32      	blt.n	8008a42 <__lshift+0x86>
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff fe2d 	bl	800863c <_Balloc>
 80089e2:	2300      	movs	r3, #0
 80089e4:	4680      	mov	r8, r0
 80089e6:	461a      	mov	r2, r3
 80089e8:	f100 0114 	add.w	r1, r0, #20
 80089ec:	4553      	cmp	r3, sl
 80089ee:	db2b      	blt.n	8008a48 <__lshift+0x8c>
 80089f0:	6920      	ldr	r0, [r4, #16]
 80089f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089f6:	f104 0314 	add.w	r3, r4, #20
 80089fa:	f016 021f 	ands.w	r2, r6, #31
 80089fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a06:	d025      	beq.n	8008a54 <__lshift+0x98>
 8008a08:	2000      	movs	r0, #0
 8008a0a:	f1c2 0e20 	rsb	lr, r2, #32
 8008a0e:	468a      	mov	sl, r1
 8008a10:	681e      	ldr	r6, [r3, #0]
 8008a12:	4096      	lsls	r6, r2
 8008a14:	4330      	orrs	r0, r6
 8008a16:	f84a 0b04 	str.w	r0, [sl], #4
 8008a1a:	f853 0b04 	ldr.w	r0, [r3], #4
 8008a1e:	459c      	cmp	ip, r3
 8008a20:	fa20 f00e 	lsr.w	r0, r0, lr
 8008a24:	d814      	bhi.n	8008a50 <__lshift+0x94>
 8008a26:	6048      	str	r0, [r1, #4]
 8008a28:	b108      	cbz	r0, 8008a2e <__lshift+0x72>
 8008a2a:	f109 0502 	add.w	r5, r9, #2
 8008a2e:	3d01      	subs	r5, #1
 8008a30:	4638      	mov	r0, r7
 8008a32:	f8c8 5010 	str.w	r5, [r8, #16]
 8008a36:	4621      	mov	r1, r4
 8008a38:	f7ff fe34 	bl	80086a4 <_Bfree>
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a42:	3101      	adds	r1, #1
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	e7c7      	b.n	80089d8 <__lshift+0x1c>
 8008a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	e7cd      	b.n	80089ec <__lshift+0x30>
 8008a50:	4651      	mov	r1, sl
 8008a52:	e7dc      	b.n	8008a0e <__lshift+0x52>
 8008a54:	3904      	subs	r1, #4
 8008a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5a:	459c      	cmp	ip, r3
 8008a5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a60:	d8f9      	bhi.n	8008a56 <__lshift+0x9a>
 8008a62:	e7e4      	b.n	8008a2e <__lshift+0x72>

08008a64 <__mcmp>:
 8008a64:	6903      	ldr	r3, [r0, #16]
 8008a66:	690a      	ldr	r2, [r1, #16]
 8008a68:	b530      	push	{r4, r5, lr}
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	d10c      	bne.n	8008a88 <__mcmp+0x24>
 8008a6e:	0092      	lsls	r2, r2, #2
 8008a70:	3014      	adds	r0, #20
 8008a72:	3114      	adds	r1, #20
 8008a74:	1884      	adds	r4, r0, r2
 8008a76:	4411      	add	r1, r2
 8008a78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a80:	4295      	cmp	r5, r2
 8008a82:	d003      	beq.n	8008a8c <__mcmp+0x28>
 8008a84:	d305      	bcc.n	8008a92 <__mcmp+0x2e>
 8008a86:	2301      	movs	r3, #1
 8008a88:	4618      	mov	r0, r3
 8008a8a:	bd30      	pop	{r4, r5, pc}
 8008a8c:	42a0      	cmp	r0, r4
 8008a8e:	d3f3      	bcc.n	8008a78 <__mcmp+0x14>
 8008a90:	e7fa      	b.n	8008a88 <__mcmp+0x24>
 8008a92:	f04f 33ff 	mov.w	r3, #4294967295
 8008a96:	e7f7      	b.n	8008a88 <__mcmp+0x24>

08008a98 <__mdiff>:
 8008a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	f7ff ffdd 	bl	8008a64 <__mcmp>
 8008aaa:	1e06      	subs	r6, r0, #0
 8008aac:	d108      	bne.n	8008ac0 <__mdiff+0x28>
 8008aae:	4631      	mov	r1, r6
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff fdc3 	bl	800863c <_Balloc>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac0:	bfa4      	itt	ge
 8008ac2:	4623      	movge	r3, r4
 8008ac4:	462c      	movge	r4, r5
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	6861      	ldr	r1, [r4, #4]
 8008aca:	bfa6      	itte	ge
 8008acc:	461d      	movge	r5, r3
 8008ace:	2600      	movge	r6, #0
 8008ad0:	2601      	movlt	r6, #1
 8008ad2:	f7ff fdb3 	bl	800863c <_Balloc>
 8008ad6:	f04f 0e00 	mov.w	lr, #0
 8008ada:	60c6      	str	r6, [r0, #12]
 8008adc:	692b      	ldr	r3, [r5, #16]
 8008ade:	6926      	ldr	r6, [r4, #16]
 8008ae0:	f104 0214 	add.w	r2, r4, #20
 8008ae4:	f105 0914 	add.w	r9, r5, #20
 8008ae8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008aec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008af0:	f100 0114 	add.w	r1, r0, #20
 8008af4:	f852 ab04 	ldr.w	sl, [r2], #4
 8008af8:	f859 5b04 	ldr.w	r5, [r9], #4
 8008afc:	fa1f f38a 	uxth.w	r3, sl
 8008b00:	4473      	add	r3, lr
 8008b02:	b2ac      	uxth	r4, r5
 8008b04:	1b1b      	subs	r3, r3, r4
 8008b06:	0c2c      	lsrs	r4, r5, #16
 8008b08:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008b0c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008b16:	45c8      	cmp	r8, r9
 8008b18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008b1c:	4694      	mov	ip, r2
 8008b1e:	f841 4b04 	str.w	r4, [r1], #4
 8008b22:	d8e7      	bhi.n	8008af4 <__mdiff+0x5c>
 8008b24:	45bc      	cmp	ip, r7
 8008b26:	d304      	bcc.n	8008b32 <__mdiff+0x9a>
 8008b28:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008b2c:	b183      	cbz	r3, 8008b50 <__mdiff+0xb8>
 8008b2e:	6106      	str	r6, [r0, #16]
 8008b30:	e7c4      	b.n	8008abc <__mdiff+0x24>
 8008b32:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008b36:	b2a2      	uxth	r2, r4
 8008b38:	4472      	add	r2, lr
 8008b3a:	1413      	asrs	r3, r2, #16
 8008b3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008b40:	b292      	uxth	r2, r2
 8008b42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b46:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008b4a:	f841 2b04 	str.w	r2, [r1], #4
 8008b4e:	e7e9      	b.n	8008b24 <__mdiff+0x8c>
 8008b50:	3e01      	subs	r6, #1
 8008b52:	e7e9      	b.n	8008b28 <__mdiff+0x90>

08008b54 <__d2b>:
 8008b54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b58:	461c      	mov	r4, r3
 8008b5a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008b5e:	2101      	movs	r1, #1
 8008b60:	4690      	mov	r8, r2
 8008b62:	f7ff fd6b 	bl	800863c <_Balloc>
 8008b66:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008b6a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008b6e:	4607      	mov	r7, r0
 8008b70:	bb34      	cbnz	r4, 8008bc0 <__d2b+0x6c>
 8008b72:	9201      	str	r2, [sp, #4]
 8008b74:	f1b8 0200 	subs.w	r2, r8, #0
 8008b78:	d027      	beq.n	8008bca <__d2b+0x76>
 8008b7a:	a802      	add	r0, sp, #8
 8008b7c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008b80:	f7ff fe01 	bl	8008786 <__lo0bits>
 8008b84:	9900      	ldr	r1, [sp, #0]
 8008b86:	b1f0      	cbz	r0, 8008bc6 <__d2b+0x72>
 8008b88:	9a01      	ldr	r2, [sp, #4]
 8008b8a:	f1c0 0320 	rsb	r3, r0, #32
 8008b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b92:	430b      	orrs	r3, r1
 8008b94:	40c2      	lsrs	r2, r0
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	9201      	str	r2, [sp, #4]
 8008b9a:	9b01      	ldr	r3, [sp, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bf14      	ite	ne
 8008ba0:	2102      	movne	r1, #2
 8008ba2:	2101      	moveq	r1, #1
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	6139      	str	r1, [r7, #16]
 8008ba8:	b1c4      	cbz	r4, 8008bdc <__d2b+0x88>
 8008baa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008bae:	4404      	add	r4, r0
 8008bb0:	6034      	str	r4, [r6, #0]
 8008bb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bb6:	6028      	str	r0, [r5, #0]
 8008bb8:	4638      	mov	r0, r7
 8008bba:	b002      	add	sp, #8
 8008bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008bc4:	e7d5      	b.n	8008b72 <__d2b+0x1e>
 8008bc6:	6179      	str	r1, [r7, #20]
 8008bc8:	e7e7      	b.n	8008b9a <__d2b+0x46>
 8008bca:	a801      	add	r0, sp, #4
 8008bcc:	f7ff fddb 	bl	8008786 <__lo0bits>
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	9b01      	ldr	r3, [sp, #4]
 8008bd4:	6139      	str	r1, [r7, #16]
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	3020      	adds	r0, #32
 8008bda:	e7e5      	b.n	8008ba8 <__d2b+0x54>
 8008bdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008be0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008be4:	6030      	str	r0, [r6, #0]
 8008be6:	6918      	ldr	r0, [r3, #16]
 8008be8:	f7ff fdae 	bl	8008748 <__hi0bits>
 8008bec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008bf0:	e7e1      	b.n	8008bb6 <__d2b+0x62>

08008bf2 <_calloc_r>:
 8008bf2:	b538      	push	{r3, r4, r5, lr}
 8008bf4:	fb02 f401 	mul.w	r4, r2, r1
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	f000 f809 	bl	8008c10 <_malloc_r>
 8008bfe:	4605      	mov	r5, r0
 8008c00:	b118      	cbz	r0, 8008c0a <_calloc_r+0x18>
 8008c02:	4622      	mov	r2, r4
 8008c04:	2100      	movs	r1, #0
 8008c06:	f7fe fb7a 	bl	80072fe <memset>
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008c10 <_malloc_r>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	1ccd      	adds	r5, r1, #3
 8008c14:	f025 0503 	bic.w	r5, r5, #3
 8008c18:	3508      	adds	r5, #8
 8008c1a:	2d0c      	cmp	r5, #12
 8008c1c:	bf38      	it	cc
 8008c1e:	250c      	movcc	r5, #12
 8008c20:	2d00      	cmp	r5, #0
 8008c22:	4606      	mov	r6, r0
 8008c24:	db01      	blt.n	8008c2a <_malloc_r+0x1a>
 8008c26:	42a9      	cmp	r1, r5
 8008c28:	d903      	bls.n	8008c32 <_malloc_r+0x22>
 8008c2a:	230c      	movs	r3, #12
 8008c2c:	6033      	str	r3, [r6, #0]
 8008c2e:	2000      	movs	r0, #0
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
 8008c32:	f000 f869 	bl	8008d08 <__malloc_lock>
 8008c36:	4a21      	ldr	r2, [pc, #132]	; (8008cbc <_malloc_r+0xac>)
 8008c38:	6814      	ldr	r4, [r2, #0]
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	b991      	cbnz	r1, 8008c64 <_malloc_r+0x54>
 8008c3e:	4c20      	ldr	r4, [pc, #128]	; (8008cc0 <_malloc_r+0xb0>)
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	b91b      	cbnz	r3, 8008c4c <_malloc_r+0x3c>
 8008c44:	4630      	mov	r0, r6
 8008c46:	f000 f83d 	bl	8008cc4 <_sbrk_r>
 8008c4a:	6020      	str	r0, [r4, #0]
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f000 f838 	bl	8008cc4 <_sbrk_r>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d124      	bne.n	8008ca2 <_malloc_r+0x92>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	6033      	str	r3, [r6, #0]
 8008c5e:	f000 f854 	bl	8008d0a <__malloc_unlock>
 8008c62:	e7e4      	b.n	8008c2e <_malloc_r+0x1e>
 8008c64:	680b      	ldr	r3, [r1, #0]
 8008c66:	1b5b      	subs	r3, r3, r5
 8008c68:	d418      	bmi.n	8008c9c <_malloc_r+0x8c>
 8008c6a:	2b0b      	cmp	r3, #11
 8008c6c:	d90f      	bls.n	8008c8e <_malloc_r+0x7e>
 8008c6e:	600b      	str	r3, [r1, #0]
 8008c70:	18cc      	adds	r4, r1, r3
 8008c72:	50cd      	str	r5, [r1, r3]
 8008c74:	4630      	mov	r0, r6
 8008c76:	f000 f848 	bl	8008d0a <__malloc_unlock>
 8008c7a:	f104 000b 	add.w	r0, r4, #11
 8008c7e:	1d23      	adds	r3, r4, #4
 8008c80:	f020 0007 	bic.w	r0, r0, #7
 8008c84:	1ac3      	subs	r3, r0, r3
 8008c86:	d0d3      	beq.n	8008c30 <_malloc_r+0x20>
 8008c88:	425a      	negs	r2, r3
 8008c8a:	50e2      	str	r2, [r4, r3]
 8008c8c:	e7d0      	b.n	8008c30 <_malloc_r+0x20>
 8008c8e:	684b      	ldr	r3, [r1, #4]
 8008c90:	428c      	cmp	r4, r1
 8008c92:	bf16      	itet	ne
 8008c94:	6063      	strne	r3, [r4, #4]
 8008c96:	6013      	streq	r3, [r2, #0]
 8008c98:	460c      	movne	r4, r1
 8008c9a:	e7eb      	b.n	8008c74 <_malloc_r+0x64>
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	6849      	ldr	r1, [r1, #4]
 8008ca0:	e7cc      	b.n	8008c3c <_malloc_r+0x2c>
 8008ca2:	1cc4      	adds	r4, r0, #3
 8008ca4:	f024 0403 	bic.w	r4, r4, #3
 8008ca8:	42a0      	cmp	r0, r4
 8008caa:	d005      	beq.n	8008cb8 <_malloc_r+0xa8>
 8008cac:	1a21      	subs	r1, r4, r0
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f000 f808 	bl	8008cc4 <_sbrk_r>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d0cf      	beq.n	8008c58 <_malloc_r+0x48>
 8008cb8:	6025      	str	r5, [r4, #0]
 8008cba:	e7db      	b.n	8008c74 <_malloc_r+0x64>
 8008cbc:	20000218 	.word	0x20000218
 8008cc0:	2000021c 	.word	0x2000021c

08008cc4 <_sbrk_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	4c05      	ldr	r4, [pc, #20]	; (8008ce0 <_sbrk_r+0x1c>)
 8008cca:	4605      	mov	r5, r0
 8008ccc:	4608      	mov	r0, r1
 8008cce:	6023      	str	r3, [r4, #0]
 8008cd0:	f7fa fac4 	bl	800325c <_sbrk>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d102      	bne.n	8008cde <_sbrk_r+0x1a>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	b103      	cbz	r3, 8008cde <_sbrk_r+0x1a>
 8008cdc:	602b      	str	r3, [r5, #0]
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
 8008ce0:	200003c8 	.word	0x200003c8

08008ce4 <__ascii_mbtowc>:
 8008ce4:	b082      	sub	sp, #8
 8008ce6:	b901      	cbnz	r1, 8008cea <__ascii_mbtowc+0x6>
 8008ce8:	a901      	add	r1, sp, #4
 8008cea:	b142      	cbz	r2, 8008cfe <__ascii_mbtowc+0x1a>
 8008cec:	b14b      	cbz	r3, 8008d02 <__ascii_mbtowc+0x1e>
 8008cee:	7813      	ldrb	r3, [r2, #0]
 8008cf0:	600b      	str	r3, [r1, #0]
 8008cf2:	7812      	ldrb	r2, [r2, #0]
 8008cf4:	1c10      	adds	r0, r2, #0
 8008cf6:	bf18      	it	ne
 8008cf8:	2001      	movne	r0, #1
 8008cfa:	b002      	add	sp, #8
 8008cfc:	4770      	bx	lr
 8008cfe:	4610      	mov	r0, r2
 8008d00:	e7fb      	b.n	8008cfa <__ascii_mbtowc+0x16>
 8008d02:	f06f 0001 	mvn.w	r0, #1
 8008d06:	e7f8      	b.n	8008cfa <__ascii_mbtowc+0x16>

08008d08 <__malloc_lock>:
 8008d08:	4770      	bx	lr

08008d0a <__malloc_unlock>:
 8008d0a:	4770      	bx	lr

08008d0c <__ascii_wctomb>:
 8008d0c:	b149      	cbz	r1, 8008d22 <__ascii_wctomb+0x16>
 8008d0e:	2aff      	cmp	r2, #255	; 0xff
 8008d10:	bf8b      	itete	hi
 8008d12:	238a      	movhi	r3, #138	; 0x8a
 8008d14:	700a      	strbls	r2, [r1, #0]
 8008d16:	6003      	strhi	r3, [r0, #0]
 8008d18:	2001      	movls	r0, #1
 8008d1a:	bf88      	it	hi
 8008d1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d20:	4770      	bx	lr
 8008d22:	4608      	mov	r0, r1
 8008d24:	4770      	bx	lr
	...

08008d28 <ceil>:
 8008d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d2c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008d30:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008d34:	2e13      	cmp	r6, #19
 8008d36:	4607      	mov	r7, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	dc31      	bgt.n	8008da4 <ceil+0x7c>
 8008d40:	2e00      	cmp	r6, #0
 8008d42:	da12      	bge.n	8008d6a <ceil+0x42>
 8008d44:	a334      	add	r3, pc, #208	; (adr r3, 8008e18 <ceil+0xf0>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	f7f7 fa0f 	bl	800016c <__adddf3>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2300      	movs	r3, #0
 8008d52:	f7f7 fe51 	bl	80009f8 <__aeabi_dcmpgt>
 8008d56:	b128      	cbz	r0, 8008d64 <ceil+0x3c>
 8008d58:	2c00      	cmp	r4, #0
 8008d5a:	db57      	blt.n	8008e0c <ceil+0xe4>
 8008d5c:	433c      	orrs	r4, r7
 8008d5e:	d059      	beq.n	8008e14 <ceil+0xec>
 8008d60:	2500      	movs	r5, #0
 8008d62:	4c2f      	ldr	r4, [pc, #188]	; (8008e20 <ceil+0xf8>)
 8008d64:	4623      	mov	r3, r4
 8008d66:	462f      	mov	r7, r5
 8008d68:	e026      	b.n	8008db8 <ceil+0x90>
 8008d6a:	4a2e      	ldr	r2, [pc, #184]	; (8008e24 <ceil+0xfc>)
 8008d6c:	fa42 f806 	asr.w	r8, r2, r6
 8008d70:	ea01 0208 	and.w	r2, r1, r8
 8008d74:	4302      	orrs	r2, r0
 8008d76:	d01f      	beq.n	8008db8 <ceil+0x90>
 8008d78:	a327      	add	r3, pc, #156	; (adr r3, 8008e18 <ceil+0xf0>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 f9f5 	bl	800016c <__adddf3>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	f7f7 fe37 	bl	80009f8 <__aeabi_dcmpgt>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0ea      	beq.n	8008d64 <ceil+0x3c>
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	bfc2      	ittt	gt
 8008d92:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8008d96:	fa43 f606 	asrgt.w	r6, r3, r6
 8008d9a:	19a4      	addgt	r4, r4, r6
 8008d9c:	ea24 0408 	bic.w	r4, r4, r8
 8008da0:	2500      	movs	r5, #0
 8008da2:	e7df      	b.n	8008d64 <ceil+0x3c>
 8008da4:	2e33      	cmp	r6, #51	; 0x33
 8008da6:	dd0b      	ble.n	8008dc0 <ceil+0x98>
 8008da8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008dac:	d104      	bne.n	8008db8 <ceil+0x90>
 8008dae:	4602      	mov	r2, r0
 8008db0:	f7f7 f9dc 	bl	800016c <__adddf3>
 8008db4:	4607      	mov	r7, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4638      	mov	r0, r7
 8008dba:	4619      	mov	r1, r3
 8008dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008dc8:	fa22 f808 	lsr.w	r8, r2, r8
 8008dcc:	ea18 0f00 	tst.w	r8, r0
 8008dd0:	d0f2      	beq.n	8008db8 <ceil+0x90>
 8008dd2:	a311      	add	r3, pc, #68	; (adr r3, 8008e18 <ceil+0xf0>)
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	f7f7 f9c8 	bl	800016c <__adddf3>
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2300      	movs	r3, #0
 8008de0:	f7f7 fe0a 	bl	80009f8 <__aeabi_dcmpgt>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d0bd      	beq.n	8008d64 <ceil+0x3c>
 8008de8:	2c00      	cmp	r4, #0
 8008dea:	dd02      	ble.n	8008df2 <ceil+0xca>
 8008dec:	2e14      	cmp	r6, #20
 8008dee:	d103      	bne.n	8008df8 <ceil+0xd0>
 8008df0:	3401      	adds	r4, #1
 8008df2:	ea25 0508 	bic.w	r5, r5, r8
 8008df6:	e7b5      	b.n	8008d64 <ceil+0x3c>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008dfe:	fa03 f606 	lsl.w	r6, r3, r6
 8008e02:	4435      	add	r5, r6
 8008e04:	42bd      	cmp	r5, r7
 8008e06:	bf38      	it	cc
 8008e08:	18e4      	addcc	r4, r4, r3
 8008e0a:	e7f2      	b.n	8008df2 <ceil+0xca>
 8008e0c:	2500      	movs	r5, #0
 8008e0e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008e12:	e7a7      	b.n	8008d64 <ceil+0x3c>
 8008e14:	4625      	mov	r5, r4
 8008e16:	e7a5      	b.n	8008d64 <ceil+0x3c>
 8008e18:	8800759c 	.word	0x8800759c
 8008e1c:	7e37e43c 	.word	0x7e37e43c
 8008e20:	3ff00000 	.word	0x3ff00000
 8008e24:	000fffff 	.word	0x000fffff

08008e28 <_init>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr

08008e34 <_fini>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	bf00      	nop
 8008e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e3a:	bc08      	pop	{r3}
 8008e3c:	469e      	mov	lr, r3
 8008e3e:	4770      	bx	lr
